import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  /** A point in time as described by the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone. */
  Datetime: any;
  /** The day, does not include a time. */
  Date: any;
  CharacterData: any;
  SqlIdentifier: any;
  YesOrNo: any;
  /** A signed eight-byte integer. The upper big integer values are greater than the max value for a JavaScript number. Therefore all big integers will be output as strings and not numbers. */
  BigInt: any;
};

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  /** Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form. */
  query: Query;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID'];
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** Reads and enables pagination through a set of `ActionPlugin`. */
  actionPlugins?: Maybe<ActionPluginsConnection>;
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueues?: Maybe<ActionQueuesConnection>;
  /** Reads and enables pagination through a set of `ActivityLog`. */
  activityLogs?: Maybe<ActivityLogsConnection>;
  /** Reads and enables pagination through a set of `Application`. */
  applications?: Maybe<ApplicationsConnection>;
  /** Reads and enables pagination through a set of `ApplicationListShape`. */
  applicationListShapes?: Maybe<ApplicationListShapesConnection>;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotes?: Maybe<ApplicationNotesConnection>;
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses?: Maybe<ApplicationResponsesConnection>;
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistories?: Maybe<ApplicationStageHistoriesConnection>;
  /** Reads and enables pagination through a set of `ApplicationStageStatusAll`. */
  applicationStageStatusAlls?: Maybe<ApplicationStageStatusAllsConnection>;
  /** Reads and enables pagination through a set of `ApplicationStageStatusLatest`. */
  applicationStageStatusLatests?: Maybe<ApplicationStageStatusLatestsConnection>;
  /** Reads and enables pagination through a set of `ApplicationStatusHistory`. */
  applicationStatusHistories?: Maybe<ApplicationStatusHistoriesConnection>;
  /** Reads and enables pagination through a set of `ConstraintsInfo`. */
  constraintsInfos?: Maybe<ConstraintsInfosConnection>;
  /** Reads and enables pagination through a set of `Counter`. */
  counters?: Maybe<CountersConnection>;
  /** Reads and enables pagination through a set of `DataTable`. */
  dataTables?: Maybe<DataTablesConnection>;
  /** Reads and enables pagination through a set of `DataTableManufacturingStep`. */
  dataTableManufacturingSteps?: Maybe<DataTableManufacturingStepsConnection>;
  /** Reads and enables pagination through a set of `DataTableActiveIngredient`. */
  dataTableActiveIngredients?: Maybe<DataTableActiveIngredientsConnection>;
  /** Reads and enables pagination through a set of `DataTableAdministrationRoute`. */
  dataTableAdministrationRoutes?: Maybe<DataTableAdministrationRoutesConnection>;
  /** Reads and enables pagination through a set of `DataTableAnnex`. */
  dataTableAnnexes?: Maybe<DataTableAnnexesConnection>;
  /** Reads and enables pagination through a set of `DataTableAnnex2`. */
  dataTableAnnex2s?: Maybe<DataTableAnnex2sConnection>;
  /** Reads and enables pagination through a set of `DataTableAtcCode`. */
  dataTableAtcCodes?: Maybe<DataTableAtcCodesConnection>;
  /** Reads and enables pagination through a set of `DataTableAtcTherapeuticCategory`. */
  dataTableAtcTherapeuticCategories?: Maybe<DataTableAtcTherapeuticCategoriesConnection>;
  /** Reads and enables pagination through a set of `DataTableContainer`. */
  dataTableContainers?: Maybe<DataTableContainersConnection>;
  /** Reads and enables pagination through a set of `DataTableCountry`. */
  dataTableCountries?: Maybe<DataTableCountriesConnection>;
  /** Reads and enables pagination through a set of `DataTableDosageForm`. */
  dataTableDosageForms?: Maybe<DataTableDosageFormsConnection>;
  /** Reads and enables pagination through a set of `DataTableGenericIngredient`. */
  dataTableGenericIngredients?: Maybe<DataTableGenericIngredientsConnection>;
  /** Reads and enables pagination through a set of `DataTableIngredientsList`. */
  dataTableIngredientsLists?: Maybe<DataTableIngredientsListsConnection>;
  /** Reads and enables pagination through a set of `DataTableListOfSra`. */
  dataTableListOfSras?: Maybe<DataTableListOfSrasConnection>;
  /** Reads and enables pagination through a set of `DataTableProcessingStep`. */
  dataTableProcessingSteps?: Maybe<DataTableProcessingStepsConnection>;
  /** Reads and enables pagination through a set of `DataTableProduct`. */
  dataTableProducts?: Maybe<DataTableProductsConnection>;
  /** Reads and enables pagination through a set of `DataTableProductApplicationJoin`. */
  dataTableProductApplicationJoins?: Maybe<DataTableProductApplicationJoinsConnection>;
  /** Reads and enables pagination through a set of `DataTableProvince`. */
  dataTableProvinces?: Maybe<DataTableProvincesConnection>;
  /** Reads and enables pagination through a set of `DataTableStorageCondition`. */
  dataTableStorageConditions?: Maybe<DataTableStorageConditionsConnection>;
  /** Reads and enables pagination through a set of `DataTableUnitsOfProportion`. */
  dataTableUnitsOfProportions?: Maybe<DataTableUnitsOfProportionsConnection>;
  /** Reads and enables pagination through a set of `DataView`. */
  dataViews?: Maybe<DataViewsConnection>;
  /** Reads and enables pagination through a set of `DataViewColumnDefinition`. */
  dataViewColumnDefinitions?: Maybe<DataViewColumnDefinitionsConnection>;
  /** Reads and enables pagination through a set of `ElementTypePlugin`. */
  elementTypePlugins?: Maybe<ElementTypePluginsConnection>;
  /** Reads and enables pagination through a set of `File`. */
  files?: Maybe<FilesConnection>;
  /** Reads and enables pagination through a set of `Filter`. */
  filters?: Maybe<FiltersConnection>;
  /** Reads and enables pagination through a set of `Notification`. */
  notifications?: Maybe<NotificationsConnection>;
  /** Reads and enables pagination through a set of `Organisation`. */
  organisations?: Maybe<OrganisationsConnection>;
  /** Reads and enables pagination through a set of `OrganisationApplicationJoin`. */
  organisationApplicationJoins?: Maybe<OrganisationApplicationJoinsConnection>;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins?: Maybe<PermissionJoinsConnection>;
  /** Reads and enables pagination through a set of `PermissionName`. */
  permissionNames?: Maybe<PermissionNamesConnection>;
  /** Reads and enables pagination through a set of `PermissionPolicy`. */
  permissionPolicies?: Maybe<PermissionPoliciesConnection>;
  /** Reads and enables pagination through a set of `PermissionsAll`. */
  permissionsAlls?: Maybe<PermissionsAllsConnection>;
  /** Reads and enables pagination through a set of `PostgresRowLevel`. */
  postgresRowLevels?: Maybe<PostgresRowLevelsConnection>;
  /** Reads and enables pagination through a set of `ProductApplicationJoin`. */
  productApplicationJoins?: Maybe<ProductApplicationJoinsConnection>;
  /** Reads and enables pagination through a set of `Review`. */
  reviews?: Maybe<ReviewsConnection>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments?: Maybe<ReviewAssignmentsConnection>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins?: Maybe<ReviewAssignmentAssignerJoinsConnection>;
  /** Reads and enables pagination through a set of `ReviewDecision`. */
  reviewDecisions?: Maybe<ReviewDecisionsConnection>;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses?: Maybe<ReviewResponsesConnection>;
  /** Reads and enables pagination through a set of `ReviewStatusHistory`. */
  reviewStatusHistories?: Maybe<ReviewStatusHistoriesConnection>;
  /** Reads and enables pagination through a set of `SchemaColumn`. */
  schemaColumns?: Maybe<SchemaColumnsConnection>;
  /** Reads and enables pagination through a set of `SystemInfo`. */
  systemInfos?: Maybe<SystemInfosConnection>;
  /** Reads and enables pagination through a set of `Template`. */
  templates?: Maybe<TemplatesConnection>;
  /** Reads and enables pagination through a set of `TemplateAction`. */
  templateActions?: Maybe<TemplateActionsConnection>;
  /** Reads and enables pagination through a set of `TemplateCategory`. */
  templateCategories?: Maybe<TemplateCategoriesConnection>;
  /** Reads and enables pagination through a set of `TemplateElement`. */
  templateElements?: Maybe<TemplateElementsConnection>;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins?: Maybe<TemplateFilterJoinsConnection>;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions?: Maybe<TemplatePermissionsConnection>;
  /** Reads and enables pagination through a set of `TemplateSection`. */
  templateSections?: Maybe<TemplateSectionsConnection>;
  /** Reads and enables pagination through a set of `TemplateStage`. */
  templateStages?: Maybe<TemplateStagesConnection>;
  /** Reads and enables pagination through a set of `TemplateStageReviewLevel`. */
  templateStageReviewLevels?: Maybe<TemplateStageReviewLevelsConnection>;
  /** Reads and enables pagination through a set of `TriggerQueue`. */
  triggerQueues?: Maybe<TriggerQueuesConnection>;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules?: Maybe<TriggerSchedulesConnection>;
  /** Reads and enables pagination through a set of `User`. */
  users?: Maybe<UsersConnection>;
  /** Reads and enables pagination through a set of `UserApplicationJoin`. */
  userApplicationJoins?: Maybe<UserApplicationJoinsConnection>;
  /** Reads and enables pagination through a set of `UserOrgJoin`. */
  userOrgJoins?: Maybe<UserOrgJoinsConnection>;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations?: Maybe<UserOrganisationsConnection>;
  /** Reads and enables pagination through a set of `UserOrganisationApplicationJoin`. */
  userOrganisationApplicationJoins?: Maybe<UserOrganisationApplicationJoinsConnection>;
  /** Reads and enables pagination through a set of `Verification`. */
  verifications?: Maybe<VerificationsConnection>;
  actionPlugin?: Maybe<ActionPlugin>;
  actionPluginByCode?: Maybe<ActionPlugin>;
  actionQueue?: Maybe<ActionQueue>;
  activityLog?: Maybe<ActivityLog>;
  application?: Maybe<Application>;
  applicationBySerial?: Maybe<Application>;
  applicationNote?: Maybe<ApplicationNote>;
  applicationResponse?: Maybe<ApplicationResponse>;
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  counter?: Maybe<Counter>;
  counterByName?: Maybe<Counter>;
  dataTable?: Maybe<DataTable>;
  dataTableByTableName?: Maybe<DataTable>;
  dataTableManufacturingStep?: Maybe<DataTableManufacturingStep>;
  dataTableActiveIngredient?: Maybe<DataTableActiveIngredient>;
  dataTableAdministrationRoute?: Maybe<DataTableAdministrationRoute>;
  dataTableAnnex?: Maybe<DataTableAnnex>;
  dataTableAnnex2?: Maybe<DataTableAnnex2>;
  dataTableAtcCode?: Maybe<DataTableAtcCode>;
  dataTableAtcTherapeuticCategory?: Maybe<DataTableAtcTherapeuticCategory>;
  dataTableContainer?: Maybe<DataTableContainer>;
  dataTableCountry?: Maybe<DataTableCountry>;
  dataTableDosageForm?: Maybe<DataTableDosageForm>;
  dataTableGenericIngredient?: Maybe<DataTableGenericIngredient>;
  dataTableIngredientsList?: Maybe<DataTableIngredientsList>;
  dataTableListOfSra?: Maybe<DataTableListOfSra>;
  dataTableProcessingStep?: Maybe<DataTableProcessingStep>;
  dataTableProduct?: Maybe<DataTableProduct>;
  dataTableProductApplicationJoin?: Maybe<DataTableProductApplicationJoin>;
  dataTableProvince?: Maybe<DataTableProvince>;
  dataTableStorageCondition?: Maybe<DataTableStorageCondition>;
  dataTableUnitsOfProportion?: Maybe<DataTableUnitsOfProportion>;
  dataView?: Maybe<DataView>;
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  dataViewColumnDefinitionByTableNameAndColumnName?: Maybe<DataViewColumnDefinition>;
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  file?: Maybe<File>;
  fileByUniqueId?: Maybe<File>;
  filter?: Maybe<Filter>;
  filterByCode?: Maybe<Filter>;
  notification?: Maybe<Notification>;
  organisation?: Maybe<Organisation>;
  organisationByName?: Maybe<Organisation>;
  organisationByRegistration?: Maybe<Organisation>;
  organisationApplicationJoin?: Maybe<OrganisationApplicationJoin>;
  permissionJoin?: Maybe<PermissionJoin>;
  permissionName?: Maybe<PermissionName>;
  permissionNameByName?: Maybe<PermissionName>;
  permissionPolicy?: Maybe<PermissionPolicy>;
  permissionPolicyByName?: Maybe<PermissionPolicy>;
  productApplicationJoin?: Maybe<ProductApplicationJoin>;
  review?: Maybe<Review>;
  reviewAssignment?: Maybe<ReviewAssignment>;
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  reviewDecision?: Maybe<ReviewDecision>;
  reviewResponse?: Maybe<ReviewResponse>;
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  systemInfo?: Maybe<SystemInfo>;
  template?: Maybe<Template>;
  templateAction?: Maybe<TemplateAction>;
  templateCategory?: Maybe<TemplateCategory>;
  templateCategoryByCode?: Maybe<TemplateCategory>;
  templateElement?: Maybe<TemplateElement>;
  templateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElement>;
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  templatePermission?: Maybe<TemplatePermission>;
  templateSection?: Maybe<TemplateSection>;
  templateSectionByTemplateIdAndCode?: Maybe<TemplateSection>;
  templateStage?: Maybe<TemplateStage>;
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  triggerQueue?: Maybe<TriggerQueue>;
  triggerSchedule?: Maybe<TriggerSchedule>;
  user?: Maybe<User>;
  userByUsername?: Maybe<User>;
  userApplicationJoin?: Maybe<UserApplicationJoin>;
  userOrganisation?: Maybe<UserOrganisation>;
  userOrganisationByUserIdAndOrganisationId?: Maybe<UserOrganisation>;
  userOrganisationApplicationJoin?: Maybe<UserOrganisationApplicationJoin>;
  verification?: Maybe<Verification>;
  verificationByUniqueId?: Maybe<Verification>;
  /** Reads and enables pagination through a set of `ApplicationListShape`. */
  applicationList?: Maybe<ApplicationListShapesConnection>;
  applicationListFilterApplicant?: Maybe<ApplicationListFilterApplicantConnection>;
  applicationListFilterAssigner?: Maybe<ApplicationListFilterAssignerConnection>;
  applicationListFilterOrganisation?: Maybe<ApplicationListFilterOrganisationConnection>;
  applicationListFilterReviewer?: Maybe<ApplicationListFilterReviewerConnection>;
  applicationListFilterStage?: Maybe<ApplicationListFilterStageConnection>;
  applicationStatusHistoryApplicationId?: Maybe<Scalars['Int']>;
  assignableQuestionsCount?: Maybe<Scalars['BigInt']>;
  assignedQuestions?: Maybe<AssignedQuestionsConnection>;
  assignedQuestionsCount?: Maybe<Scalars['BigInt']>;
  assignerList?: Maybe<AssignerListConnection>;
  assignmentList?: Maybe<AssignmentListConnection>;
  getTemplateCode?: Maybe<Scalars['String']>;
  getTemplateVersion?: Maybe<Scalars['Int']>;
  jwtGetBigint?: Maybe<Scalars['BigInt']>;
  jwtGetBoolean?: Maybe<Scalars['Boolean']>;
  jwtGetText?: Maybe<Scalars['String']>;
  reviewApplicationId?: Maybe<Scalars['Int']>;
  reviewAssignmentTemplateId?: Maybe<Scalars['Int']>;
  reviewIsFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewIsLastLevel?: Maybe<Scalars['Boolean']>;
  reviewIsLastStage?: Maybe<Scalars['Boolean']>;
  reviewLevel?: Maybe<Scalars['Int']>;
  reviewReviewerId?: Maybe<Scalars['Int']>;
  reviewStage?: Maybe<Scalars['Int']>;
  reviewTimeStageCreated?: Maybe<Scalars['Datetime']>;
  reviewableQuestions?: Maybe<ReviewableQuestionsConnection>;
  reviewableQuestionsCount?: Maybe<Scalars['BigInt']>;
  submittedAssignedQuestionsCount?: Maybe<Scalars['BigInt']>;
  /** Reads a single `ActionPlugin` using its globally unique `ID`. */
  actionPluginByNodeId?: Maybe<ActionPlugin>;
  /** Reads a single `ActionQueue` using its globally unique `ID`. */
  actionQueueByNodeId?: Maybe<ActionQueue>;
  /** Reads a single `ActivityLog` using its globally unique `ID`. */
  activityLogByNodeId?: Maybe<ActivityLog>;
  /** Reads a single `Application` using its globally unique `ID`. */
  applicationByNodeId?: Maybe<Application>;
  /** Reads a single `ApplicationNote` using its globally unique `ID`. */
  applicationNoteByNodeId?: Maybe<ApplicationNote>;
  /** Reads a single `ApplicationResponse` using its globally unique `ID`. */
  applicationResponseByNodeId?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationStageHistory` using its globally unique `ID`. */
  applicationStageHistoryByNodeId?: Maybe<ApplicationStageHistory>;
  /** Reads a single `ApplicationStatusHistory` using its globally unique `ID`. */
  applicationStatusHistoryByNodeId?: Maybe<ApplicationStatusHistory>;
  /** Reads a single `Counter` using its globally unique `ID`. */
  counterByNodeId?: Maybe<Counter>;
  /** Reads a single `DataTable` using its globally unique `ID`. */
  dataTableByNodeId?: Maybe<DataTable>;
  /** Reads a single `DataTableManufacturingStep` using its globally unique `ID`. */
  dataTableManufacturingStepByNodeId?: Maybe<DataTableManufacturingStep>;
  /** Reads a single `DataTableActiveIngredient` using its globally unique `ID`. */
  dataTableActiveIngredientByNodeId?: Maybe<DataTableActiveIngredient>;
  /** Reads a single `DataTableAdministrationRoute` using its globally unique `ID`. */
  dataTableAdministrationRouteByNodeId?: Maybe<DataTableAdministrationRoute>;
  /** Reads a single `DataTableAnnex` using its globally unique `ID`. */
  dataTableAnnexByNodeId?: Maybe<DataTableAnnex>;
  /** Reads a single `DataTableAnnex2` using its globally unique `ID`. */
  dataTableAnnex2ByNodeId?: Maybe<DataTableAnnex2>;
  /** Reads a single `DataTableAtcCode` using its globally unique `ID`. */
  dataTableAtcCodeByNodeId?: Maybe<DataTableAtcCode>;
  /** Reads a single `DataTableAtcTherapeuticCategory` using its globally unique `ID`. */
  dataTableAtcTherapeuticCategoryByNodeId?: Maybe<DataTableAtcTherapeuticCategory>;
  /** Reads a single `DataTableContainer` using its globally unique `ID`. */
  dataTableContainerByNodeId?: Maybe<DataTableContainer>;
  /** Reads a single `DataTableCountry` using its globally unique `ID`. */
  dataTableCountryByNodeId?: Maybe<DataTableCountry>;
  /** Reads a single `DataTableDosageForm` using its globally unique `ID`. */
  dataTableDosageFormByNodeId?: Maybe<DataTableDosageForm>;
  /** Reads a single `DataTableGenericIngredient` using its globally unique `ID`. */
  dataTableGenericIngredientByNodeId?: Maybe<DataTableGenericIngredient>;
  /** Reads a single `DataTableIngredientsList` using its globally unique `ID`. */
  dataTableIngredientsListByNodeId?: Maybe<DataTableIngredientsList>;
  /** Reads a single `DataTableListOfSra` using its globally unique `ID`. */
  dataTableListOfSraByNodeId?: Maybe<DataTableListOfSra>;
  /** Reads a single `DataTableProcessingStep` using its globally unique `ID`. */
  dataTableProcessingStepByNodeId?: Maybe<DataTableProcessingStep>;
  /** Reads a single `DataTableProduct` using its globally unique `ID`. */
  dataTableProductByNodeId?: Maybe<DataTableProduct>;
  /** Reads a single `DataTableProductApplicationJoin` using its globally unique `ID`. */
  dataTableProductApplicationJoinByNodeId?: Maybe<DataTableProductApplicationJoin>;
  /** Reads a single `DataTableProvince` using its globally unique `ID`. */
  dataTableProvinceByNodeId?: Maybe<DataTableProvince>;
  /** Reads a single `DataTableStorageCondition` using its globally unique `ID`. */
  dataTableStorageConditionByNodeId?: Maybe<DataTableStorageCondition>;
  /** Reads a single `DataTableUnitsOfProportion` using its globally unique `ID`. */
  dataTableUnitsOfProportionByNodeId?: Maybe<DataTableUnitsOfProportion>;
  /** Reads a single `DataView` using its globally unique `ID`. */
  dataViewByNodeId?: Maybe<DataView>;
  /** Reads a single `DataViewColumnDefinition` using its globally unique `ID`. */
  dataViewColumnDefinitionByNodeId?: Maybe<DataViewColumnDefinition>;
  /** Reads a single `ElementTypePlugin` using its globally unique `ID`. */
  elementTypePluginByNodeId?: Maybe<ElementTypePlugin>;
  /** Reads a single `File` using its globally unique `ID`. */
  fileByNodeId?: Maybe<File>;
  /** Reads a single `Filter` using its globally unique `ID`. */
  filterByNodeId?: Maybe<Filter>;
  /** Reads a single `Notification` using its globally unique `ID`. */
  notificationByNodeId?: Maybe<Notification>;
  /** Reads a single `Organisation` using its globally unique `ID`. */
  organisationByNodeId?: Maybe<Organisation>;
  /** Reads a single `OrganisationApplicationJoin` using its globally unique `ID`. */
  organisationApplicationJoinByNodeId?: Maybe<OrganisationApplicationJoin>;
  /** Reads a single `PermissionJoin` using its globally unique `ID`. */
  permissionJoinByNodeId?: Maybe<PermissionJoin>;
  /** Reads a single `PermissionName` using its globally unique `ID`. */
  permissionNameByNodeId?: Maybe<PermissionName>;
  /** Reads a single `PermissionPolicy` using its globally unique `ID`. */
  permissionPolicyByNodeId?: Maybe<PermissionPolicy>;
  /** Reads a single `ProductApplicationJoin` using its globally unique `ID`. */
  productApplicationJoinByNodeId?: Maybe<ProductApplicationJoin>;
  /** Reads a single `Review` using its globally unique `ID`. */
  reviewByNodeId?: Maybe<Review>;
  /** Reads a single `ReviewAssignment` using its globally unique `ID`. */
  reviewAssignmentByNodeId?: Maybe<ReviewAssignment>;
  /** Reads a single `ReviewAssignmentAssignerJoin` using its globally unique `ID`. */
  reviewAssignmentAssignerJoinByNodeId?: Maybe<ReviewAssignmentAssignerJoin>;
  /** Reads a single `ReviewDecision` using its globally unique `ID`. */
  reviewDecisionByNodeId?: Maybe<ReviewDecision>;
  /** Reads a single `ReviewResponse` using its globally unique `ID`. */
  reviewResponseByNodeId?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewStatusHistory` using its globally unique `ID`. */
  reviewStatusHistoryByNodeId?: Maybe<ReviewStatusHistory>;
  /** Reads a single `SystemInfo` using its globally unique `ID`. */
  systemInfoByNodeId?: Maybe<SystemInfo>;
  /** Reads a single `Template` using its globally unique `ID`. */
  templateByNodeId?: Maybe<Template>;
  /** Reads a single `TemplateAction` using its globally unique `ID`. */
  templateActionByNodeId?: Maybe<TemplateAction>;
  /** Reads a single `TemplateCategory` using its globally unique `ID`. */
  templateCategoryByNodeId?: Maybe<TemplateCategory>;
  /** Reads a single `TemplateElement` using its globally unique `ID`. */
  templateElementByNodeId?: Maybe<TemplateElement>;
  /** Reads a single `TemplateFilterJoin` using its globally unique `ID`. */
  templateFilterJoinByNodeId?: Maybe<TemplateFilterJoin>;
  /** Reads a single `TemplatePermission` using its globally unique `ID`. */
  templatePermissionByNodeId?: Maybe<TemplatePermission>;
  /** Reads a single `TemplateSection` using its globally unique `ID`. */
  templateSectionByNodeId?: Maybe<TemplateSection>;
  /** Reads a single `TemplateStage` using its globally unique `ID`. */
  templateStageByNodeId?: Maybe<TemplateStage>;
  /** Reads a single `TemplateStageReviewLevel` using its globally unique `ID`. */
  templateStageReviewLevelByNodeId?: Maybe<TemplateStageReviewLevel>;
  /** Reads a single `TriggerQueue` using its globally unique `ID`. */
  triggerQueueByNodeId?: Maybe<TriggerQueue>;
  /** Reads a single `TriggerSchedule` using its globally unique `ID`. */
  triggerScheduleByNodeId?: Maybe<TriggerSchedule>;
  /** Reads a single `User` using its globally unique `ID`. */
  userByNodeId?: Maybe<User>;
  /** Reads a single `UserApplicationJoin` using its globally unique `ID`. */
  userApplicationJoinByNodeId?: Maybe<UserApplicationJoin>;
  /** Reads a single `UserOrganisation` using its globally unique `ID`. */
  userOrganisationByNodeId?: Maybe<UserOrganisation>;
  /** Reads a single `UserOrganisationApplicationJoin` using its globally unique `ID`. */
  userOrganisationApplicationJoinByNodeId?: Maybe<UserOrganisationApplicationJoin>;
  /** Reads a single `Verification` using its globally unique `ID`. */
  verificationByNodeId?: Maybe<Verification>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActionPluginsOrderBy>>;
  condition?: Maybe<ActionPluginCondition>;
  filter?: Maybe<ActionPluginFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueuesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
  condition?: Maybe<ActionQueueCondition>;
  filter?: Maybe<ActionQueueFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActivityLogsOrderBy>>;
  condition?: Maybe<ActivityLogCondition>;
  filter?: Maybe<ActivityLogFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
  condition?: Maybe<ApplicationCondition>;
  filter?: Maybe<ApplicationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListShapesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationListShapesOrderBy>>;
  condition?: Maybe<ApplicationListShapeCondition>;
  filter?: Maybe<ApplicationListShapeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNotesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
  condition?: Maybe<ApplicationNoteCondition>;
  filter?: Maybe<ApplicationNoteFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
  condition?: Maybe<ApplicationResponseCondition>;
  filter?: Maybe<ApplicationResponseFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
  condition?: Maybe<ApplicationStageHistoryCondition>;
  filter?: Maybe<ApplicationStageHistoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageStatusAllsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStageStatusAllsOrderBy>>;
  condition?: Maybe<ApplicationStageStatusAllCondition>;
  filter?: Maybe<ApplicationStageStatusAllFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageStatusLatestsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStageStatusLatestsOrderBy>>;
  condition?: Maybe<ApplicationStageStatusLatestCondition>;
  filter?: Maybe<ApplicationStageStatusLatestFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStatusHistoriesOrderBy>>;
  condition?: Maybe<ApplicationStatusHistoryCondition>;
  filter?: Maybe<ApplicationStatusHistoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryConstraintsInfosArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ConstraintsInfosOrderBy>>;
  condition?: Maybe<ConstraintsInfoCondition>;
  filter?: Maybe<ConstraintsInfoFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCountersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<CountersOrderBy>>;
  condition?: Maybe<CounterCondition>;
  filter?: Maybe<CounterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTablesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTablesOrderBy>>;
  condition?: Maybe<DataTableCondition>;
  filter?: Maybe<DataTableFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableManufacturingStepsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableManufacturingStepsOrderBy>>;
  condition?: Maybe<DataTableManufacturingStepCondition>;
  filter?: Maybe<DataTableManufacturingStepFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableActiveIngredientsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableActiveIngredientsOrderBy>>;
  condition?: Maybe<DataTableActiveIngredientCondition>;
  filter?: Maybe<DataTableActiveIngredientFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAdministrationRoutesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableAdministrationRoutesOrderBy>>;
  condition?: Maybe<DataTableAdministrationRouteCondition>;
  filter?: Maybe<DataTableAdministrationRouteFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnexesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableAnnexesOrderBy>>;
  condition?: Maybe<DataTableAnnexCondition>;
  filter?: Maybe<DataTableAnnexFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnex2sArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableAnnex2sOrderBy>>;
  condition?: Maybe<DataTableAnnex2Condition>;
  filter?: Maybe<DataTableAnnex2Filter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcCodesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableAtcCodesOrderBy>>;
  condition?: Maybe<DataTableAtcCodeCondition>;
  filter?: Maybe<DataTableAtcCodeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcTherapeuticCategoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableAtcTherapeuticCategoriesOrderBy>>;
  condition?: Maybe<DataTableAtcTherapeuticCategoryCondition>;
  filter?: Maybe<DataTableAtcTherapeuticCategoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableContainersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableContainersOrderBy>>;
  condition?: Maybe<DataTableContainerCondition>;
  filter?: Maybe<DataTableContainerFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableCountriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableCountriesOrderBy>>;
  condition?: Maybe<DataTableCountryCondition>;
  filter?: Maybe<DataTableCountryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableDosageFormsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableDosageFormsOrderBy>>;
  condition?: Maybe<DataTableDosageFormCondition>;
  filter?: Maybe<DataTableDosageFormFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableGenericIngredientsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableGenericIngredientsOrderBy>>;
  condition?: Maybe<DataTableGenericIngredientCondition>;
  filter?: Maybe<DataTableGenericIngredientFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableIngredientsListsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableIngredientsListsOrderBy>>;
  condition?: Maybe<DataTableIngredientsListCondition>;
  filter?: Maybe<DataTableIngredientsListFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableListOfSrasArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableListOfSrasOrderBy>>;
  condition?: Maybe<DataTableListOfSraCondition>;
  filter?: Maybe<DataTableListOfSraFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProcessingStepsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProcessingStepsOrderBy>>;
  condition?: Maybe<DataTableProcessingStepCondition>;
  filter?: Maybe<DataTableProcessingStepFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProductsOrderBy>>;
  condition?: Maybe<DataTableProductCondition>;
  filter?: Maybe<DataTableProductFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
  condition?: Maybe<DataTableProductApplicationJoinCondition>;
  filter?: Maybe<DataTableProductApplicationJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProvincesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProvincesOrderBy>>;
  condition?: Maybe<DataTableProvinceCondition>;
  filter?: Maybe<DataTableProvinceFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableStorageConditionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableStorageConditionsOrderBy>>;
  condition?: Maybe<DataTableStorageConditionCondition>;
  filter?: Maybe<DataTableStorageConditionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableUnitsOfProportionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableUnitsOfProportionsOrderBy>>;
  condition?: Maybe<DataTableUnitsOfProportionCondition>;
  filter?: Maybe<DataTableUnitsOfProportionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataViewsOrderBy>>;
  condition?: Maybe<DataViewCondition>;
  filter?: Maybe<DataViewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataViewColumnDefinitionsOrderBy>>;
  condition?: Maybe<DataViewColumnDefinitionCondition>;
  filter?: Maybe<DataViewColumnDefinitionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ElementTypePluginsOrderBy>>;
  condition?: Maybe<ElementTypePluginCondition>;
  filter?: Maybe<ElementTypePluginFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFiltersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FiltersOrderBy>>;
  condition?: Maybe<FilterCondition>;
  filter?: Maybe<FilterFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
  condition?: Maybe<NotificationCondition>;
  filter?: Maybe<NotificationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganisationsOrderBy>>;
  condition?: Maybe<OrganisationCondition>;
  filter?: Maybe<OrganisationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<OrganisationApplicationJoinCondition>;
  filter?: Maybe<OrganisationApplicationJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
  condition?: Maybe<PermissionJoinCondition>;
  filter?: Maybe<PermissionJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNamesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionNamesOrderBy>>;
  condition?: Maybe<PermissionNameCondition>;
  filter?: Maybe<PermissionNameFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPoliciesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionPoliciesOrderBy>>;
  condition?: Maybe<PermissionPolicyCondition>;
  filter?: Maybe<PermissionPolicyFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionsAllsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionsAllsOrderBy>>;
  condition?: Maybe<PermissionsAllCondition>;
  filter?: Maybe<PermissionsAllFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPostgresRowLevelsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PostgresRowLevelsOrderBy>>;
  condition?: Maybe<PostgresRowLevelCondition>;
  filter?: Maybe<PostgresRowLevelFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryProductApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ProductApplicationJoinsOrderBy>>;
  condition?: Maybe<ProductApplicationJoinCondition>;
  filter?: Maybe<ProductApplicationJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
  condition?: Maybe<ReviewCondition>;
  filter?: Maybe<ReviewFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
  condition?: Maybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewDecisionsOrderBy>>;
  condition?: Maybe<ReviewDecisionCondition>;
  filter?: Maybe<ReviewDecisionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewStatusHistoriesOrderBy>>;
  condition?: Maybe<ReviewStatusHistoryCondition>;
  filter?: Maybe<ReviewStatusHistoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySchemaColumnsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SchemaColumnsOrderBy>>;
  condition?: Maybe<SchemaColumnCondition>;
  filter?: Maybe<SchemaColumnFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfosArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<SystemInfosOrderBy>>;
  condition?: Maybe<SystemInfoCondition>;
  filter?: Maybe<SystemInfoFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplatesOrderBy>>;
  condition?: Maybe<TemplateCondition>;
  filter?: Maybe<TemplateFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateActionsOrderBy>>;
  condition?: Maybe<TemplateActionCondition>;
  filter?: Maybe<TemplateActionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateCategoriesOrderBy>>;
  condition?: Maybe<TemplateCategoryCondition>;
  filter?: Maybe<TemplateCategoryFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateElementsOrderBy>>;
  condition?: Maybe<TemplateElementCondition>;
  filter?: Maybe<TemplateElementFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
  condition?: Maybe<TemplateFilterJoinCondition>;
  filter?: Maybe<TemplateFilterJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
  condition?: Maybe<TemplatePermissionCondition>;
  filter?: Maybe<TemplatePermissionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateSectionsOrderBy>>;
  condition?: Maybe<TemplateSectionCondition>;
  filter?: Maybe<TemplateSectionFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStagesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateStagesOrderBy>>;
  condition?: Maybe<TemplateStageCondition>;
  filter?: Maybe<TemplateStageFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateStageReviewLevelsOrderBy>>;
  condition?: Maybe<TemplateStageReviewLevelCondition>;
  filter?: Maybe<TemplateStageReviewLevelFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueuesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TriggerQueuesOrderBy>>;
  condition?: Maybe<TriggerQueueCondition>;
  filter?: Maybe<TriggerQueueFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerSchedulesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
  condition?: Maybe<TriggerScheduleCondition>;
  filter?: Maybe<TriggerScheduleFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUsersArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UsersOrderBy>>;
  condition?: Maybe<UserCondition>;
  filter?: Maybe<UserFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
  condition?: Maybe<UserApplicationJoinCondition>;
  filter?: Maybe<UserApplicationJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrgJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrgJoinsOrderBy>>;
  condition?: Maybe<UserOrgJoinCondition>;
  filter?: Maybe<UserOrgJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
  condition?: Maybe<UserOrganisationCondition>;
  filter?: Maybe<UserOrganisationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<UserOrganisationApplicationJoinCondition>;
  filter?: Maybe<UserOrganisationApplicationJoinFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<VerificationsOrderBy>>;
  condition?: Maybe<VerificationCondition>;
  filter?: Maybe<VerificationFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginByCodeArgs = {
  code: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueueArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationBySerialArgs = {
  serial: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNoteArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponseArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterByNameArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableByTableNameArgs = {
  tableName: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableManufacturingStepArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableActiveIngredientArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAdministrationRouteArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnexArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnex2Args = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcCodeArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcTherapeuticCategoryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableContainerArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableCountryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableDosageFormArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableGenericIngredientArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableIngredientsListArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableListOfSraArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProcessingStepArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductApplicationJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProvinceArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableStorageConditionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableUnitsOfProportionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  tableName: Scalars['String'];
  columnName: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginArgs = {
  code: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileByUniqueIdArgs = {
  uniqueId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterByCodeArgs = {
  code: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByNameArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByRegistrationArgs = {
  registration: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationApplicationJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameByNameArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyByNameArgs = {
  name: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProductApplicationJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponseArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfoArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryByCodeArgs = {
  code: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionByTemplateIdAndCodeArgs = {
  templateId: Scalars['Int'];
  code: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueueArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerScheduleArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByUsernameArgs = {
  username: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserApplicationJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationByUserIdAndOrganisationIdArgs = {
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationApplicationJoinArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationArgs = {
  id: Scalars['Int'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationByUniqueIdArgs = {
  uniqueId: Scalars['String'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListArgs = {
  userid?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationListShapesOrderBy>>;
  filter?: Maybe<ApplicationListShapeFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterApplicantArgs = {
  applicant?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StringFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterAssignerArgs = {
  assigner?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StringFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterOrganisationArgs = {
  organisation?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StringFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterReviewerArgs = {
  reviewer?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StringFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterStageArgs = {
  templateCode?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<StringFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoryApplicationIdArgs = {
  applicationStageHistoryId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignableQuestionsCountArgs = {
  appId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignedQuestionsArgs = {
  appId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<AssignedQuestionsRecordFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignedQuestionsCountArgs = {
  appId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignerListArgs = {
  stageId?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<AssignerListRecordFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignmentListArgs = {
  stageid?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<AssignmentListRecordFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetTemplateCodeArgs = {
  sectionId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryGetTemplateVersionArgs = {
  sectionId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetBigintArgs = {
  jwtKey?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetBooleanArgs = {
  jwtKey?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetTextArgs = {
  jwtKey?: Maybe<Scalars['String']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewApplicationIdArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentTemplateIdArgs = {
  applicationId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewIsFinalDecisionArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewIsLastLevelArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewIsLastStageArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewLevelArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewReviewerIdArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStageArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewTimeStageCreatedArgs = {
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewableQuestionsArgs = {
  appId?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  filter?: Maybe<ReviewableQuestionsRecordFilter>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewableQuestionsCountArgs = {
  appId?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubmittedAssignedQuestionsCountArgs = {
  appId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueueByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNoteByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponseByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableManufacturingStepByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableActiveIngredientByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAdministrationRouteByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnexByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAnnex2ByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcCodeByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableAtcTherapeuticCategoryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableContainerByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableCountryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableDosageFormByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableGenericIngredientByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableIngredientsListByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableListOfSraByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProcessingStepByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProductApplicationJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableProvinceByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableStorageConditionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableUnitsOfProportionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationApplicationJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProductApplicationJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponseByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfoByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueueByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerScheduleByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserApplicationJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationApplicationJoinByNodeIdArgs = {
  nodeId: Scalars['ID'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationByNodeIdArgs = {
  nodeId: Scalars['ID'];
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
};


/** Methods to use when ordering `ActionPlugin`. */
export enum ActionPluginsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  PathAsc = 'PATH_ASC',
  PathDesc = 'PATH_DESC',
  RequiredParametersAsc = 'REQUIRED_PARAMETERS_ASC',
  RequiredParametersDesc = 'REQUIRED_PARAMETERS_DESC',
  OptionalParametersAsc = 'OPTIONAL_PARAMETERS_ASC',
  OptionalParametersDesc = 'OPTIONAL_PARAMETERS_DESC',
  OutputPropertiesAsc = 'OUTPUT_PROPERTIES_ASC',
  OutputPropertiesDesc = 'OUTPUT_PROPERTIES_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ActionPlugin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ActionPluginCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `path` field. */
  path?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requiredParameters` field. */
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `optionalParameters` field. */
  optionalParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `outputProperties` field. */
  outputProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `ActionPlugin` object types. All fields are combined with a logical ‘and.’ */
export type ActionPluginFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `path` field. */
  path?: Maybe<StringFilter>;
  /** Filter by the object’s `requiredParameters` field. */
  requiredParameters?: Maybe<StringListFilter>;
  /** Filter by the object’s `optionalParameters` field. */
  optionalParameters?: Maybe<StringListFilter>;
  /** Filter by the object’s `outputProperties` field. */
  outputProperties?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ActionPluginFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ActionPluginFilter>>;
  /** Negates the expression. */
  not?: Maybe<ActionPluginFilter>;
};

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Int']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Int']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Int']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Int']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Int']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Int']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Int']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Int']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Int']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Int']>;
};

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['String']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['String']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['String']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['String']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['String']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['String']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['String']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['String']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['String']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['String']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['String']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['String']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['String']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['String']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['String']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['String']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['String']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: Maybe<Scalars['String']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: Maybe<Scalars['String']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: Maybe<Scalars['String']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: Maybe<Scalars['String']>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: Maybe<Array<Scalars['String']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: Maybe<Array<Scalars['String']>>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: Maybe<Scalars['String']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: Maybe<Scalars['String']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: Maybe<Scalars['String']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: Maybe<Scalars['String']>;
};

/** A filter to be used against String List fields. All fields are combined with a logical ‘and.’ */
export type StringListFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Contains the specified list of values. */
  contains?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Contained by the specified list of values. */
  containedBy?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Any array item is equal to the specified value. */
  anyEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: Maybe<Scalars['String']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: Maybe<Scalars['String']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: Maybe<Scalars['String']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: Maybe<Scalars['String']>;
};

/** A connection to a list of `ActionPlugin` values. */
export type ActionPluginsConnection = {
  __typename?: 'ActionPluginsConnection';
  /** A list of `ActionPlugin` objects. */
  nodes: Array<Maybe<ActionPlugin>>;
  /** A list of edges which contains the `ActionPlugin` and cursor to aid in pagination. */
  edges: Array<ActionPluginsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActionPlugin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ActionPlugin = Node & {
  __typename?: 'ActionPlugin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionalParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  outputProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A `ActionPlugin` edge in the connection. */
export type ActionPluginsEdge = {
  __typename?: 'ActionPluginsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ActionPlugin` at the end of the edge. */
  node?: Maybe<ActionPlugin>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']>;
};

/** Methods to use when ordering `ActionQueue`. */
export enum ActionQueuesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TriggerEventAsc = 'TRIGGER_EVENT_ASC',
  TriggerEventDesc = 'TRIGGER_EVENT_DESC',
  TriggerPayloadAsc = 'TRIGGER_PAYLOAD_ASC',
  TriggerPayloadDesc = 'TRIGGER_PAYLOAD_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  SequenceAsc = 'SEQUENCE_ASC',
  SequenceDesc = 'SEQUENCE_DESC',
  ActionCodeAsc = 'ACTION_CODE_ASC',
  ActionCodeDesc = 'ACTION_CODE_DESC',
  ConditionExpressionAsc = 'CONDITION_EXPRESSION_ASC',
  ConditionExpressionDesc = 'CONDITION_EXPRESSION_DESC',
  ParameterQueriesAsc = 'PARAMETER_QUERIES_ASC',
  ParameterQueriesDesc = 'PARAMETER_QUERIES_DESC',
  ParametersEvaluatedAsc = 'PARAMETERS_EVALUATED_ASC',
  ParametersEvaluatedDesc = 'PARAMETERS_EVALUATED_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  OutputAsc = 'OUTPUT_ASC',
  OutputDesc = 'OUTPUT_DESC',
  TimeQueuedAsc = 'TIME_QUEUED_ASC',
  TimeQueuedDesc = 'TIME_QUEUED_DESC',
  TimeCompletedAsc = 'TIME_COMPLETED_ASC',
  TimeCompletedDesc = 'TIME_COMPLETED_DESC',
  ErrorLogAsc = 'ERROR_LOG_ASC',
  ErrorLogDesc = 'ERROR_LOG_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ActionQueue` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ActionQueueCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `triggerEvent` field. */
  triggerEvent?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `triggerPayload` field. */
  triggerPayload?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sequence` field. */
  sequence?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `actionCode` field. */
  actionCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `conditionExpression` field. */
  conditionExpression?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `parameterQueries` field. */
  parameterQueries?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `parametersEvaluated` field. */
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ActionQueueStatus>;
  /** Checks for equality with the object’s `output` field. */
  output?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `timeQueued` field. */
  timeQueued?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeCompleted` field. */
  timeCompleted?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `errorLog` field. */
  errorLog?: Maybe<Scalars['String']>;
};


export enum ActionQueueStatus {
  Queued = 'QUEUED',
  Processing = 'PROCESSING',
  Success = 'SUCCESS',
  Fail = 'FAIL',
  ConditionNotMet = 'CONDITION_NOT_MET'
}


/** A filter to be used against `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type ActionQueueFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `triggerEvent` field. */
  triggerEvent?: Maybe<IntFilter>;
  /** Filter by the object’s `triggerPayload` field. */
  triggerPayload?: Maybe<JsonFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `sequence` field. */
  sequence?: Maybe<IntFilter>;
  /** Filter by the object’s `actionCode` field. */
  actionCode?: Maybe<StringFilter>;
  /** Filter by the object’s `conditionExpression` field. */
  conditionExpression?: Maybe<JsonFilter>;
  /** Filter by the object’s `parameterQueries` field. */
  parameterQueries?: Maybe<JsonFilter>;
  /** Filter by the object’s `parametersEvaluated` field. */
  parametersEvaluated?: Maybe<JsonFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ActionQueueStatusFilter>;
  /** Filter by the object’s `output` field. */
  output?: Maybe<JsonFilter>;
  /** Filter by the object’s `timeQueued` field. */
  timeQueued?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeCompleted` field. */
  timeCompleted?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `errorLog` field. */
  errorLog?: Maybe<StringFilter>;
  /** Filter by the object’s `triggerQueueByTriggerEvent` relation. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueueFilter>;
  /** A related `triggerQueueByTriggerEvent` exists. */
  triggerQueueByTriggerEventExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ActionQueueFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ActionQueueFilter>>;
  /** Negates the expression. */
  not?: Maybe<ActionQueueFilter>;
};

/** A filter to be used against JSON fields. All fields are combined with a logical ‘and.’ */
export type JsonFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['JSON']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['JSON']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['JSON']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['JSON']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['JSON']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['JSON']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['JSON']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['JSON']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['JSON']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['JSON']>;
  /** Contains the specified JSON. */
  contains?: Maybe<Scalars['JSON']>;
  /** Contains the specified key. */
  containsKey?: Maybe<Scalars['String']>;
  /** Contains all of the specified keys. */
  containsAllKeys?: Maybe<Array<Scalars['String']>>;
  /** Contains any of the specified keys. */
  containsAnyKeys?: Maybe<Array<Scalars['String']>>;
  /** Contained by the specified JSON. */
  containedBy?: Maybe<Scalars['JSON']>;
};

/** A filter to be used against ActionQueueStatus fields. All fields are combined with a logical ‘and.’ */
export type ActionQueueStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ActionQueueStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ActionQueueStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ActionQueueStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ActionQueueStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ActionQueueStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ActionQueueStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ActionQueueStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ActionQueueStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ActionQueueStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ActionQueueStatus>;
};

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Datetime']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Datetime']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Datetime']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Datetime']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Datetime']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Datetime']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Datetime']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Datetime']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Datetime']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `TriggerQueue` object types. All fields are combined with a logical ‘and.’ */
export type TriggerQueueFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `triggerType` field. */
  triggerType?: Maybe<TriggerFilter>;
  /** Filter by the object’s `table` field. */
  table?: Maybe<StringFilter>;
  /** Filter by the object’s `recordId` field. */
  recordId?: Maybe<IntFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: Maybe<StringFilter>;
  /** Filter by the object’s `data` field. */
  data?: Maybe<JsonFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<TriggerQueueStatusFilter>;
  /** Filter by the object’s `log` field. */
  log?: Maybe<JsonFilter>;
  /** Filter by the object’s `actionQueuesByTriggerEvent` relation. */
  actionQueuesByTriggerEvent?: Maybe<TriggerQueueToManyActionQueueFilter>;
  /** Some related `actionQueuesByTriggerEvent` exist. */
  actionQueuesByTriggerEventExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TriggerQueueFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TriggerQueueFilter>>;
  /** Negates the expression. */
  not?: Maybe<TriggerQueueFilter>;
};

/** A filter to be used against Trigger fields. All fields are combined with a logical ‘and.’ */
export type TriggerFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Trigger>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Trigger>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Trigger>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Trigger>;
  /** Included in the specified list. */
  in?: Maybe<Array<Trigger>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Trigger>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Trigger>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Trigger>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Trigger>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Trigger>;
};

export enum Trigger {
  OnApplicationCreate = 'ON_APPLICATION_CREATE',
  OnApplicationRestart = 'ON_APPLICATION_RESTART',
  OnApplicationSubmit = 'ON_APPLICATION_SUBMIT',
  OnApplicationSave = 'ON_APPLICATION_SAVE',
  OnApplicationWithdraw = 'ON_APPLICATION_WITHDRAW',
  OnReviewCreate = 'ON_REVIEW_CREATE',
  OnReviewSubmit = 'ON_REVIEW_SUBMIT',
  OnReviewRestart = 'ON_REVIEW_RESTART',
  OnReviewAssign = 'ON_REVIEW_ASSIGN',
  OnReviewUnassign = 'ON_REVIEW_UNASSIGN',
  OnApprovalSubmit = 'ON_APPROVAL_SUBMIT',
  OnVerification = 'ON_VERIFICATION',
  OnSchedule = 'ON_SCHEDULE',
  OnPreview = 'ON_PREVIEW',
  OnExtend = 'ON_EXTEND',
  DevTest = 'DEV_TEST',
  Processing = 'PROCESSING',
  Error = 'ERROR'
}

/** A filter to be used against TriggerQueueStatus fields. All fields are combined with a logical ‘and.’ */
export type TriggerQueueStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<TriggerQueueStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<TriggerQueueStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<TriggerQueueStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<TriggerQueueStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<TriggerQueueStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<TriggerQueueStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<TriggerQueueStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<TriggerQueueStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<TriggerQueueStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<TriggerQueueStatus>;
};

export enum TriggerQueueStatus {
  Triggered = 'TRIGGERED',
  ActionsDispatched = 'ACTIONS_DISPATCHED',
  Error = 'ERROR',
  Completed = 'COMPLETED'
}

/** A filter to be used against many `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type TriggerQueueToManyActionQueueFilter = {
  /** Every related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ActionQueueFilter>;
  /** Some related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ActionQueueFilter>;
  /** No related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ActionQueueFilter>;
};

/** A filter to be used against `Template` object types. All fields are combined with a logical ‘and.’ */
export type TemplateFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `namePlural` field. */
  namePlural?: Maybe<StringFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `isLinear` field. */
  isLinear?: Maybe<BooleanFilter>;
  /** Filter by the object’s `canApplicantMakeChanges` field. */
  canApplicantMakeChanges?: Maybe<BooleanFilter>;
  /** Filter by the object’s `startMessage` field. */
  startMessage?: Maybe<JsonFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<TemplateStatusFilter>;
  /** Filter by the object’s `submissionMessage` field. */
  submissionMessage?: Maybe<JsonFilter>;
  /** Filter by the object’s `icon` field. */
  icon?: Maybe<StringFilter>;
  /** Filter by the object’s `templateCategoryId` field. */
  templateCategoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `versionTimestamp` field. */
  versionTimestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `version` field. */
  version?: Maybe<IntFilter>;
  /** Filter by the object’s `applications` relation. */
  applications?: Maybe<TemplateToManyApplicationFilter>;
  /** Some related `applications` exist. */
  applicationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateActions` relation. */
  templateActions?: Maybe<TemplateToManyTemplateActionFilter>;
  /** Some related `templateActions` exist. */
  templateActionsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `actionQueues` relation. */
  actionQueues?: Maybe<TemplateToManyActionQueueFilter>;
  /** Some related `actionQueues` exist. */
  actionQueuesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateStages` relation. */
  templateStages?: Maybe<TemplateToManyTemplateStageFilter>;
  /** Some related `templateStages` exist. */
  templateStagesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `files` relation. */
  files?: Maybe<TemplateToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templatePermissions` relation. */
  templatePermissions?: Maybe<TemplateToManyTemplatePermissionFilter>;
  /** Some related `templatePermissions` exist. */
  templatePermissionsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: Maybe<TemplateToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateFilterJoins` relation. */
  templateFilterJoins?: Maybe<TemplateToManyTemplateFilterJoinFilter>;
  /** Some related `templateFilterJoins` exist. */
  templateFilterJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateSections` relation. */
  templateSections?: Maybe<TemplateToManyTemplateSectionFilter>;
  /** Some related `templateSections` exist. */
  templateSectionsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `triggerSchedules` relation. */
  triggerSchedules?: Maybe<TemplateToManyTriggerScheduleFilter>;
  /** Some related `triggerSchedules` exist. */
  triggerSchedulesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateCategory` relation. */
  templateCategory?: Maybe<TemplateCategoryFilter>;
  /** A related `templateCategory` exists. */
  templateCategoryExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateFilter>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Boolean']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Boolean']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Boolean']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Boolean']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Boolean']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Boolean']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Boolean']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Boolean']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against TemplateStatus fields. All fields are combined with a logical ‘and.’ */
export type TemplateStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<TemplateStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<TemplateStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<TemplateStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<TemplateStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<TemplateStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<TemplateStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<TemplateStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<TemplateStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<TemplateStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<TemplateStatus>;
};

export enum TemplateStatus {
  Draft = 'DRAFT',
  Available = 'AVAILABLE',
  Disabled = 'DISABLED'
}

/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationFilter>;
};

/** A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: Maybe<StringFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isConfig` field. */
  isConfig?: Maybe<BooleanFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: Maybe<StringFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationStatusFilter>;
  /** Filter by the object’s `reviews` relation. */
  reviews?: Maybe<ApplicationToManyReviewFilter>;
  /** Some related `reviews` exist. */
  reviewsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `activityLogs` relation. */
  activityLogs?: Maybe<ApplicationToManyActivityLogFilter>;
  /** Some related `activityLogs` exist. */
  activityLogsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationNotes` relation. */
  applicationNotes?: Maybe<ApplicationToManyApplicationNoteFilter>;
  /** Some related `applicationNotes` exist. */
  applicationNotesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationResponses` relation. */
  applicationResponses?: Maybe<ApplicationToManyApplicationResponseFilter>;
  /** Some related `applicationResponses` exist. */
  applicationResponsesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationStageHistories` relation. */
  applicationStageHistories?: Maybe<ApplicationToManyApplicationStageHistoryFilter>;
  /** Some related `applicationStageHistories` exist. */
  applicationStageHistoriesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `dataTableProductApplicationJoins` relation. */
  dataTableProductApplicationJoins?: Maybe<ApplicationToManyDataTableProductApplicationJoinFilter>;
  /** Some related `dataTableProductApplicationJoins` exist. */
  dataTableProductApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `filesByApplicationSerial` relation. */
  filesByApplicationSerial?: Maybe<ApplicationToManyFileFilter>;
  /** Some related `filesByApplicationSerial` exist. */
  filesByApplicationSerialExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `notifications` relation. */
  notifications?: Maybe<ApplicationToManyNotificationFilter>;
  /** Some related `notifications` exist. */
  notificationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `organisationApplicationJoins` relation. */
  organisationApplicationJoins?: Maybe<ApplicationToManyOrganisationApplicationJoinFilter>;
  /** Some related `organisationApplicationJoins` exist. */
  organisationApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `productApplicationJoins` relation. */
  productApplicationJoins?: Maybe<ApplicationToManyProductApplicationJoinFilter>;
  /** Some related `productApplicationJoins` exist. */
  productApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: Maybe<ApplicationToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `triggerSchedules` relation. */
  triggerSchedules?: Maybe<ApplicationToManyTriggerScheduleFilter>;
  /** Some related `triggerSchedules` exist. */
  triggerSchedulesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `userApplicationJoins` relation. */
  userApplicationJoins?: Maybe<ApplicationToManyUserApplicationJoinFilter>;
  /** Some related `userApplicationJoins` exist. */
  userApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `userOrganisationApplicationJoins` relation. */
  userOrganisationApplicationJoins?: Maybe<ApplicationToManyUserOrganisationApplicationJoinFilter>;
  /** Some related `userOrganisationApplicationJoins` exist. */
  userOrganisationApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `verifications` relation. */
  verifications?: Maybe<ApplicationToManyVerificationFilter>;
  /** Some related `verifications` exist. */
  verificationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** A related `user` exists. */
  userExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `org` relation. */
  org?: Maybe<OrganisationFilter>;
  /** A related `org` exists. */
  orgExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationFilter>;
};

/** A filter to be used against ApplicationOutcome fields. All fields are combined with a logical ‘and.’ */
export type ApplicationOutcomeFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ApplicationOutcome>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ApplicationOutcome>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ApplicationOutcome>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ApplicationOutcome>;
  /** Included in the specified list. */
  in?: Maybe<Array<ApplicationOutcome>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ApplicationOutcome>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ApplicationOutcome>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ApplicationOutcome>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ApplicationOutcome>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ApplicationOutcome>;
};

export enum ApplicationOutcome {
  Pending = 'PENDING',
  Approved = 'APPROVED',
  Rejected = 'REJECTED',
  Expired = 'EXPIRED',
  Withdrawn = 'WITHDRAWN'
}

/** A filter to be used against ApplicationStatus fields. All fields are combined with a logical ‘and.’ */
export type ApplicationStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ApplicationStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ApplicationStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ApplicationStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ApplicationStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ApplicationStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ApplicationStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ApplicationStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ApplicationStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ApplicationStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ApplicationStatus>;
};

export enum ApplicationStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED',
  ChangesRequired = 'CHANGES_REQUIRED',
  ReSubmitted = 'RE_SUBMITTED',
  Completed = 'COMPLETED'
}

/** A filter to be used against many `Review` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyReviewFilter = {
  /** Every related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewFilter>;
  /** Some related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewFilter>;
  /** No related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewFilter>;
};

/** A filter to be used against `Review` object types. All fields are combined with a logical ‘and.’ */
export type ReviewFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: Maybe<IntFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewerId` field. */
  reviewerId?: Maybe<IntFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `timeStageCreated` field. */
  timeStageCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isLastLevel` field. */
  isLastLevel?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isLastStage` field. */
  isLastStage?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isFinalDecision` field. */
  isFinalDecision?: Maybe<BooleanFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ReviewStatusFilter>;
  /** Filter by the object’s `timeStatusCreated` field. */
  timeStatusCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `reviewDecisions` relation. */
  reviewDecisions?: Maybe<ReviewToManyReviewDecisionFilter>;
  /** Some related `reviewDecisions` exist. */
  reviewDecisionsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `notifications` relation. */
  notifications?: Maybe<ReviewToManyNotificationFilter>;
  /** Some related `notifications` exist. */
  notificationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: Maybe<ReviewToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewStatusHistories` relation. */
  reviewStatusHistories?: Maybe<ReviewToManyReviewStatusHistoryFilter>;
  /** Some related `reviewStatusHistories` exist. */
  reviewStatusHistoriesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignment` relation. */
  reviewAssignment?: Maybe<ReviewAssignmentFilter>;
  /** A related `reviewAssignment` exists. */
  reviewAssignmentExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewer` relation. */
  reviewer?: Maybe<UserFilter>;
  /** A related `reviewer` exists. */
  reviewerExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewFilter>;
};

/** A filter to be used against ReviewStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewStatus>;
};

export enum ReviewStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED',
  ChangesRequested = 'CHANGES_REQUESTED',
  Pending = 'PENDING',
  Locked = 'LOCKED',
  Discontinued = 'DISCONTINUED'
}

/** A filter to be used against many `ReviewDecision` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewDecisionFilter = {
  /** Every related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewDecisionFilter>;
  /** Some related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewDecisionFilter>;
  /** No related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewDecisionFilter>;
};

/** A filter to be used against `ReviewDecision` object types. All fields are combined with a logical ‘and.’ */
export type ReviewDecisionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: Maybe<IntFilter>;
  /** Filter by the object’s `decision` field. */
  decision?: Maybe<DecisionFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: Maybe<StringFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `review` relation. */
  review?: Maybe<ReviewFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewDecisionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewDecisionFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewDecisionFilter>;
};

/** A filter to be used against Decision fields. All fields are combined with a logical ‘and.’ */
export type DecisionFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Decision>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Decision>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Decision>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Decision>;
  /** Included in the specified list. */
  in?: Maybe<Array<Decision>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Decision>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Decision>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Decision>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Decision>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Decision>;
};

export enum Decision {
  ListOfQuestions = 'LIST_OF_QUESTIONS',
  Conform = 'CONFORM',
  NonConform = 'NON_CONFORM',
  ChangesRequested = 'CHANGES_REQUESTED',
  NoDecision = 'NO_DECISION'
}

/** A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyNotificationFilter = {
  /** Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<NotificationFilter>;
  /** Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<NotificationFilter>;
  /** No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<NotificationFilter>;
};

/** A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’ */
export type NotificationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: Maybe<IntFilter>;
  /** Filter by the object’s `emailRecipients` field. */
  emailRecipients?: Maybe<StringFilter>;
  /** Filter by the object’s `subject` field. */
  subject?: Maybe<StringFilter>;
  /** Filter by the object’s `message` field. */
  message?: Maybe<StringFilter>;
  /** Filter by the object’s `attachments` field. */
  attachments?: Maybe<StringListFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isRead` field. */
  isRead?: Maybe<BooleanFilter>;
  /** Filter by the object’s `emailSent` field. */
  emailSent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `emailServerLog` field. */
  emailServerLog?: Maybe<StringFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** A related `user` exists. */
  userExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `review` relation. */
  review?: Maybe<ReviewFilter>;
  /** A related `review` exists. */
  reviewExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<NotificationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<NotificationFilter>>;
  /** Negates the expression. */
  not?: Maybe<NotificationFilter>;
};

/** A filter to be used against `User` object types. All fields are combined with a logical ‘and.’ */
export type UserFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `fullName` field. */
  fullName?: Maybe<StringFilter>;
  /** Filter by the object’s `username` field. */
  username?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `dateOfBirth` field. */
  dateOfBirth?: Maybe<DateFilter>;
  /** Filter by the object’s `passwordHash` field. */
  passwordHash?: Maybe<StringFilter>;
  /** Filter by the object’s `phone` field. */
  phone?: Maybe<StringFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `province` field. */
  province?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationDate` field. */
  registrationDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `applications` relation. */
  applications?: Maybe<UserToManyApplicationFilter>;
  /** Some related `applications` exist. */
  applicationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewedReviews` relation. */
  reviewedReviews?: Maybe<UserToManyReviewFilter>;
  /** Some related `reviewedReviews` exist. */
  reviewedReviewsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationNotes` relation. */
  applicationNotes?: Maybe<UserToManyApplicationNoteFilter>;
  /** Some related `applicationNotes` exist. */
  applicationNotesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `files` relation. */
  files?: Maybe<UserToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `notifications` relation. */
  notifications?: Maybe<UserToManyNotificationFilter>;
  /** Some related `notifications` exist. */
  notificationsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `permissionJoins` relation. */
  permissionJoins?: Maybe<UserToManyPermissionJoinFilter>;
  /** Some related `permissionJoins` exist. */
  permissionJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignmentsByAssignerId` relation. */
  reviewAssignmentsByAssignerId?: Maybe<UserToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByAssignerId` exist. */
  reviewAssignmentsByAssignerIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewedReviewAssignments` relation. */
  reviewedReviewAssignments?: Maybe<UserToManyReviewAssignmentFilter>;
  /** Some related `reviewedReviewAssignments` exist. */
  reviewedReviewAssignmentsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignmentAssignerJoinsByAssignerId` relation. */
  reviewAssignmentAssignerJoinsByAssignerId?: Maybe<UserToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoinsByAssignerId` exist. */
  reviewAssignmentAssignerJoinsByAssignerIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `triggerSchedulesByEditorUserId` relation. */
  triggerSchedulesByEditorUserId?: Maybe<UserToManyTriggerScheduleFilter>;
  /** Some related `triggerSchedulesByEditorUserId` exist. */
  triggerSchedulesByEditorUserIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `userApplicationJoins` relation. */
  userApplicationJoins?: Maybe<UserToManyUserApplicationJoinFilter>;
  /** Some related `userApplicationJoins` exist. */
  userApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `userOrganisations` relation. */
  userOrganisations?: Maybe<UserToManyUserOrganisationFilter>;
  /** Some related `userOrganisations` exist. */
  userOrganisationsExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserFilter>;
};

/** A filter to be used against Date fields. All fields are combined with a logical ‘and.’ */
export type DateFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['Date']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['Date']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['Date']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['Date']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['Date']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['Date']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['Date']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['Date']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['Date']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['Date']>;
};


/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationFilter>;
};

/** A filter to be used against many `Review` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyReviewFilter = {
  /** Every related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewFilter>;
  /** Some related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewFilter>;
  /** No related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewFilter>;
};

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationNoteFilter>;
};

/** A filter to be used against `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationNoteFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: Maybe<StringFilter>;
  /** Filter by the object’s `files` relation. */
  files?: Maybe<ApplicationNoteToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** Filter by the object’s `org` relation. */
  org?: Maybe<OrganisationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationNoteFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationNoteFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationNoteToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<FileFilter>;
};

/** A filter to be used against `File` object types. All fields are combined with a logical ‘and.’ */
export type FileFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `uniqueId` field. */
  uniqueId?: Maybe<StringFilter>;
  /** Filter by the object’s `originalFilename` field. */
  originalFilename?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationSerial` field. */
  applicationSerial?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationResponseId` field. */
  applicationResponseId?: Maybe<IntFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationNoteId` field. */
  applicationNoteId?: Maybe<IntFilter>;
  /** Filter by the object’s `isOutputDoc` field. */
  isOutputDoc?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isInternalReferenceDoc` field. */
  isInternalReferenceDoc?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isExternalReferenceDoc` field. */
  isExternalReferenceDoc?: Maybe<BooleanFilter>;
  /** Filter by the object’s `toBeDeleted` field. */
  toBeDeleted?: Maybe<BooleanFilter>;
  /** Filter by the object’s `filePath` field. */
  filePath?: Maybe<StringFilter>;
  /** Filter by the object’s `thumbnailPath` field. */
  thumbnailPath?: Maybe<StringFilter>;
  /** Filter by the object’s `mimetype` field. */
  mimetype?: Maybe<StringFilter>;
  /** Filter by the object’s `submitted` field. */
  submitted?: Maybe<BooleanFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** A related `user` exists. */
  userExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationByApplicationSerial` relation. */
  applicationByApplicationSerial?: Maybe<ApplicationFilter>;
  /** A related `applicationByApplicationSerial` exists. */
  applicationByApplicationSerialExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationResponse` relation. */
  applicationResponse?: Maybe<ApplicationResponseFilter>;
  /** A related `applicationResponse` exists. */
  applicationResponseExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationNote` relation. */
  applicationNote?: Maybe<ApplicationNoteFilter>;
  /** A related `applicationNote` exists. */
  applicationNoteExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FileFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FileFilter>>;
  /** Negates the expression. */
  not?: Maybe<FileFilter>;
};

/** A filter to be used against `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `templateElementId` field. */
  templateElementId?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationResponseStatusFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<JsonFilter>;
  /** Filter by the object’s `isValid` field. */
  isValid?: Maybe<BooleanFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeSubmitted` field. */
  timeSubmitted?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `evaluatedParameters` field. */
  evaluatedParameters?: Maybe<JsonFilter>;
  /** Filter by the object’s `files` relation. */
  files?: Maybe<ApplicationResponseToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: Maybe<ApplicationResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateElement` relation. */
  templateElement?: Maybe<TemplateElementFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationResponseFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationResponseFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationResponseFilter>;
};

/** A filter to be used against ApplicationResponseStatus fields. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ApplicationResponseStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ApplicationResponseStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ApplicationResponseStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ApplicationResponseStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ApplicationResponseStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ApplicationResponseStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ApplicationResponseStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ApplicationResponseStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ApplicationResponseStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ApplicationResponseStatus>;
};

export enum ApplicationResponseStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<FileFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewResponseFilter>;
};

/** A filter to be used against `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewResponseFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: Maybe<StringFilter>;
  /** Filter by the object’s `decision` field. */
  decision?: Maybe<ReviewResponseDecisionFilter>;
  /** Filter by the object’s `applicationResponseId` field. */
  applicationResponseId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewResponseLinkId` field. */
  reviewResponseLinkId?: Maybe<IntFilter>;
  /** Filter by the object’s `originalReviewResponseId` field. */
  originalReviewResponseId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeSubmitted` field. */
  timeSubmitted?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isVisibleToApplicant` field. */
  isVisibleToApplicant?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isLatestReview` field. */
  isLatestReview?: Maybe<BooleanFilter>;
  /** Filter by the object’s `templateElementId` field. */
  templateElementId?: Maybe<IntFilter>;
  /** Filter by the object’s `recommendedApplicantVisibility` field. */
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibilityFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ReviewResponseStatusFilter>;
  /** Filter by the object’s `reviewResponsesByReviewResponseLinkId` relation. */
  reviewResponsesByReviewResponseLinkId?: Maybe<ReviewResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponsesByReviewResponseLinkId` exist. */
  reviewResponsesByReviewResponseLinkIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewResponsesByOriginalReviewResponseId` relation. */
  reviewResponsesByOriginalReviewResponseId?: Maybe<ReviewResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponsesByOriginalReviewResponseId` exist. */
  reviewResponsesByOriginalReviewResponseIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationResponse` relation. */
  applicationResponse?: Maybe<ApplicationResponseFilter>;
  /** A related `applicationResponse` exists. */
  applicationResponseExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewResponseLink` relation. */
  reviewResponseLink?: Maybe<ReviewResponseFilter>;
  /** A related `reviewResponseLink` exists. */
  reviewResponseLinkExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `originalReviewResponse` relation. */
  originalReviewResponse?: Maybe<ReviewResponseFilter>;
  /** A related `originalReviewResponse` exists. */
  originalReviewResponseExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `review` relation. */
  review?: Maybe<ReviewFilter>;
  /** A related `review` exists. */
  reviewExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateElement` relation. */
  templateElement?: Maybe<TemplateElementFilter>;
  /** A related `templateElement` exists. */
  templateElementExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewResponseFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewResponseFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewResponseFilter>;
};

/** A filter to be used against ReviewResponseDecision fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseDecisionFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewResponseDecision>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewResponseDecision>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewResponseDecision>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewResponseDecision>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewResponseDecision>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewResponseDecision>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewResponseDecision>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewResponseDecision>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewResponseDecision>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewResponseDecision>;
};

export enum ReviewResponseDecision {
  Approve = 'APPROVE',
  Decline = 'DECLINE',
  Agree = 'AGREE',
  Disagree = 'DISAGREE'
}

/** A filter to be used against ReviewResponseRecommendedApplicantVisibility fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseRecommendedApplicantVisibilityFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewResponseRecommendedApplicantVisibility>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewResponseRecommendedApplicantVisibility>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
};

export enum ReviewResponseRecommendedApplicantVisibility {
  OriginalResponseVisibleToApplicant = 'ORIGINAL_RESPONSE_VISIBLE_TO_APPLICANT',
  OriginalResponseNotVisibleToApplicant = 'ORIGINAL_RESPONSE_NOT_VISIBLE_TO_APPLICANT'
}

/** A filter to be used against ReviewResponseStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewResponseStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewResponseStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewResponseStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewResponseStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewResponseStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewResponseStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewResponseStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewResponseStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewResponseStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewResponseStatus>;
};

export enum ReviewResponseStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewResponseToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewResponseFilter>;
};

/** A filter to be used against `TemplateElement` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `sectionId` field. */
  sectionId?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `index` field. */
  index?: Maybe<IntFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<TemplateElementCategoryFilter>;
  /** Filter by the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: Maybe<StringFilter>;
  /** Filter by the object’s `visibilityCondition` field. */
  visibilityCondition?: Maybe<JsonFilter>;
  /** Filter by the object’s `isRequired` field. */
  isRequired?: Maybe<JsonFilter>;
  /** Filter by the object’s `isEditable` field. */
  isEditable?: Maybe<JsonFilter>;
  /** Filter by the object’s `validation` field. */
  validation?: Maybe<JsonFilter>;
  /** Filter by the object’s `defaultValue` field. */
  defaultValue?: Maybe<JsonFilter>;
  /** Filter by the object’s `validationMessage` field. */
  validationMessage?: Maybe<StringFilter>;
  /** Filter by the object’s `helpText` field. */
  helpText?: Maybe<StringFilter>;
  /** Filter by the object’s `parameters` field. */
  parameters?: Maybe<JsonFilter>;
  /** Filter by the object’s `reviewability` field. */
  reviewability?: Maybe<ReviewabilityFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: Maybe<StringFilter>;
  /** Filter by the object’s `templateVersion` field. */
  templateVersion?: Maybe<IntFilter>;
  /** Filter by the object’s `parametersString` field. */
  parametersString?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationResponses` relation. */
  applicationResponses?: Maybe<TemplateElementToManyApplicationResponseFilter>;
  /** Some related `applicationResponses` exist. */
  applicationResponsesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: Maybe<TemplateElementToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `section` relation. */
  section?: Maybe<TemplateSectionFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateElementFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateElementFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateElementFilter>;
};

/** A filter to be used against TemplateElementCategory fields. All fields are combined with a logical ‘and.’ */
export type TemplateElementCategoryFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<TemplateElementCategory>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<TemplateElementCategory>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<TemplateElementCategory>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<TemplateElementCategory>;
  /** Included in the specified list. */
  in?: Maybe<Array<TemplateElementCategory>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<TemplateElementCategory>>;
  /** Less than the specified value. */
  lessThan?: Maybe<TemplateElementCategory>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<TemplateElementCategory>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<TemplateElementCategory>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<TemplateElementCategory>;
};

export enum TemplateElementCategory {
  Question = 'QUESTION',
  Information = 'INFORMATION'
}

/** A filter to be used against Reviewability fields. All fields are combined with a logical ‘and.’ */
export type ReviewabilityFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Reviewability>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Reviewability>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Reviewability>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Reviewability>;
  /** Included in the specified list. */
  in?: Maybe<Array<Reviewability>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Reviewability>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Reviewability>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Reviewability>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Reviewability>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Reviewability>;
};

export enum Reviewability {
  Always = 'ALWAYS',
  Never = 'NEVER',
  OnlyIfApplicantAnswer = 'ONLY_IF_APPLICANT_ANSWER',
  OptionalIfNoResponse = 'OPTIONAL_IF_NO_RESPONSE'
}

/** A filter to be used against many `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementToManyApplicationResponseFilter = {
  /** Every related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationResponseFilter>;
  /** Some related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationResponseFilter>;
  /** No related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationResponseFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewResponseFilter>;
};

/** A filter to be used against `TemplateSection` object types. All fields are combined with a logical ‘and.’ */
export type TemplateSectionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `index` field. */
  index?: Maybe<IntFilter>;
  /** Filter by the object’s `templateElementsBySectionId` relation. */
  templateElementsBySectionId?: Maybe<TemplateSectionToManyTemplateElementFilter>;
  /** Some related `templateElementsBySectionId` exist. */
  templateElementsBySectionIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateSectionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateSectionFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateSectionFilter>;
};

/** A filter to be used against many `TemplateElement` object types. All fields are combined with a logical ‘and.’ */
export type TemplateSectionToManyTemplateElementFilter = {
  /** Every related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateElementFilter>;
  /** Some related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateElementFilter>;
  /** No related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateElementFilter>;
};

/** A filter to be used against `Organisation` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `registration` field. */
  registration?: Maybe<StringFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `logoUrl` field. */
  logoUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `isSystemOrg` field. */
  isSystemOrg?: Maybe<BooleanFilter>;
  /** Filter by the object’s `registrationDocumentation` field. */
  registrationDocumentation?: Maybe<JsonFilter>;
  /** Filter by the object’s `agent` field. */
  agent?: Maybe<JsonFilter>;
  /** Filter by the object’s `contact` field. */
  contact?: Maybe<JsonFilter>;
  /** Filter by the object’s `authorisation` field. */
  authorisation?: Maybe<JsonFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `province` field. */
  province?: Maybe<StringFilter>;
  /** Filter by the object’s `postalAddress` field. */
  postalAddress?: Maybe<StringFilter>;
  /** Filter by the object’s `postalCountry` field. */
  postalCountry?: Maybe<StringFilter>;
  /** Filter by the object’s `postalProvince` field. */
  postalProvince?: Maybe<StringFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<JsonFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Filter by the object’s `registrationDate` field. */
  registrationDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `agentId` field. */
  agentId?: Maybe<IntFilter>;
  /** Filter by the object’s `typeFilterData` field. */
  typeFilterData?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationsByOrgId` relation. */
  applicationsByOrgId?: Maybe<OrganisationToManyApplicationFilter>;
  /** Some related `applicationsByOrgId` exist. */
  applicationsByOrgIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `applicationNotesByOrgId` relation. */
  applicationNotesByOrgId?: Maybe<OrganisationToManyApplicationNoteFilter>;
  /** Some related `applicationNotesByOrgId` exist. */
  applicationNotesByOrgIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `organisationApplicationJoins` relation. */
  organisationApplicationJoins?: Maybe<OrganisationToManyOrganisationApplicationJoinFilter>;
  /** Some related `organisationApplicationJoins` exist. */
  organisationApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `permissionJoins` relation. */
  permissionJoins?: Maybe<OrganisationToManyPermissionJoinFilter>;
  /** Some related `permissionJoins` exist. */
  permissionJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: Maybe<OrganisationToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignmentAssignerJoins` relation. */
  reviewAssignmentAssignerJoins?: Maybe<OrganisationToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoins` exist. */
  reviewAssignmentAssignerJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `userOrganisations` relation. */
  userOrganisations?: Maybe<OrganisationToManyUserOrganisationFilter>;
  /** Some related `userOrganisations` exist. */
  userOrganisationsExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganisationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganisationFilter>>;
  /** Negates the expression. */
  not?: Maybe<OrganisationFilter>;
};

/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationFilter>;
};

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `OrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyOrganisationApplicationJoinFilter = {
  /** Every related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<OrganisationApplicationJoinFilter>;
  /** Some related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<OrganisationApplicationJoinFilter>;
  /** No related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<OrganisationApplicationJoinFilter>;
};

/** A filter to be used against `OrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationApplicationJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: Maybe<OrganisationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<OrganisationApplicationJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<OrganisationApplicationJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<OrganisationApplicationJoinFilter>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<PermissionJoinFilter>;
};

/** A filter to be used against `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type PermissionJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<IntFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** A related `user` exists. */
  userExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: Maybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `permissionName` relation. */
  permissionName?: Maybe<PermissionNameFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PermissionJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PermissionJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<PermissionJoinFilter>;
};

/** A filter to be used against `PermissionName` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `permissionPolicyId` field. */
  permissionPolicyId?: Maybe<IntFilter>;
  /** Filter by the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: Maybe<BooleanFilter>;
  /** Filter by the object’s `permissionJoins` relation. */
  permissionJoins?: Maybe<PermissionNameToManyPermissionJoinFilter>;
  /** Some related `permissionJoins` exist. */
  permissionJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templatePermissions` relation. */
  templatePermissions?: Maybe<PermissionNameToManyTemplatePermissionFilter>;
  /** Some related `templatePermissions` exist. */
  templatePermissionsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `permissionPolicy` relation. */
  permissionPolicy?: Maybe<PermissionPolicyFilter>;
  /** A related `permissionPolicy` exists. */
  permissionPolicyExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PermissionNameFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PermissionNameFilter>>;
  /** Negates the expression. */
  not?: Maybe<PermissionNameFilter>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<PermissionJoinFilter>;
};

/** A filter to be used against many `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameToManyTemplatePermissionFilter = {
  /** Every related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplatePermissionFilter>;
  /** Some related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplatePermissionFilter>;
  /** No related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplatePermissionFilter>;
};

/** A filter to be used against `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type TemplatePermissionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: Maybe<StringListFilter>;
  /** Filter by the object’s `canSelfAssign` field. */
  canSelfAssign?: Maybe<BooleanFilter>;
  /** Filter by the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: Maybe<BooleanFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `restrictions` field. */
  restrictions?: Maybe<JsonFilter>;
  /** Filter by the object’s `permissionName` relation. */
  permissionName?: Maybe<PermissionNameFilter>;
  /** A related `permissionName` exists. */
  permissionNameExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplatePermissionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplatePermissionFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplatePermissionFilter>;
};

/** A filter to be used against `PermissionPolicy` object types. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `rules` field. */
  rules?: Maybe<JsonFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<PermissionPolicyTypeFilter>;
  /** Filter by the object’s `isAdmin` field. */
  isAdmin?: Maybe<BooleanFilter>;
  /** Filter by the object’s `defaultRestrictions` field. */
  defaultRestrictions?: Maybe<JsonFilter>;
  /** Filter by the object’s `permissionNames` relation. */
  permissionNames?: Maybe<PermissionPolicyToManyPermissionNameFilter>;
  /** Some related `permissionNames` exist. */
  permissionNamesExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PermissionPolicyFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PermissionPolicyFilter>>;
  /** Negates the expression. */
  not?: Maybe<PermissionPolicyFilter>;
};

/** A filter to be used against PermissionPolicyType fields. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyTypeFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<PermissionPolicyType>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<PermissionPolicyType>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<PermissionPolicyType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<PermissionPolicyType>;
  /** Included in the specified list. */
  in?: Maybe<Array<PermissionPolicyType>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<PermissionPolicyType>>;
  /** Less than the specified value. */
  lessThan?: Maybe<PermissionPolicyType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<PermissionPolicyType>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<PermissionPolicyType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<PermissionPolicyType>;
};

export enum PermissionPolicyType {
  Review = 'REVIEW',
  Apply = 'APPLY',
  Assign = 'ASSIGN',
  View = 'VIEW'
}

/** A filter to be used against many `PermissionName` object types. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyToManyPermissionNameFilter = {
  /** Every related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<PermissionNameFilter>;
  /** Some related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<PermissionNameFilter>;
  /** No related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<PermissionNameFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `assignerId` field. */
  assignerId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewerId` field. */
  reviewerId?: Maybe<IntFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `timeStageCreated` field. */
  timeStageCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ReviewAssignmentStatusFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: Maybe<StringListFilter>;
  /** Filter by the object’s `assignedSections` field. */
  assignedSections?: Maybe<StringListFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `levelId` field. */
  levelId?: Maybe<IntFilter>;
  /** Filter by the object’s `isLastLevel` field. */
  isLastLevel?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isLastStage` field. */
  isLastStage?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isLocked` field. */
  isLocked?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isFinalDecision` field. */
  isFinalDecision?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isSelfAssignable` field. */
  isSelfAssignable?: Maybe<BooleanFilter>;
  /** Filter by the object’s `reviews` relation. */
  reviews?: Maybe<ReviewAssignmentToManyReviewFilter>;
  /** Some related `reviews` exist. */
  reviewsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignmentAssignerJoins` relation. */
  reviewAssignmentAssignerJoins?: Maybe<ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoins` exist. */
  reviewAssignmentAssignerJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `assigner` relation. */
  assigner?: Maybe<UserFilter>;
  /** A related `assigner` exists. */
  assignerExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewer` relation. */
  reviewer?: Maybe<UserFilter>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: Maybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `stage` relation. */
  stage?: Maybe<TemplateStageFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `level` relation. */
  level?: Maybe<TemplateStageReviewLevelFilter>;
  /** A related `level` exists. */
  levelExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewAssignmentFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewAssignmentFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against ReviewAssignmentStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentStatusFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewAssignmentStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewAssignmentStatus>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewAssignmentStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewAssignmentStatus>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewAssignmentStatus>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewAssignmentStatus>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewAssignmentStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewAssignmentStatus>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewAssignmentStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewAssignmentStatus>;
};

export enum ReviewAssignmentStatus {
  Available = 'AVAILABLE',
  Assigned = 'ASSIGNED'
}

/** A filter to be used against many `Review` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentToManyReviewFilter = {
  /** Every related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewFilter>;
  /** Some related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewFilter>;
  /** No related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewFilter>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentAssignerJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `assignerId` field. */
  assignerId?: Maybe<IntFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: Maybe<IntFilter>;
  /** Filter by the object’s `assigner` relation. */
  assigner?: Maybe<UserFilter>;
  /** A related `assigner` exists. */
  assignerExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: Maybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignment` relation. */
  reviewAssignment?: Maybe<ReviewAssignmentFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewAssignmentAssignerJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewAssignmentAssignerJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against `TemplateStage` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `number` field. */
  number?: Maybe<IntFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `colour` field. */
  colour?: Maybe<StringFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationStageHistoriesByStageId` relation. */
  applicationStageHistoriesByStageId?: Maybe<TemplateStageToManyApplicationStageHistoryFilter>;
  /** Some related `applicationStageHistoriesByStageId` exist. */
  applicationStageHistoriesByStageIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `reviewAssignmentsByStageId` relation. */
  reviewAssignmentsByStageId?: Maybe<TemplateStageToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByStageId` exist. */
  reviewAssignmentsByStageIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `templateStageReviewLevelsByStageId` relation. */
  templateStageReviewLevelsByStageId?: Maybe<TemplateStageToManyTemplateStageReviewLevelFilter>;
  /** Some related `templateStageReviewLevelsByStageId` exist. */
  templateStageReviewLevelsByStageIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateStageFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateStageFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateStageFilter>;
};

/** A filter to be used against many `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyApplicationStageHistoryFilter = {
  /** Every related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationStageHistoryFilter>;
  /** Some related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationStageHistoryFilter>;
  /** No related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationStageHistoryFilter>;
};

/** A filter to be used against `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageHistoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: Maybe<IntFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `applicationStatusHistories` relation. */
  applicationStatusHistories?: Maybe<ApplicationStageHistoryToManyApplicationStatusHistoryFilter>;
  /** Some related `applicationStatusHistories` exist. */
  applicationStatusHistoriesExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `stage` relation. */
  stage?: Maybe<TemplateStageFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationStageHistoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationStageHistoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationStageHistoryFilter>;
};

/** A filter to be used against many `ApplicationStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageHistoryToManyApplicationStatusHistoryFilter = {
  /** Every related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationStatusHistoryFilter>;
  /** Some related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationStatusHistoryFilter>;
  /** No related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationStatusHistoryFilter>;
};

/** A filter to be used against `ApplicationStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStatusHistoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationStageHistoryId` field. */
  applicationStageHistoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationStatusFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationStageHistory` relation. */
  applicationStageHistory?: Maybe<ApplicationStageHistoryFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationStatusHistoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationStatusHistoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationStatusHistoryFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `TemplateStageReviewLevel` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyTemplateStageReviewLevelFilter = {
  /** Every related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateStageReviewLevelFilter>;
  /** Some related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateStageReviewLevelFilter>;
  /** No related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateStageReviewLevelFilter>;
};

/** A filter to be used against `TemplateStageReviewLevel` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageReviewLevelFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: Maybe<IntFilter>;
  /** Filter by the object’s `number` field. */
  number?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `reviewAssignmentsByLevelId` relation. */
  reviewAssignmentsByLevelId?: Maybe<TemplateStageReviewLevelToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByLevelId` exist. */
  reviewAssignmentsByLevelIdExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `stage` relation. */
  stage?: Maybe<TemplateStageFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateStageReviewLevelFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateStageReviewLevelFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateStageReviewLevelFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageReviewLevelToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against many `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyUserOrganisationFilter = {
  /** Every related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserOrganisationFilter>;
  /** Some related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserOrganisationFilter>;
  /** No related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserOrganisationFilter>;
};

/** A filter to be used against `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type UserOrganisationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: Maybe<StringFilter>;
  /** Filter by the object’s `userOrganisationApplicationJoins` relation. */
  userOrganisationApplicationJoins?: Maybe<UserOrganisationToManyUserOrganisationApplicationJoinFilter>;
  /** Some related `userOrganisationApplicationJoins` exist. */
  userOrganisationApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: Maybe<OrganisationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserOrganisationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserOrganisationFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserOrganisationFilter>;
};

/** A filter to be used against many `UserOrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserOrganisationToManyUserOrganisationApplicationJoinFilter = {
  /** Every related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserOrganisationApplicationJoinFilter>;
  /** Some related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserOrganisationApplicationJoinFilter>;
  /** No related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserOrganisationApplicationJoinFilter>;
};

/** A filter to be used against `UserOrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserOrganisationApplicationJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `userOrganisationId` field. */
  userOrganisationId?: Maybe<IntFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `userOrganisation` relation. */
  userOrganisation?: Maybe<UserOrganisationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserOrganisationApplicationJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserOrganisationApplicationJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserOrganisationApplicationJoinFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<FileFilter>;
};

/** A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyNotificationFilter = {
  /** Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<NotificationFilter>;
  /** Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<NotificationFilter>;
  /** No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<NotificationFilter>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<PermissionJoinFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against many `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyTriggerScheduleFilter = {
  /** Every related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TriggerScheduleFilter>;
  /** Some related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TriggerScheduleFilter>;
  /** No related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TriggerScheduleFilter>;
};

/** A filter to be used against `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type TriggerScheduleFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: Maybe<StringFilter>;
  /** Filter by the object’s `timeScheduled` field. */
  timeScheduled?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `data` field. */
  data?: Maybe<JsonFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Filter by the object’s `editorUserId` field. */
  editorUserId?: Maybe<IntFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: Maybe<Scalars['Boolean']>;
  /** Filter by the object’s `editorUser` relation. */
  editorUser?: Maybe<UserFilter>;
  /** A related `editorUser` exists. */
  editorUserExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TriggerScheduleFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TriggerScheduleFilter>>;
  /** Negates the expression. */
  not?: Maybe<TriggerScheduleFilter>;
};

/** A filter to be used against many `UserApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyUserApplicationJoinFilter = {
  /** Every related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserApplicationJoinFilter>;
  /** Some related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserApplicationJoinFilter>;
  /** No related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserApplicationJoinFilter>;
};

/** A filter to be used against `UserApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserApplicationJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `user` relation. */
  user?: Maybe<UserFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserApplicationJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserApplicationJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserApplicationJoinFilter>;
};

/** A filter to be used against many `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyUserOrganisationFilter = {
  /** Every related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserOrganisationFilter>;
  /** Some related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserOrganisationFilter>;
  /** No related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserOrganisationFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewResponseFilter>;
};

/** A filter to be used against many `ReviewStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewStatusHistoryFilter = {
  /** Every related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewStatusHistoryFilter>;
  /** Some related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewStatusHistoryFilter>;
  /** No related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewStatusHistoryFilter>;
};

/** A filter to be used against `ReviewStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ReviewStatusHistoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ReviewStatusFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `review` relation. */
  review?: Maybe<ReviewFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewStatusHistoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewStatusHistoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewStatusHistoryFilter>;
};

/** A filter to be used against many `ActivityLog` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyActivityLogFilter = {
  /** Every related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ActivityLogFilter>;
  /** Some related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ActivityLogFilter>;
  /** No related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ActivityLogFilter>;
};

/** A filter to be used against `ActivityLog` object types. All fields are combined with a logical ‘and.’ */
export type ActivityLogFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `type` field. */
  type?: Maybe<EventTypeFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<StringFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `table` field. */
  table?: Maybe<StringFilter>;
  /** Filter by the object’s `recordId` field. */
  recordId?: Maybe<IntFilter>;
  /** Filter by the object’s `details` field. */
  details?: Maybe<JsonFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ActivityLogFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ActivityLogFilter>>;
  /** Negates the expression. */
  not?: Maybe<ActivityLogFilter>;
};

/** A filter to be used against EventType fields. All fields are combined with a logical ‘and.’ */
export type EventTypeFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<EventType>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<EventType>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<EventType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<EventType>;
  /** Included in the specified list. */
  in?: Maybe<Array<EventType>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<EventType>>;
  /** Less than the specified value. */
  lessThan?: Maybe<EventType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<EventType>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<EventType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<EventType>;
};

export enum EventType {
  Stage = 'STAGE',
  Status = 'STATUS',
  Outcome = 'OUTCOME',
  Extension = 'EXTENSION',
  Assignment = 'ASSIGNMENT',
  Review = 'REVIEW',
  ReviewDecision = 'REVIEW_DECISION',
  Permission = 'PERMISSION'
}

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationResponseFilter = {
  /** Every related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationResponseFilter>;
  /** Some related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationResponseFilter>;
  /** No related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationResponseFilter>;
};

/** A filter to be used against many `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationStageHistoryFilter = {
  /** Every related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ApplicationStageHistoryFilter>;
  /** Some related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ApplicationStageHistoryFilter>;
  /** No related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ApplicationStageHistoryFilter>;
};

/** A filter to be used against many `DataTableProductApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyDataTableProductApplicationJoinFilter = {
  /** Every related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<DataTableProductApplicationJoinFilter>;
  /** Some related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<DataTableProductApplicationJoinFilter>;
  /** No related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<DataTableProductApplicationJoinFilter>;
};

/** A filter to be used against `DataTableProductApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type DataTableProductApplicationJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `dataTableProductId` field. */
  dataTableProductId?: Maybe<IntFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Filter by the object’s `dataTableProduct` relation. */
  dataTableProduct?: Maybe<DataTableProductFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableProductApplicationJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableProductApplicationJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableProductApplicationJoinFilter>;
};

/** A filter to be used against `DataTableProduct` object types. All fields are combined with a logical ‘and.’ */
export type DataTableProductFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `origin` field. */
  origin?: Maybe<StringFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Filter by the object’s `expiryDate` field. */
  expiryDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `registration` field. */
  registration?: Maybe<StringFilter>;
  /** Filter by the object’s `applicantName` field. */
  applicantName?: Maybe<StringFilter>;
  /** Filter by the object’s `registrationDate` field. */
  registrationDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `responsiblePerson` field. */
  responsiblePerson?: Maybe<JsonFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `atcCode` field. */
  atcCode?: Maybe<StringFilter>;
  /** Filter by the object’s `atcClass` field. */
  atcClass?: Maybe<StringFilter>;
  /** Filter by the object’s `companyId` field. */
  companyId?: Maybe<IntFilter>;
  /** Filter by the object’s `dimensions` field. */
  dimensions?: Maybe<JsonFilter>;
  /** Filter by the object’s `dosageForm` field. */
  dosageForm?: Maybe<StringFilter>;
  /** Filter by the object’s `applicantId` field. */
  applicantId?: Maybe<IntFilter>;
  /** Filter by the object’s `companyName` field. */
  companyName?: Maybe<StringFilter>;
  /** Filter by the object’s `formulations` field. */
  formulations?: Maybe<JsonFilter>;
  /** Filter by the object’s `prescription` field. */
  prescription?: Maybe<StringFilter>;
  /** Filter by the object’s `genericNames` field. */
  genericNames?: Maybe<JsonFilter>;
  /** Filter by the object’s `medicineType` field. */
  medicineType?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationType` field. */
  applicationType?: Maybe<StringFilter>;
  /** Filter by the object’s `primaryContainer` field. */
  primaryContainer?: Maybe<StringFilter>;
  /** Filter by the object’s `shelfLifeOpened` field. */
  shelfLifeOpened?: Maybe<StringFilter>;
  /** Filter by the object’s `manufacturersList` field. */
  manufacturersList?: Maybe<JsonFilter>;
  /** Filter by the object’s `shelfLifeProposed` field. */
  shelfLifeProposed?: Maybe<StringFilter>;
  /** Filter by the object’s `administrationRoute` field. */
  administrationRoute?: Maybe<StringFilter>;
  /** Filter by the object’s `isLocallyManufactured` field. */
  isLocallyManufactured?: Maybe<BooleanFilter>;
  /** Filter by the object’s `shelfLifeReconstructed` field. */
  shelfLifeReconstructed?: Maybe<StringFilter>;
  /** Filter by the object’s `storageConditionsOpened` field. */
  storageConditionsOpened?: Maybe<StringFilter>;
  /** Filter by the object’s `storageConditionsProposed` field. */
  storageConditionsProposed?: Maybe<StringFilter>;
  /** Filter by the object’s `genericNamesFilterData` field. */
  genericNamesFilterData?: Maybe<StringFilter>;
  /** Filter by the object’s `manufacturersListFilterData` field. */
  manufacturersListFilterData?: Maybe<StringFilter>;
  /** Filter by the object’s `dataTableProductApplicationJoins` relation. */
  dataTableProductApplicationJoins?: Maybe<DataTableProductToManyDataTableProductApplicationJoinFilter>;
  /** Some related `dataTableProductApplicationJoins` exist. */
  dataTableProductApplicationJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableProductFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableProductFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableProductFilter>;
};

/** A filter to be used against many `DataTableProductApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type DataTableProductToManyDataTableProductApplicationJoinFilter = {
  /** Every related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<DataTableProductApplicationJoinFilter>;
  /** Some related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<DataTableProductApplicationJoinFilter>;
  /** No related `DataTableProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<DataTableProductApplicationJoinFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<FileFilter>;
};

/** A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyNotificationFilter = {
  /** Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<NotificationFilter>;
  /** Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<NotificationFilter>;
  /** No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<NotificationFilter>;
};

/** A filter to be used against many `OrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyOrganisationApplicationJoinFilter = {
  /** Every related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<OrganisationApplicationJoinFilter>;
  /** Some related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<OrganisationApplicationJoinFilter>;
  /** No related `OrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<OrganisationApplicationJoinFilter>;
};

/** A filter to be used against many `ProductApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyProductApplicationJoinFilter = {
  /** Every related `ProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ProductApplicationJoinFilter>;
  /** Some related `ProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ProductApplicationJoinFilter>;
  /** No related `ProductApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ProductApplicationJoinFilter>;
};

/** A filter to be used against `ProductApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ProductApplicationJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `productId` field. */
  productId?: Maybe<IntFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ProductApplicationJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ProductApplicationJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<ProductApplicationJoinFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyTriggerScheduleFilter = {
  /** Every related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TriggerScheduleFilter>;
  /** Some related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TriggerScheduleFilter>;
  /** No related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TriggerScheduleFilter>;
};

/** A filter to be used against many `UserApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyUserApplicationJoinFilter = {
  /** Every related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserApplicationJoinFilter>;
  /** Some related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserApplicationJoinFilter>;
  /** No related `UserApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserApplicationJoinFilter>;
};

/** A filter to be used against many `UserOrganisationApplicationJoin` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyUserOrganisationApplicationJoinFilter = {
  /** Every related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<UserOrganisationApplicationJoinFilter>;
  /** Some related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<UserOrganisationApplicationJoinFilter>;
  /** No related `UserOrganisationApplicationJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<UserOrganisationApplicationJoinFilter>;
};

/** A filter to be used against many `Verification` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyVerificationFilter = {
  /** Every related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<VerificationFilter>;
  /** Some related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<VerificationFilter>;
  /** No related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<VerificationFilter>;
};

/** A filter to be used against `Verification` object types. All fields are combined with a logical ‘and.’ */
export type VerificationFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `uniqueId` field. */
  uniqueId?: Maybe<StringFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: Maybe<StringFilter>;
  /** Filter by the object’s `message` field. */
  message?: Maybe<StringFilter>;
  /** Filter by the object’s `data` field. */
  data?: Maybe<JsonFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `timeExpired` field. */
  timeExpired?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `isVerified` field. */
  isVerified?: Maybe<BooleanFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `application` relation. */
  application?: Maybe<ApplicationFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<VerificationFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<VerificationFilter>>;
  /** Negates the expression. */
  not?: Maybe<VerificationFilter>;
};

/** A filter to be used against many `TemplateAction` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateActionFilter = {
  /** Every related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateActionFilter>;
  /** Some related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateActionFilter>;
  /** No related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateActionFilter>;
};

/** A filter to be used against `TemplateAction` object types. All fields are combined with a logical ‘and.’ */
export type TemplateActionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `actionCode` field. */
  actionCode?: Maybe<StringFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: Maybe<StringFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: Maybe<TriggerFilter>;
  /** Filter by the object’s `condition` field. */
  condition?: Maybe<JsonFilter>;
  /** Filter by the object’s `parameterQueries` field. */
  parameterQueries?: Maybe<JsonFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `sequence` field. */
  sequence?: Maybe<IntFilter>;
  /** Filter by the object’s `parametersQueriesString` field. */
  parametersQueriesString?: Maybe<StringFilter>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateActionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateActionFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateActionFilter>;
};

/** A filter to be used against many `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyActionQueueFilter = {
  /** Every related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ActionQueueFilter>;
  /** Some related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ActionQueueFilter>;
  /** No related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ActionQueueFilter>;
};

/** A filter to be used against many `TemplateStage` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateStageFilter = {
  /** Every related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateStageFilter>;
  /** Some related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateStageFilter>;
  /** No related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateStageFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<FileFilter>;
};

/** A filter to be used against many `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplatePermissionFilter = {
  /** Every related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplatePermissionFilter>;
  /** Some related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplatePermissionFilter>;
  /** No related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplatePermissionFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateFilterJoinFilter = {
  /** Every related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateFilterJoinFilter>;
  /** Some related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateFilterJoinFilter>;
  /** No related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateFilterJoinFilter>;
};

/** A filter to be used against `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type TemplateFilterJoinFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `filterId` field. */
  filterId?: Maybe<IntFilter>;
  /** Filter by the object’s `template` relation. */
  template?: Maybe<TemplateFilter>;
  /** Filter by the object’s `filter` relation. */
  filter?: Maybe<FilterFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateFilterJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateFilterJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateFilterJoinFilter>;
};

/** A filter to be used against `Filter` object types. All fields are combined with a logical ‘and.’ */
export type FilterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `query` field. */
  query?: Maybe<JsonFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: Maybe<PermissionPolicyTypeFilter>;
  /** Filter by the object’s `templateFilterJoins` relation. */
  templateFilterJoins?: Maybe<FilterToManyTemplateFilterJoinFilter>;
  /** Some related `templateFilterJoins` exist. */
  templateFilterJoinsExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<FilterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<FilterFilter>>;
  /** Negates the expression. */
  not?: Maybe<FilterFilter>;
};

/** A filter to be used against many `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type FilterToManyTemplateFilterJoinFilter = {
  /** Every related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateFilterJoinFilter>;
  /** Some related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateFilterJoinFilter>;
  /** No related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateFilterJoinFilter>;
};

/** A filter to be used against many `TemplateSection` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateSectionFilter = {
  /** Every related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateSectionFilter>;
  /** Some related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateSectionFilter>;
  /** No related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateSectionFilter>;
};

/** A filter to be used against many `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTriggerScheduleFilter = {
  /** Every related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TriggerScheduleFilter>;
  /** Some related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TriggerScheduleFilter>;
  /** No related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TriggerScheduleFilter>;
};

/** A filter to be used against `TemplateCategory` object types. All fields are combined with a logical ‘and.’ */
export type TemplateCategoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `icon` field. */
  icon?: Maybe<StringFilter>;
  /** Filter by the object’s `uiLocation` field. */
  uiLocation?: Maybe<UiLocationListFilter>;
  /** Filter by the object’s `templates` relation. */
  templates?: Maybe<TemplateCategoryToManyTemplateFilter>;
  /** Some related `templates` exist. */
  templatesExist?: Maybe<Scalars['Boolean']>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<TemplateCategoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<TemplateCategoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<TemplateCategoryFilter>;
};

/** A filter to be used against UiLocation List fields. All fields are combined with a logical ‘and.’ */
export type UiLocationListFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Array<Maybe<UiLocation>>>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Array<Maybe<UiLocation>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Array<Maybe<UiLocation>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Array<Maybe<UiLocation>>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Array<Maybe<UiLocation>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Array<Maybe<UiLocation>>>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Array<Maybe<UiLocation>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Array<Maybe<UiLocation>>>;
  /** Contains the specified list of values. */
  contains?: Maybe<Array<Maybe<UiLocation>>>;
  /** Contained by the specified list of values. */
  containedBy?: Maybe<Array<Maybe<UiLocation>>>;
  /** Overlaps the specified list of values. */
  overlaps?: Maybe<Array<Maybe<UiLocation>>>;
  /** Any array item is equal to the specified value. */
  anyEqualTo?: Maybe<UiLocation>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: Maybe<UiLocation>;
  /** Any array item is less than the specified value. */
  anyLessThan?: Maybe<UiLocation>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: Maybe<UiLocation>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: Maybe<UiLocation>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: Maybe<UiLocation>;
};

export enum UiLocation {
  Dashboard = 'DASHBOARD',
  List = 'LIST',
  User = 'USER',
  Admin = 'ADMIN',
  Management = 'MANAGEMENT'
}

/** A filter to be used against many `Template` object types. All fields are combined with a logical ‘and.’ */
export type TemplateCategoryToManyTemplateFilter = {
  /** Every related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: Maybe<TemplateFilter>;
  /** Some related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: Maybe<TemplateFilter>;
  /** No related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: Maybe<TemplateFilter>;
};

/** A connection to a list of `ActionQueue` values. */
export type ActionQueuesConnection = {
  __typename?: 'ActionQueuesConnection';
  /** A list of `ActionQueue` objects. */
  nodes: Array<Maybe<ActionQueue>>;
  /** A list of edges which contains the `ActionQueue` and cursor to aid in pagination. */
  edges: Array<ActionQueuesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActionQueue` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ActionQueue = Node & {
  __typename?: 'ActionQueue';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  triggerEvent?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  templateId?: Maybe<Scalars['Int']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
};

export type TriggerQueue = Node & {
  __typename?: 'TriggerQueue';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  triggerType?: Maybe<Trigger>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  status?: Maybe<TriggerQueueStatus>;
  log?: Maybe<Scalars['JSON']>;
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueuesByTriggerEvent: ActionQueuesConnection;
};


export type TriggerQueueActionQueuesByTriggerEventArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
  condition?: Maybe<ActionQueueCondition>;
  filter?: Maybe<ActionQueueFilter>;
};

export type Template = Node & {
  __typename?: 'Template';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** Reads and enables pagination through a set of `Application`. */
  applications: ApplicationsConnection;
  /** Reads and enables pagination through a set of `TemplateAction`. */
  templateActions: TemplateActionsConnection;
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueues: ActionQueuesConnection;
  /** Reads and enables pagination through a set of `TemplateStage`. */
  templateStages: TemplateStagesConnection;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions: TemplatePermissionsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins: TemplateFilterJoinsConnection;
  /** Reads and enables pagination through a set of `TemplateSection`. */
  templateSections: TemplateSectionsConnection;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules: TriggerSchedulesConnection;
};


export type TemplateApplicationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
  condition?: Maybe<ApplicationCondition>;
  filter?: Maybe<ApplicationFilter>;
};


export type TemplateTemplateActionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateActionsOrderBy>>;
  condition?: Maybe<TemplateActionCondition>;
  filter?: Maybe<TemplateActionFilter>;
};


export type TemplateActionQueuesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
  condition?: Maybe<ActionQueueCondition>;
  filter?: Maybe<ActionQueueFilter>;
};


export type TemplateTemplateStagesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateStagesOrderBy>>;
  condition?: Maybe<TemplateStageCondition>;
  filter?: Maybe<TemplateStageFilter>;
};


export type TemplateFilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};


export type TemplateTemplatePermissionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
  condition?: Maybe<TemplatePermissionCondition>;
  filter?: Maybe<TemplatePermissionFilter>;
};


export type TemplateReviewAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type TemplateTemplateFilterJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
  condition?: Maybe<TemplateFilterJoinCondition>;
  filter?: Maybe<TemplateFilterJoinFilter>;
};


export type TemplateTemplateSectionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateSectionsOrderBy>>;
  condition?: Maybe<TemplateSectionCondition>;
  filter?: Maybe<TemplateSectionFilter>;
};


export type TemplateTriggerSchedulesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
  condition?: Maybe<TriggerScheduleCondition>;
  filter?: Maybe<TriggerScheduleFilter>;
};

export type TemplateCategory = Node & {
  __typename?: 'TemplateCategory';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
  /** Reads and enables pagination through a set of `Template`. */
  templates: TemplatesConnection;
};


export type TemplateCategoryTemplatesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplatesOrderBy>>;
  condition?: Maybe<TemplateCondition>;
  filter?: Maybe<TemplateFilter>;
};

/** Methods to use when ordering `Template`. */
export enum TemplatesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  NamePluralAsc = 'NAME_PLURAL_ASC',
  NamePluralDesc = 'NAME_PLURAL_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IsLinearAsc = 'IS_LINEAR_ASC',
  IsLinearDesc = 'IS_LINEAR_DESC',
  CanApplicantMakeChangesAsc = 'CAN_APPLICANT_MAKE_CHANGES_ASC',
  CanApplicantMakeChangesDesc = 'CAN_APPLICANT_MAKE_CHANGES_DESC',
  StartMessageAsc = 'START_MESSAGE_ASC',
  StartMessageDesc = 'START_MESSAGE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  SubmissionMessageAsc = 'SUBMISSION_MESSAGE_ASC',
  SubmissionMessageDesc = 'SUBMISSION_MESSAGE_DESC',
  IconAsc = 'ICON_ASC',
  IconDesc = 'ICON_DESC',
  TemplateCategoryIdAsc = 'TEMPLATE_CATEGORY_ID_ASC',
  TemplateCategoryIdDesc = 'TEMPLATE_CATEGORY_ID_DESC',
  VersionTimestampAsc = 'VERSION_TIMESTAMP_ASC',
  VersionTimestampDesc = 'VERSION_TIMESTAMP_DESC',
  VersionAsc = 'VERSION_ASC',
  VersionDesc = 'VERSION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Template` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `namePlural` field. */
  namePlural?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isLinear` field. */
  isLinear?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `canApplicantMakeChanges` field. */
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `startMessage` field. */
  startMessage?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<TemplateStatus>;
  /** Checks for equality with the object’s `submissionMessage` field. */
  submissionMessage?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `icon` field. */
  icon?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateCategoryId` field. */
  templateCategoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `versionTimestamp` field. */
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `version` field. */
  version?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `Template` values. */
export type TemplatesConnection = {
  __typename?: 'TemplatesConnection';
  /** A list of `Template` objects. */
  nodes: Array<Maybe<Template>>;
  /** A list of edges which contains the `Template` and cursor to aid in pagination. */
  edges: Array<TemplatesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Template` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Template` edge in the connection. */
export type TemplatesEdge = {
  __typename?: 'TemplatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Template` at the end of the edge. */
  node?: Maybe<Template>;
};

/** Methods to use when ordering `Application`. */
export enum ApplicationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  IsConfigAsc = 'IS_CONFIG_ASC',
  IsConfigDesc = 'IS_CONFIG_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Application` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isConfig` field. */
  isConfig?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
};

/** A connection to a list of `Application` values. */
export type ApplicationsConnection = {
  __typename?: 'ApplicationsConnection';
  /** A list of `Application` objects. */
  nodes: Array<Maybe<Application>>;
  /** A list of edges which contains the `Application` and cursor to aid in pagination. */
  edges: Array<ApplicationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Application` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type Application = Node & {
  __typename?: 'Application';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  templateId: Scalars['Int'];
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `Application`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** Reads and enables pagination through a set of `Review`. */
  reviews: ReviewsConnection;
  /** Reads and enables pagination through a set of `ActivityLog`. */
  activityLogs: ActivityLogsConnection;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotes: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses: ApplicationResponsesConnection;
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistories: ApplicationStageHistoriesConnection;
  /** Reads and enables pagination through a set of `DataTableProductApplicationJoin`. */
  dataTableProductApplicationJoins: DataTableProductApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `File`. */
  filesByApplicationSerial: FilesConnection;
  /** Reads and enables pagination through a set of `Notification`. */
  notifications: NotificationsConnection;
  /** Reads and enables pagination through a set of `OrganisationApplicationJoin`. */
  organisationApplicationJoins: OrganisationApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `ProductApplicationJoin`. */
  productApplicationJoins: ProductApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules: TriggerSchedulesConnection;
  /** Reads and enables pagination through a set of `UserApplicationJoin`. */
  userApplicationJoins: UserApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `UserOrganisationApplicationJoin`. */
  userOrganisationApplicationJoins: UserOrganisationApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `Verification`. */
  verifications: VerificationsConnection;
  stage?: Maybe<Scalars['String']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
};


export type ApplicationReviewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
  condition?: Maybe<ReviewCondition>;
  filter?: Maybe<ReviewFilter>;
};


export type ApplicationActivityLogsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ActivityLogsOrderBy>>;
  condition?: Maybe<ActivityLogCondition>;
  filter?: Maybe<ActivityLogFilter>;
};


export type ApplicationApplicationNotesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
  condition?: Maybe<ApplicationNoteCondition>;
  filter?: Maybe<ApplicationNoteFilter>;
};


export type ApplicationApplicationResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
  condition?: Maybe<ApplicationResponseCondition>;
  filter?: Maybe<ApplicationResponseFilter>;
};


export type ApplicationApplicationStageHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
  condition?: Maybe<ApplicationStageHistoryCondition>;
  filter?: Maybe<ApplicationStageHistoryFilter>;
};


export type ApplicationDataTableProductApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
  condition?: Maybe<DataTableProductApplicationJoinCondition>;
  filter?: Maybe<DataTableProductApplicationJoinFilter>;
};


export type ApplicationFilesByApplicationSerialArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};


export type ApplicationNotificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
  condition?: Maybe<NotificationCondition>;
  filter?: Maybe<NotificationFilter>;
};


export type ApplicationOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<OrganisationApplicationJoinCondition>;
  filter?: Maybe<OrganisationApplicationJoinFilter>;
};


export type ApplicationProductApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ProductApplicationJoinsOrderBy>>;
  condition?: Maybe<ProductApplicationJoinCondition>;
  filter?: Maybe<ProductApplicationJoinFilter>;
};


export type ApplicationReviewAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type ApplicationTriggerSchedulesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
  condition?: Maybe<TriggerScheduleCondition>;
  filter?: Maybe<TriggerScheduleFilter>;
};


export type ApplicationUserApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
  condition?: Maybe<UserApplicationJoinCondition>;
  filter?: Maybe<UserApplicationJoinFilter>;
};


export type ApplicationUserOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<UserOrganisationApplicationJoinCondition>;
  filter?: Maybe<UserOrganisationApplicationJoinFilter>;
};


export type ApplicationVerificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<VerificationsOrderBy>>;
  condition?: Maybe<VerificationCondition>;
  filter?: Maybe<VerificationFilter>;
};

export type User = Node & {
  __typename?: 'User';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  /** Reads and enables pagination through a set of `Application`. */
  applications: ApplicationsConnection;
  /** Reads and enables pagination through a set of `Review`. */
  reviewedReviews: ReviewsConnection;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotes: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  /** Reads and enables pagination through a set of `Notification`. */
  notifications: NotificationsConnection;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins: PermissionJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByAssignerId: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewedReviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoinsByAssignerId: ReviewAssignmentAssignerJoinsConnection;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedulesByEditorUserId: TriggerSchedulesConnection;
  /** Reads and enables pagination through a set of `UserApplicationJoin`. */
  userApplicationJoins: UserApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations: UserOrganisationsConnection;
};


export type UserApplicationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
  condition?: Maybe<ApplicationCondition>;
  filter?: Maybe<ApplicationFilter>;
};


export type UserReviewedReviewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
  condition?: Maybe<ReviewCondition>;
  filter?: Maybe<ReviewFilter>;
};


export type UserApplicationNotesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
  condition?: Maybe<ApplicationNoteCondition>;
  filter?: Maybe<ApplicationNoteFilter>;
};


export type UserFilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};


export type UserNotificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
  condition?: Maybe<NotificationCondition>;
  filter?: Maybe<NotificationFilter>;
};


export type UserPermissionJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
  condition?: Maybe<PermissionJoinCondition>;
  filter?: Maybe<PermissionJoinFilter>;
};


export type UserReviewAssignmentsByAssignerIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type UserReviewedReviewAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type UserReviewAssignmentAssignerJoinsByAssignerIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
  condition?: Maybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};


export type UserTriggerSchedulesByEditorUserIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
  condition?: Maybe<TriggerScheduleCondition>;
  filter?: Maybe<TriggerScheduleFilter>;
};


export type UserUserApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
  condition?: Maybe<UserApplicationJoinCondition>;
  filter?: Maybe<UserApplicationJoinFilter>;
};


export type UserUserOrganisationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
  condition?: Maybe<UserOrganisationCondition>;
  filter?: Maybe<UserOrganisationFilter>;
};

/** Methods to use when ordering `Review`. */
export enum ReviewsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  ReviewerIdAsc = 'REVIEWER_ID_ASC',
  ReviewerIdDesc = 'REVIEWER_ID_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TimeStageCreatedAsc = 'TIME_STAGE_CREATED_ASC',
  TimeStageCreatedDesc = 'TIME_STAGE_CREATED_DESC',
  IsLastLevelAsc = 'IS_LAST_LEVEL_ASC',
  IsLastLevelDesc = 'IS_LAST_LEVEL_DESC',
  IsLastStageAsc = 'IS_LAST_STAGE_ASC',
  IsLastStageDesc = 'IS_LAST_STAGE_DESC',
  IsFinalDecisionAsc = 'IS_FINAL_DECISION_ASC',
  IsFinalDecisionDesc = 'IS_FINAL_DECISION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewerId` field. */
  reviewerId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `timeStageCreated` field. */
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isLastLevel` field. */
  isLastLevel?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isLastStage` field. */
  isLastStage?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isFinalDecision` field. */
  isFinalDecision?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `Review` values. */
export type ReviewsConnection = {
  __typename?: 'ReviewsConnection';
  /** A list of `Review` objects. */
  nodes: Array<Maybe<Review>>;
  /** A list of edges which contains the `Review` and cursor to aid in pagination. */
  edges: Array<ReviewsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Review` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type Review = Node & {
  __typename?: 'Review';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `Review`. */
  reviewer?: Maybe<User>;
  /** Reads and enables pagination through a set of `ReviewDecision`. */
  reviewDecisions: ReviewDecisionsConnection;
  /** Reads and enables pagination through a set of `Notification`. */
  notifications: NotificationsConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
  /** Reads and enables pagination through a set of `ReviewStatusHistory`. */
  reviewStatusHistories: ReviewStatusHistoriesConnection;
  latestDecision?: Maybe<ReviewDecision>;
  status?: Maybe<ReviewStatus>;
  timeStatusCreated?: Maybe<Scalars['Datetime']>;
};


export type ReviewReviewDecisionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewDecisionsOrderBy>>;
  condition?: Maybe<ReviewDecisionCondition>;
  filter?: Maybe<ReviewDecisionFilter>;
};


export type ReviewNotificationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
  condition?: Maybe<NotificationCondition>;
  filter?: Maybe<NotificationFilter>;
};


export type ReviewReviewResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};


export type ReviewReviewStatusHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewStatusHistoriesOrderBy>>;
  condition?: Maybe<ReviewStatusHistoryCondition>;
  filter?: Maybe<ReviewStatusHistoryFilter>;
};

export type ReviewAssignment = Node & {
  __typename?: 'ReviewAssignment';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId: Scalars['Int'];
  organisationId?: Maybe<Scalars['Int']>;
  stageId: Scalars['Int'];
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId: Scalars['Int'];
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections: Array<Maybe<Scalars['String']>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<User>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** Reads and enables pagination through a set of `Review`. */
  reviews: ReviewsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins: ReviewAssignmentAssignerJoinsConnection;
};


export type ReviewAssignmentReviewsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
  condition?: Maybe<ReviewCondition>;
  filter?: Maybe<ReviewFilter>;
};


export type ReviewAssignmentReviewAssignmentAssignerJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
  condition?: Maybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};

export type Organisation = Node & {
  __typename?: 'Organisation';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `Application`. */
  applicationsByOrgId: ApplicationsConnection;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotesByOrgId: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `OrganisationApplicationJoin`. */
  organisationApplicationJoins: OrganisationApplicationJoinsConnection;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins: PermissionJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins: ReviewAssignmentAssignerJoinsConnection;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations: UserOrganisationsConnection;
};


export type OrganisationApplicationsByOrgIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
  condition?: Maybe<ApplicationCondition>;
  filter?: Maybe<ApplicationFilter>;
};


export type OrganisationApplicationNotesByOrgIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
  condition?: Maybe<ApplicationNoteCondition>;
  filter?: Maybe<ApplicationNoteFilter>;
};


export type OrganisationOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<OrganisationApplicationJoinCondition>;
  filter?: Maybe<OrganisationApplicationJoinFilter>;
};


export type OrganisationPermissionJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
  condition?: Maybe<PermissionJoinCondition>;
  filter?: Maybe<PermissionJoinFilter>;
};


export type OrganisationReviewAssignmentsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type OrganisationReviewAssignmentAssignerJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
  condition?: Maybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: Maybe<ReviewAssignmentAssignerJoinFilter>;
};


export type OrganisationUserOrganisationsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
  condition?: Maybe<UserOrganisationCondition>;
  filter?: Maybe<UserOrganisationFilter>;
};

/** Methods to use when ordering `ApplicationNote`. */
export enum ApplicationNotesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ApplicationNote` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationNoteCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: Maybe<Scalars['String']>;
};

/** A connection to a list of `ApplicationNote` values. */
export type ApplicationNotesConnection = {
  __typename?: 'ApplicationNotesConnection';
  /** A list of `ApplicationNote` objects. */
  nodes: Array<Maybe<ApplicationNote>>;
  /** A list of edges which contains the `ApplicationNote` and cursor to aid in pagination. */
  edges: Array<ApplicationNotesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationNote` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationNote = Node & {
  __typename?: 'ApplicationNote';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  userId: Scalars['Int'];
  orgId: Scalars['Int'];
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `ApplicationNote`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
};


export type ApplicationNoteFilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};

/** Methods to use when ordering `File`. */
export enum FilesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UniqueIdAsc = 'UNIQUE_ID_ASC',
  UniqueIdDesc = 'UNIQUE_ID_DESC',
  OriginalFilenameAsc = 'ORIGINAL_FILENAME_ASC',
  OriginalFilenameDesc = 'ORIGINAL_FILENAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  ApplicationSerialAsc = 'APPLICATION_SERIAL_ASC',
  ApplicationSerialDesc = 'APPLICATION_SERIAL_DESC',
  ApplicationResponseIdAsc = 'APPLICATION_RESPONSE_ID_ASC',
  ApplicationResponseIdDesc = 'APPLICATION_RESPONSE_ID_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ApplicationNoteIdAsc = 'APPLICATION_NOTE_ID_ASC',
  ApplicationNoteIdDesc = 'APPLICATION_NOTE_ID_DESC',
  IsOutputDocAsc = 'IS_OUTPUT_DOC_ASC',
  IsOutputDocDesc = 'IS_OUTPUT_DOC_DESC',
  IsInternalReferenceDocAsc = 'IS_INTERNAL_REFERENCE_DOC_ASC',
  IsInternalReferenceDocDesc = 'IS_INTERNAL_REFERENCE_DOC_DESC',
  IsExternalReferenceDocAsc = 'IS_EXTERNAL_REFERENCE_DOC_ASC',
  IsExternalReferenceDocDesc = 'IS_EXTERNAL_REFERENCE_DOC_DESC',
  ToBeDeletedAsc = 'TO_BE_DELETED_ASC',
  ToBeDeletedDesc = 'TO_BE_DELETED_DESC',
  FilePathAsc = 'FILE_PATH_ASC',
  FilePathDesc = 'FILE_PATH_DESC',
  ThumbnailPathAsc = 'THUMBNAIL_PATH_ASC',
  ThumbnailPathDesc = 'THUMBNAIL_PATH_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  SubmittedAsc = 'SUBMITTED_ASC',
  SubmittedDesc = 'SUBMITTED_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type FileCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `uniqueId` field. */
  uniqueId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `originalFilename` field. */
  originalFilename?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationSerial` field. */
  applicationSerial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicationResponseId` field. */
  applicationResponseId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicationNoteId` field. */
  applicationNoteId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isOutputDoc` field. */
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isInternalReferenceDoc` field. */
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isExternalReferenceDoc` field. */
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `toBeDeleted` field. */
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `filePath` field. */
  filePath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `thumbnailPath` field. */
  thumbnailPath?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `mimetype` field. */
  mimetype?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `submitted` field. */
  submitted?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `File` values. */
export type FilesConnection = {
  __typename?: 'FilesConnection';
  /** A list of `File` objects. */
  nodes: Array<Maybe<File>>;
  /** A list of edges which contains the `File` and cursor to aid in pagination. */
  edges: Array<FilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `File` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type File = Node & {
  __typename?: 'File';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc: Scalars['Boolean'];
  isInternalReferenceDoc: Scalars['Boolean'];
  isExternalReferenceDoc: Scalars['Boolean'];
  toBeDeleted: Scalars['Boolean'];
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp: Scalars['Datetime'];
  /** Reads a single `User` that is related to this `File`. */
  user?: Maybe<User>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
};

export type ApplicationResponse = Node & {
  __typename?: 'ApplicationResponse';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  templateElementId: Scalars['Int'];
  applicationId: Scalars['Int'];
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
};


export type ApplicationResponseFilesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<FilesOrderBy>>;
  condition?: Maybe<FileCondition>;
  filter?: Maybe<FileFilter>;
};


export type ApplicationResponseReviewResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};

export type TemplateElement = Node & {
  __typename?: 'TemplateElement';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  sectionId: Scalars['Int'];
  code: Scalars['String'];
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability: Reviewability;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses: ApplicationResponsesConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
  parametersString?: Maybe<Scalars['String']>;
};


export type TemplateElementApplicationResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
  condition?: Maybe<ApplicationResponseCondition>;
  filter?: Maybe<ApplicationResponseFilter>;
};


export type TemplateElementReviewResponsesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};

export type TemplateSection = Node & {
  __typename?: 'TemplateSection';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  templateId: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** Reads and enables pagination through a set of `TemplateElement`. */
  templateElementsBySectionId: TemplateElementsConnection;
};


export type TemplateSectionTemplateElementsBySectionIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateElementsOrderBy>>;
  condition?: Maybe<TemplateElementCondition>;
  filter?: Maybe<TemplateElementFilter>;
};

/** Methods to use when ordering `TemplateElement`. */
export enum TemplateElementsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SectionIdAsc = 'SECTION_ID_ASC',
  SectionIdDesc = 'SECTION_ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IndexAsc = 'INDEX_ASC',
  IndexDesc = 'INDEX_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  ElementTypePluginCodeAsc = 'ELEMENT_TYPE_PLUGIN_CODE_ASC',
  ElementTypePluginCodeDesc = 'ELEMENT_TYPE_PLUGIN_CODE_DESC',
  VisibilityConditionAsc = 'VISIBILITY_CONDITION_ASC',
  VisibilityConditionDesc = 'VISIBILITY_CONDITION_DESC',
  IsRequiredAsc = 'IS_REQUIRED_ASC',
  IsRequiredDesc = 'IS_REQUIRED_DESC',
  IsEditableAsc = 'IS_EDITABLE_ASC',
  IsEditableDesc = 'IS_EDITABLE_DESC',
  ValidationAsc = 'VALIDATION_ASC',
  ValidationDesc = 'VALIDATION_DESC',
  DefaultValueAsc = 'DEFAULT_VALUE_ASC',
  DefaultValueDesc = 'DEFAULT_VALUE_DESC',
  ValidationMessageAsc = 'VALIDATION_MESSAGE_ASC',
  ValidationMessageDesc = 'VALIDATION_MESSAGE_DESC',
  HelpTextAsc = 'HELP_TEXT_ASC',
  HelpTextDesc = 'HELP_TEXT_DESC',
  ParametersAsc = 'PARAMETERS_ASC',
  ParametersDesc = 'PARAMETERS_DESC',
  ReviewabilityAsc = 'REVIEWABILITY_ASC',
  ReviewabilityDesc = 'REVIEWABILITY_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateVersionAsc = 'TEMPLATE_VERSION_ASC',
  TemplateVersionDesc = 'TEMPLATE_VERSION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateElement` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateElementCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sectionId` field. */
  sectionId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `index` field. */
  index?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<TemplateElementCategory>;
  /** Checks for equality with the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `visibilityCondition` field. */
  visibilityCondition?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isRequired` field. */
  isRequired?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isEditable` field. */
  isEditable?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `validation` field. */
  validation?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `defaultValue` field. */
  defaultValue?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `validationMessage` field. */
  validationMessage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `helpText` field. */
  helpText?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `parameters` field. */
  parameters?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `reviewability` field. */
  reviewability?: Maybe<Reviewability>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateVersion` field. */
  templateVersion?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `TemplateElement` values. */
export type TemplateElementsConnection = {
  __typename?: 'TemplateElementsConnection';
  /** A list of `TemplateElement` objects. */
  nodes: Array<Maybe<TemplateElement>>;
  /** A list of edges which contains the `TemplateElement` and cursor to aid in pagination. */
  edges: Array<TemplateElementsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateElement` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `TemplateElement` edge in the connection. */
export type TemplateElementsEdge = {
  __typename?: 'TemplateElementsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateElement` at the end of the edge. */
  node?: Maybe<TemplateElement>;
};

/** Methods to use when ordering `ApplicationResponse`. */
export enum ApplicationResponsesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TemplateElementIdAsc = 'TEMPLATE_ELEMENT_ID_ASC',
  TemplateElementIdDesc = 'TEMPLATE_ELEMENT_ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  IsValidAsc = 'IS_VALID_ASC',
  IsValidDesc = 'IS_VALID_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  TimeSubmittedAsc = 'TIME_SUBMITTED_ASC',
  TimeSubmittedDesc = 'TIME_SUBMITTED_DESC',
  EvaluatedParametersAsc = 'EVALUATED_PARAMETERS_ASC',
  EvaluatedParametersDesc = 'EVALUATED_PARAMETERS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ApplicationResponse` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationResponseCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateElementId` field. */
  templateElementId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ApplicationResponseStatus>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isValid` field. */
  isValid?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeSubmitted` field. */
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `evaluatedParameters` field. */
  evaluatedParameters?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `ApplicationResponse` values. */
export type ApplicationResponsesConnection = {
  __typename?: 'ApplicationResponsesConnection';
  /** A list of `ApplicationResponse` objects. */
  nodes: Array<Maybe<ApplicationResponse>>;
  /** A list of edges which contains the `ApplicationResponse` and cursor to aid in pagination. */
  edges: Array<ApplicationResponsesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationResponse` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ApplicationResponse` edge in the connection. */
export type ApplicationResponsesEdge = {
  __typename?: 'ApplicationResponsesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationResponse` at the end of the edge. */
  node?: Maybe<ApplicationResponse>;
};

/** Methods to use when ordering `ReviewResponse`. */
export enum ReviewResponsesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  DecisionAsc = 'DECISION_ASC',
  DecisionDesc = 'DECISION_DESC',
  ApplicationResponseIdAsc = 'APPLICATION_RESPONSE_ID_ASC',
  ApplicationResponseIdDesc = 'APPLICATION_RESPONSE_ID_DESC',
  ReviewResponseLinkIdAsc = 'REVIEW_RESPONSE_LINK_ID_ASC',
  ReviewResponseLinkIdDesc = 'REVIEW_RESPONSE_LINK_ID_DESC',
  OriginalReviewResponseIdAsc = 'ORIGINAL_REVIEW_RESPONSE_ID_ASC',
  OriginalReviewResponseIdDesc = 'ORIGINAL_REVIEW_RESPONSE_ID_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  TimeSubmittedAsc = 'TIME_SUBMITTED_ASC',
  TimeSubmittedDesc = 'TIME_SUBMITTED_DESC',
  IsVisibleToApplicantAsc = 'IS_VISIBLE_TO_APPLICANT_ASC',
  IsVisibleToApplicantDesc = 'IS_VISIBLE_TO_APPLICANT_DESC',
  IsLatestReviewAsc = 'IS_LATEST_REVIEW_ASC',
  IsLatestReviewDesc = 'IS_LATEST_REVIEW_DESC',
  TemplateElementIdAsc = 'TEMPLATE_ELEMENT_ID_ASC',
  TemplateElementIdDesc = 'TEMPLATE_ELEMENT_ID_DESC',
  RecommendedApplicantVisibilityAsc = 'RECOMMENDED_APPLICANT_VISIBILITY_ASC',
  RecommendedApplicantVisibilityDesc = 'RECOMMENDED_APPLICANT_VISIBILITY_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ReviewResponse` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewResponseCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `decision` field. */
  decision?: Maybe<ReviewResponseDecision>;
  /** Checks for equality with the object’s `applicationResponseId` field. */
  applicationResponseId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewResponseLinkId` field. */
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `originalReviewResponseId` field. */
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeSubmitted` field. */
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isVisibleToApplicant` field. */
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isLatestReview` field. */
  isLatestReview?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `templateElementId` field. */
  templateElementId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `recommendedApplicantVisibility` field. */
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ReviewResponseStatus>;
};

/** A connection to a list of `ReviewResponse` values. */
export type ReviewResponsesConnection = {
  __typename?: 'ReviewResponsesConnection';
  /** A list of `ReviewResponse` objects. */
  nodes: Array<Maybe<ReviewResponse>>;
  /** A list of edges which contains the `ReviewResponse` and cursor to aid in pagination. */
  edges: Array<ReviewResponsesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewResponse` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ReviewResponse = Node & {
  __typename?: 'ReviewResponse';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponsesByReviewResponseLinkId: ReviewResponsesConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponsesByOriginalReviewResponseId: ReviewResponsesConnection;
};


export type ReviewResponseReviewResponsesByReviewResponseLinkIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};


export type ReviewResponseReviewResponsesByOriginalReviewResponseIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
  condition?: Maybe<ReviewResponseCondition>;
  filter?: Maybe<ReviewResponseFilter>;
};

/** A `ReviewResponse` edge in the connection. */
export type ReviewResponsesEdge = {
  __typename?: 'ReviewResponsesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewResponse` at the end of the edge. */
  node?: Maybe<ReviewResponse>;
};

/** A `File` edge in the connection. */
export type FilesEdge = {
  __typename?: 'FilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `File` at the end of the edge. */
  node?: Maybe<File>;
};

/** A `ApplicationNote` edge in the connection. */
export type ApplicationNotesEdge = {
  __typename?: 'ApplicationNotesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationNote` at the end of the edge. */
  node?: Maybe<ApplicationNote>;
};

/** Methods to use when ordering `OrganisationApplicationJoin`. */
export enum OrganisationApplicationJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `OrganisationApplicationJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type OrganisationApplicationJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `OrganisationApplicationJoin` values. */
export type OrganisationApplicationJoinsConnection = {
  __typename?: 'OrganisationApplicationJoinsConnection';
  /** A list of `OrganisationApplicationJoin` objects. */
  nodes: Array<Maybe<OrganisationApplicationJoin>>;
  /** A list of edges which contains the `OrganisationApplicationJoin` and cursor to aid in pagination. */
  edges: Array<OrganisationApplicationJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `OrganisationApplicationJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type OrganisationApplicationJoin = Node & {
  __typename?: 'OrganisationApplicationJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  organisationId: Scalars['Int'];
  /** Reads a single `Application` that is related to this `OrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `Organisation` that is related to this `OrganisationApplicationJoin`. */
  organisation?: Maybe<Organisation>;
};

/** A `OrganisationApplicationJoin` edge in the connection. */
export type OrganisationApplicationJoinsEdge = {
  __typename?: 'OrganisationApplicationJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `OrganisationApplicationJoin` at the end of the edge. */
  node?: Maybe<OrganisationApplicationJoin>;
};

/** Methods to use when ordering `PermissionJoin`. */
export enum PermissionJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `PermissionJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PermissionJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `PermissionJoin` values. */
export type PermissionJoinsConnection = {
  __typename?: 'PermissionJoinsConnection';
  /** A list of `PermissionJoin` objects. */
  nodes: Array<Maybe<PermissionJoin>>;
  /** A list of edges which contains the `PermissionJoin` and cursor to aid in pagination. */
  edges: Array<PermissionJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type PermissionJoin = Node & {
  __typename?: 'PermissionJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  permissionNameId: Scalars['Int'];
  isActive?: Maybe<Scalars['Boolean']>;
  /** Reads a single `User` that is related to this `PermissionJoin`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
};

export type PermissionName = Node & {
  __typename?: 'PermissionName';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins: PermissionJoinsConnection;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions: TemplatePermissionsConnection;
};


export type PermissionNamePermissionJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
  condition?: Maybe<PermissionJoinCondition>;
  filter?: Maybe<PermissionJoinFilter>;
};


export type PermissionNameTemplatePermissionsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
  condition?: Maybe<TemplatePermissionCondition>;
  filter?: Maybe<TemplatePermissionFilter>;
};

export type PermissionPolicy = Node & {
  __typename?: 'PermissionPolicy';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
  type?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  defaultRestrictions?: Maybe<Scalars['JSON']>;
  /** Reads and enables pagination through a set of `PermissionName`. */
  permissionNames: PermissionNamesConnection;
};


export type PermissionPolicyPermissionNamesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<PermissionNamesOrderBy>>;
  condition?: Maybe<PermissionNameCondition>;
  filter?: Maybe<PermissionNameFilter>;
};

/** Methods to use when ordering `PermissionName`. */
export enum PermissionNamesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  PermissionPolicyIdAsc = 'PERMISSION_POLICY_ID_ASC',
  PermissionPolicyIdDesc = 'PERMISSION_POLICY_ID_DESC',
  IsSystemOrgPermissionAsc = 'IS_SYSTEM_ORG_PERMISSION_ASC',
  IsSystemOrgPermissionDesc = 'IS_SYSTEM_ORG_PERMISSION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `PermissionName` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PermissionNameCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permissionPolicyId` field. */
  permissionPolicyId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `PermissionName` values. */
export type PermissionNamesConnection = {
  __typename?: 'PermissionNamesConnection';
  /** A list of `PermissionName` objects. */
  nodes: Array<Maybe<PermissionName>>;
  /** A list of edges which contains the `PermissionName` and cursor to aid in pagination. */
  edges: Array<PermissionNamesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionName` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PermissionName` edge in the connection. */
export type PermissionNamesEdge = {
  __typename?: 'PermissionNamesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PermissionName` at the end of the edge. */
  node?: Maybe<PermissionName>;
};

/** Methods to use when ordering `TemplatePermission`. */
export enum TemplatePermissionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  CanSelfAssignAsc = 'CAN_SELF_ASSIGN_ASC',
  CanSelfAssignDesc = 'CAN_SELF_ASSIGN_DESC',
  CanMakeFinalDecisionAsc = 'CAN_MAKE_FINAL_DECISION_ASC',
  CanMakeFinalDecisionDesc = 'CAN_MAKE_FINAL_DECISION_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  RestrictionsAsc = 'RESTRICTIONS_ASC',
  RestrictionsDesc = 'RESTRICTIONS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplatePermission` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplatePermissionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `canSelfAssign` field. */
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `restrictions` field. */
  restrictions?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `TemplatePermission` values. */
export type TemplatePermissionsConnection = {
  __typename?: 'TemplatePermissionsConnection';
  /** A list of `TemplatePermission` objects. */
  nodes: Array<Maybe<TemplatePermission>>;
  /** A list of edges which contains the `TemplatePermission` and cursor to aid in pagination. */
  edges: Array<TemplatePermissionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplatePermission` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type TemplatePermission = Node & {
  __typename?: 'TemplatePermission';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  permissionNameId?: Maybe<Scalars['Int']>;
  templateId: Scalars['Int'];
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign: Scalars['Boolean'];
  canMakeFinalDecision: Scalars['Boolean'];
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
};

/** A `TemplatePermission` edge in the connection. */
export type TemplatePermissionsEdge = {
  __typename?: 'TemplatePermissionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplatePermission` at the end of the edge. */
  node?: Maybe<TemplatePermission>;
};

/** A `PermissionJoin` edge in the connection. */
export type PermissionJoinsEdge = {
  __typename?: 'PermissionJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PermissionJoin` at the end of the edge. */
  node?: Maybe<PermissionJoin>;
};

/** Methods to use when ordering `ReviewAssignment`. */
export enum ReviewAssignmentsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AssignerIdAsc = 'ASSIGNER_ID_ASC',
  AssignerIdDesc = 'ASSIGNER_ID_DESC',
  ReviewerIdAsc = 'REVIEWER_ID_ASC',
  ReviewerIdDesc = 'REVIEWER_ID_DESC',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TimeStageCreatedAsc = 'TIME_STAGE_CREATED_ASC',
  TimeStageCreatedDesc = 'TIME_STAGE_CREATED_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  AssignedSectionsAsc = 'ASSIGNED_SECTIONS_ASC',
  AssignedSectionsDesc = 'ASSIGNED_SECTIONS_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  LevelIdAsc = 'LEVEL_ID_ASC',
  LevelIdDesc = 'LEVEL_ID_DESC',
  IsLastLevelAsc = 'IS_LAST_LEVEL_ASC',
  IsLastLevelDesc = 'IS_LAST_LEVEL_DESC',
  IsLastStageAsc = 'IS_LAST_STAGE_ASC',
  IsLastStageDesc = 'IS_LAST_STAGE_DESC',
  IsLockedAsc = 'IS_LOCKED_ASC',
  IsLockedDesc = 'IS_LOCKED_DESC',
  IsFinalDecisionAsc = 'IS_FINAL_DECISION_ASC',
  IsFinalDecisionDesc = 'IS_FINAL_DECISION_DESC',
  IsSelfAssignableAsc = 'IS_SELF_ASSIGNABLE_ASC',
  IsSelfAssignableDesc = 'IS_SELF_ASSIGNABLE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ReviewAssignment` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewAssignmentCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignerId` field. */
  assignerId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewerId` field. */
  reviewerId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `timeStageCreated` field. */
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ReviewAssignmentStatus>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `assignedSections` field. */
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `levelId` field. */
  levelId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isLastLevel` field. */
  isLastLevel?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isLastStage` field. */
  isLastStage?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isLocked` field. */
  isLocked?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isFinalDecision` field. */
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isSelfAssignable` field. */
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `ReviewAssignment` values. */
export type ReviewAssignmentsConnection = {
  __typename?: 'ReviewAssignmentsConnection';
  /** A list of `ReviewAssignment` objects. */
  nodes: Array<Maybe<ReviewAssignment>>;
  /** A list of edges which contains the `ReviewAssignment` and cursor to aid in pagination. */
  edges: Array<ReviewAssignmentsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewAssignment` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `ReviewAssignment` edge in the connection. */
export type ReviewAssignmentsEdge = {
  __typename?: 'ReviewAssignmentsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewAssignment` at the end of the edge. */
  node?: Maybe<ReviewAssignment>;
};

/** Methods to use when ordering `ReviewAssignmentAssignerJoin`. */
export enum ReviewAssignmentAssignerJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AssignerIdAsc = 'ASSIGNER_ID_ASC',
  AssignerIdDesc = 'ASSIGNER_ID_DESC',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ReviewAssignmentAssignerJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewAssignmentAssignerJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `assignerId` field. */
  assignerId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `ReviewAssignmentAssignerJoin` values. */
export type ReviewAssignmentAssignerJoinsConnection = {
  __typename?: 'ReviewAssignmentAssignerJoinsConnection';
  /** A list of `ReviewAssignmentAssignerJoin` objects. */
  nodes: Array<Maybe<ReviewAssignmentAssignerJoin>>;
  /** A list of edges which contains the `ReviewAssignmentAssignerJoin` and cursor to aid in pagination. */
  edges: Array<ReviewAssignmentAssignerJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewAssignmentAssignerJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ReviewAssignmentAssignerJoin = Node & {
  __typename?: 'ReviewAssignmentAssignerJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  reviewAssignmentId: Scalars['Int'];
  /** Reads a single `User` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
};

/** A `ReviewAssignmentAssignerJoin` edge in the connection. */
export type ReviewAssignmentAssignerJoinsEdge = {
  __typename?: 'ReviewAssignmentAssignerJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewAssignmentAssignerJoin` at the end of the edge. */
  node?: Maybe<ReviewAssignmentAssignerJoin>;
};

/** Methods to use when ordering `UserOrganisation`. */
export enum UserOrganisationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `UserOrganisation` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserOrganisationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: Maybe<Scalars['String']>;
};

/** A connection to a list of `UserOrganisation` values. */
export type UserOrganisationsConnection = {
  __typename?: 'UserOrganisationsConnection';
  /** A list of `UserOrganisation` objects. */
  nodes: Array<Maybe<UserOrganisation>>;
  /** A list of edges which contains the `UserOrganisation` and cursor to aid in pagination. */
  edges: Array<UserOrganisationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserOrganisation` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type UserOrganisation = Node & {
  __typename?: 'UserOrganisation';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
  userRole?: Maybe<Scalars['String']>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** Reads and enables pagination through a set of `UserOrganisationApplicationJoin`. */
  userOrganisationApplicationJoins: UserOrganisationApplicationJoinsConnection;
};


export type UserOrganisationUserOrganisationApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
  condition?: Maybe<UserOrganisationApplicationJoinCondition>;
  filter?: Maybe<UserOrganisationApplicationJoinFilter>;
};

/** Methods to use when ordering `UserOrganisationApplicationJoin`. */
export enum UserOrganisationApplicationJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  UserOrganisationIdAsc = 'USER_ORGANISATION_ID_ASC',
  UserOrganisationIdDesc = 'USER_ORGANISATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `UserOrganisationApplicationJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserOrganisationApplicationJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userOrganisationId` field. */
  userOrganisationId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `UserOrganisationApplicationJoin` values. */
export type UserOrganisationApplicationJoinsConnection = {
  __typename?: 'UserOrganisationApplicationJoinsConnection';
  /** A list of `UserOrganisationApplicationJoin` objects. */
  nodes: Array<Maybe<UserOrganisationApplicationJoin>>;
  /** A list of edges which contains the `UserOrganisationApplicationJoin` and cursor to aid in pagination. */
  edges: Array<UserOrganisationApplicationJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserOrganisationApplicationJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type UserOrganisationApplicationJoin = Node & {
  __typename?: 'UserOrganisationApplicationJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  userOrganisationId: Scalars['Int'];
  /** Reads a single `Application` that is related to this `UserOrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `UserOrganisation` that is related to this `UserOrganisationApplicationJoin`. */
  userOrganisation?: Maybe<UserOrganisation>;
};

/** A `UserOrganisationApplicationJoin` edge in the connection. */
export type UserOrganisationApplicationJoinsEdge = {
  __typename?: 'UserOrganisationApplicationJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserOrganisationApplicationJoin` at the end of the edge. */
  node?: Maybe<UserOrganisationApplicationJoin>;
};

/** A `UserOrganisation` edge in the connection. */
export type UserOrganisationsEdge = {
  __typename?: 'UserOrganisationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserOrganisation` at the end of the edge. */
  node?: Maybe<UserOrganisation>;
};

export type TemplateStage = Node & {
  __typename?: 'TemplateStage';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId: Scalars['Int'];
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistoriesByStageId: ApplicationStageHistoriesConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByStageId: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `TemplateStageReviewLevel`. */
  templateStageReviewLevelsByStageId: TemplateStageReviewLevelsConnection;
};


export type TemplateStageApplicationStageHistoriesByStageIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
  condition?: Maybe<ApplicationStageHistoryCondition>;
  filter?: Maybe<ApplicationStageHistoryFilter>;
};


export type TemplateStageReviewAssignmentsByStageIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};


export type TemplateStageTemplateStageReviewLevelsByStageIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateStageReviewLevelsOrderBy>>;
  condition?: Maybe<TemplateStageReviewLevelCondition>;
  filter?: Maybe<TemplateStageReviewLevelFilter>;
};

/** Methods to use when ordering `ApplicationStageHistory`. */
export enum ApplicationStageHistoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ApplicationStageHistory` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationStageHistoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `ApplicationStageHistory` values. */
export type ApplicationStageHistoriesConnection = {
  __typename?: 'ApplicationStageHistoriesConnection';
  /** A list of `ApplicationStageHistory` objects. */
  nodes: Array<Maybe<ApplicationStageHistory>>;
  /** A list of edges which contains the `ApplicationStageHistory` and cursor to aid in pagination. */
  edges: Array<ApplicationStageHistoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageHistory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationStageHistory = Node & {
  __typename?: 'ApplicationStageHistory';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  stageId: Scalars['Int'];
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
  /** Reads and enables pagination through a set of `ApplicationStatusHistory`. */
  applicationStatusHistories: ApplicationStatusHistoriesConnection;
};


export type ApplicationStageHistoryApplicationStatusHistoriesArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ApplicationStatusHistoriesOrderBy>>;
  condition?: Maybe<ApplicationStatusHistoryCondition>;
  filter?: Maybe<ApplicationStatusHistoryFilter>;
};

/** Methods to use when ordering `ApplicationStatusHistory`. */
export enum ApplicationStatusHistoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationStageHistoryIdAsc = 'APPLICATION_STAGE_HISTORY_ID_ASC',
  ApplicationStageHistoryIdDesc = 'APPLICATION_STAGE_HISTORY_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ApplicationStatusHistory` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationStatusHistoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationStageHistoryId` field. */
  applicationStageHistoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ApplicationStatus>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `ApplicationStatusHistory` values. */
export type ApplicationStatusHistoriesConnection = {
  __typename?: 'ApplicationStatusHistoriesConnection';
  /** A list of `ApplicationStatusHistory` objects. */
  nodes: Array<Maybe<ApplicationStatusHistory>>;
  /** A list of edges which contains the `ApplicationStatusHistory` and cursor to aid in pagination. */
  edges: Array<ApplicationStatusHistoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStatusHistory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationStatusHistory = Node & {
  __typename?: 'ApplicationStatusHistory';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationStageHistoryId: Scalars['Int'];
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationId?: Maybe<Scalars['Int']>;
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
};

/** A `ApplicationStatusHistory` edge in the connection. */
export type ApplicationStatusHistoriesEdge = {
  __typename?: 'ApplicationStatusHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationStatusHistory` at the end of the edge. */
  node?: Maybe<ApplicationStatusHistory>;
};

/** A `ApplicationStageHistory` edge in the connection. */
export type ApplicationStageHistoriesEdge = {
  __typename?: 'ApplicationStageHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationStageHistory` at the end of the edge. */
  node?: Maybe<ApplicationStageHistory>;
};

/** Methods to use when ordering `TemplateStageReviewLevel`. */
export enum TemplateStageReviewLevelsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateStageReviewLevel` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateStageReviewLevelCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `number` field. */
  number?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
};

/** A connection to a list of `TemplateStageReviewLevel` values. */
export type TemplateStageReviewLevelsConnection = {
  __typename?: 'TemplateStageReviewLevelsConnection';
  /** A list of `TemplateStageReviewLevel` objects. */
  nodes: Array<Maybe<TemplateStageReviewLevel>>;
  /** A list of edges which contains the `TemplateStageReviewLevel` and cursor to aid in pagination. */
  edges: Array<TemplateStageReviewLevelsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateStageReviewLevel` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type TemplateStageReviewLevel = Node & {
  __typename?: 'TemplateStageReviewLevel';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  stageId: Scalars['Int'];
  number: Scalars['Int'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByLevelId: ReviewAssignmentsConnection;
};


export type TemplateStageReviewLevelReviewAssignmentsByLevelIdArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
  condition?: Maybe<ReviewAssignmentCondition>;
  filter?: Maybe<ReviewAssignmentFilter>;
};

/** A `TemplateStageReviewLevel` edge in the connection. */
export type TemplateStageReviewLevelsEdge = {
  __typename?: 'TemplateStageReviewLevelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateStageReviewLevel` at the end of the edge. */
  node?: Maybe<TemplateStageReviewLevel>;
};

/** Methods to use when ordering `ReviewDecision`. */
export enum ReviewDecisionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  DecisionAsc = 'DECISION_ASC',
  DecisionDesc = 'DECISION_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ReviewDecision` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewDecisionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `decision` field. */
  decision?: Maybe<Decision>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `ReviewDecision` values. */
export type ReviewDecisionsConnection = {
  __typename?: 'ReviewDecisionsConnection';
  /** A list of `ReviewDecision` objects. */
  nodes: Array<Maybe<ReviewDecision>>;
  /** A list of edges which contains the `ReviewDecision` and cursor to aid in pagination. */
  edges: Array<ReviewDecisionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewDecision` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ReviewDecision = Node & {
  __typename?: 'ReviewDecision';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  reviewId: Scalars['Int'];
  decision?: Maybe<Decision>;
  comment?: Maybe<Scalars['String']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
};

/** A `ReviewDecision` edge in the connection. */
export type ReviewDecisionsEdge = {
  __typename?: 'ReviewDecisionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewDecision` at the end of the edge. */
  node?: Maybe<ReviewDecision>;
};

/** Methods to use when ordering `Notification`. */
export enum NotificationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  EmailRecipientsAsc = 'EMAIL_RECIPIENTS_ASC',
  EmailRecipientsDesc = 'EMAIL_RECIPIENTS_DESC',
  SubjectAsc = 'SUBJECT_ASC',
  SubjectDesc = 'SUBJECT_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  AttachmentsAsc = 'ATTACHMENTS_ASC',
  AttachmentsDesc = 'ATTACHMENTS_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  IsReadAsc = 'IS_READ_ASC',
  IsReadDesc = 'IS_READ_DESC',
  EmailSentAsc = 'EMAIL_SENT_ASC',
  EmailSentDesc = 'EMAIL_SENT_DESC',
  EmailServerLogAsc = 'EMAIL_SERVER_LOG_ASC',
  EmailServerLogDesc = 'EMAIL_SERVER_LOG_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Notification` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type NotificationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `emailRecipients` field. */
  emailRecipients?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `subject` field. */
  subject?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `message` field. */
  message?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `attachments` field. */
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isRead` field. */
  isRead?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `emailSent` field. */
  emailSent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `emailServerLog` field. */
  emailServerLog?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Notification` values. */
export type NotificationsConnection = {
  __typename?: 'NotificationsConnection';
  /** A list of `Notification` objects. */
  nodes: Array<Maybe<Notification>>;
  /** A list of edges which contains the `Notification` and cursor to aid in pagination. */
  edges: Array<NotificationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Notification` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type Notification = Node & {
  __typename?: 'Notification';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  userId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp: Scalars['Datetime'];
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  /** Reads a single `User` that is related to this `Notification`. */
  user?: Maybe<User>;
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
};

/** A `Notification` edge in the connection. */
export type NotificationsEdge = {
  __typename?: 'NotificationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Notification` at the end of the edge. */
  node?: Maybe<Notification>;
};

/** Methods to use when ordering `ReviewStatusHistory`. */
export enum ReviewStatusHistoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ReviewStatusHistory` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewStatusHistoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ReviewStatus>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: Maybe<Scalars['Boolean']>;
};

/** A connection to a list of `ReviewStatusHistory` values. */
export type ReviewStatusHistoriesConnection = {
  __typename?: 'ReviewStatusHistoriesConnection';
  /** A list of `ReviewStatusHistory` objects. */
  nodes: Array<Maybe<ReviewStatusHistory>>;
  /** A list of edges which contains the `ReviewStatusHistory` and cursor to aid in pagination. */
  edges: Array<ReviewStatusHistoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewStatusHistory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ReviewStatusHistory = Node & {
  __typename?: 'ReviewStatusHistory';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  reviewId: Scalars['Int'];
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
};

/** A `ReviewStatusHistory` edge in the connection. */
export type ReviewStatusHistoriesEdge = {
  __typename?: 'ReviewStatusHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewStatusHistory` at the end of the edge. */
  node?: Maybe<ReviewStatusHistory>;
};

/** A `Review` edge in the connection. */
export type ReviewsEdge = {
  __typename?: 'ReviewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Review` at the end of the edge. */
  node?: Maybe<Review>;
};

/** Methods to use when ordering `TriggerSchedule`. */
export enum TriggerSchedulesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  TimeScheduledAsc = 'TIME_SCHEDULED_ASC',
  TimeScheduledDesc = 'TIME_SCHEDULED_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  EditorUserIdAsc = 'EDITOR_USER_ID_ASC',
  EditorUserIdDesc = 'EDITOR_USER_ID_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TriggerSchedule` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TriggerScheduleCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `timeScheduled` field. */
  timeScheduled?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `data` field. */
  data?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `editorUserId` field. */
  editorUserId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
};

/** A connection to a list of `TriggerSchedule` values. */
export type TriggerSchedulesConnection = {
  __typename?: 'TriggerSchedulesConnection';
  /** A list of `TriggerSchedule` objects. */
  nodes: Array<Maybe<TriggerSchedule>>;
  /** A list of edges which contains the `TriggerSchedule` and cursor to aid in pagination. */
  edges: Array<TriggerSchedulesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TriggerSchedule` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type TriggerSchedule = Node & {
  __typename?: 'TriggerSchedule';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled: Scalars['Datetime'];
  applicationId: Scalars['Int'];
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `TriggerSchedule`. */
  editorUser?: Maybe<User>;
};

/** A `TriggerSchedule` edge in the connection. */
export type TriggerSchedulesEdge = {
  __typename?: 'TriggerSchedulesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TriggerSchedule` at the end of the edge. */
  node?: Maybe<TriggerSchedule>;
};

/** Methods to use when ordering `UserApplicationJoin`. */
export enum UserApplicationJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `UserApplicationJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserApplicationJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `UserApplicationJoin` values. */
export type UserApplicationJoinsConnection = {
  __typename?: 'UserApplicationJoinsConnection';
  /** A list of `UserApplicationJoin` objects. */
  nodes: Array<Maybe<UserApplicationJoin>>;
  /** A list of edges which contains the `UserApplicationJoin` and cursor to aid in pagination. */
  edges: Array<UserApplicationJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserApplicationJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type UserApplicationJoin = Node & {
  __typename?: 'UserApplicationJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  userId: Scalars['Int'];
  /** Reads a single `Application` that is related to this `UserApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `UserApplicationJoin`. */
  user?: Maybe<User>;
};

/** A `UserApplicationJoin` edge in the connection. */
export type UserApplicationJoinsEdge = {
  __typename?: 'UserApplicationJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserApplicationJoin` at the end of the edge. */
  node?: Maybe<UserApplicationJoin>;
};

/** Methods to use when ordering `ActivityLog`. */
export enum ActivityLogsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  TableAsc = 'TABLE_ASC',
  TableDesc = 'TABLE_DESC',
  RecordIdAsc = 'RECORD_ID_ASC',
  RecordIdDesc = 'RECORD_ID_DESC',
  DetailsAsc = 'DETAILS_ASC',
  DetailsDesc = 'DETAILS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ActivityLog` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ActivityLogCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<EventType>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `table` field. */
  table?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordId` field. */
  recordId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `details` field. */
  details?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `ActivityLog` values. */
export type ActivityLogsConnection = {
  __typename?: 'ActivityLogsConnection';
  /** A list of `ActivityLog` objects. */
  nodes: Array<Maybe<ActivityLog>>;
  /** A list of edges which contains the `ActivityLog` and cursor to aid in pagination. */
  edges: Array<ActivityLogsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActivityLog` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ActivityLog = Node & {
  __typename?: 'ActivityLog';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  type: EventType;
  value: Scalars['String'];
  timestamp: Scalars['Datetime'];
  applicationId?: Maybe<Scalars['Int']>;
  table: Scalars['String'];
  recordId?: Maybe<Scalars['Int']>;
  details: Scalars['JSON'];
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
};

/** A `ActivityLog` edge in the connection. */
export type ActivityLogsEdge = {
  __typename?: 'ActivityLogsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ActivityLog` at the end of the edge. */
  node?: Maybe<ActivityLog>;
};

/** Methods to use when ordering `DataTableProductApplicationJoin`. */
export enum DataTableProductApplicationJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  DataTableProductIdAsc = 'DATA_TABLE_PRODUCT_ID_ASC',
  DataTableProductIdDesc = 'DATA_TABLE_PRODUCT_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableProductApplicationJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableProductApplicationJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `dataTableProductId` field. */
  dataTableProductId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `DataTableProductApplicationJoin` values. */
export type DataTableProductApplicationJoinsConnection = {
  __typename?: 'DataTableProductApplicationJoinsConnection';
  /** A list of `DataTableProductApplicationJoin` objects. */
  nodes: Array<Maybe<DataTableProductApplicationJoin>>;
  /** A list of edges which contains the `DataTableProductApplicationJoin` and cursor to aid in pagination. */
  edges: Array<DataTableProductApplicationJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableProductApplicationJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableProductApplicationJoin = Node & {
  __typename?: 'DataTableProductApplicationJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  dataTableProductId: Scalars['Int'];
  /** Reads a single `Application` that is related to this `DataTableProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `DataTableProduct` that is related to this `DataTableProductApplicationJoin`. */
  dataTableProduct?: Maybe<DataTableProduct>;
};

export type DataTableProduct = Node & {
  __typename?: 'DataTableProduct';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  origin?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  registration?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  responsiblePerson?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  atcClass?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['Int']>;
  dimensions?: Maybe<Scalars['JSON']>;
  dosageForm?: Maybe<Scalars['String']>;
  applicantId?: Maybe<Scalars['Int']>;
  companyName?: Maybe<Scalars['String']>;
  formulations?: Maybe<Scalars['JSON']>;
  prescription?: Maybe<Scalars['String']>;
  genericNames?: Maybe<Scalars['JSON']>;
  medicineType?: Maybe<Scalars['String']>;
  applicationType?: Maybe<Scalars['String']>;
  primaryContainer?: Maybe<Scalars['String']>;
  shelfLifeOpened?: Maybe<Scalars['String']>;
  manufacturersList?: Maybe<Scalars['JSON']>;
  shelfLifeProposed?: Maybe<Scalars['String']>;
  administrationRoute?: Maybe<Scalars['String']>;
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  storageConditionsOpened?: Maybe<Scalars['String']>;
  storageConditionsProposed?: Maybe<Scalars['String']>;
  genericNamesFilterData?: Maybe<Scalars['String']>;
  manufacturersListFilterData?: Maybe<Scalars['String']>;
  /** Reads and enables pagination through a set of `DataTableProductApplicationJoin`. */
  dataTableProductApplicationJoins: DataTableProductApplicationJoinsConnection;
};


export type DataTableProductDataTableProductApplicationJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
  condition?: Maybe<DataTableProductApplicationJoinCondition>;
  filter?: Maybe<DataTableProductApplicationJoinFilter>;
};

/** A `DataTableProductApplicationJoin` edge in the connection. */
export type DataTableProductApplicationJoinsEdge = {
  __typename?: 'DataTableProductApplicationJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableProductApplicationJoin` at the end of the edge. */
  node?: Maybe<DataTableProductApplicationJoin>;
};

/** Methods to use when ordering `ProductApplicationJoin`. */
export enum ProductApplicationJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  ProductIdAsc = 'PRODUCT_ID_ASC',
  ProductIdDesc = 'PRODUCT_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ProductApplicationJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ProductApplicationJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `productId` field. */
  productId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `ProductApplicationJoin` values. */
export type ProductApplicationJoinsConnection = {
  __typename?: 'ProductApplicationJoinsConnection';
  /** A list of `ProductApplicationJoin` objects. */
  nodes: Array<Maybe<ProductApplicationJoin>>;
  /** A list of edges which contains the `ProductApplicationJoin` and cursor to aid in pagination. */
  edges: Array<ProductApplicationJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ProductApplicationJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ProductApplicationJoin = Node & {
  __typename?: 'ProductApplicationJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  applicationId: Scalars['Int'];
  productId: Scalars['Int'];
  /** Reads a single `Application` that is related to this `ProductApplicationJoin`. */
  application?: Maybe<Application>;
};

/** A `ProductApplicationJoin` edge in the connection. */
export type ProductApplicationJoinsEdge = {
  __typename?: 'ProductApplicationJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ProductApplicationJoin` at the end of the edge. */
  node?: Maybe<ProductApplicationJoin>;
};

/** Methods to use when ordering `Verification`. */
export enum VerificationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UniqueIdAsc = 'UNIQUE_ID_ASC',
  UniqueIdDesc = 'UNIQUE_ID_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeExpiredAsc = 'TIME_EXPIRED_ASC',
  TimeExpiredDesc = 'TIME_EXPIRED_DESC',
  IsVerifiedAsc = 'IS_VERIFIED_ASC',
  IsVerifiedDesc = 'IS_VERIFIED_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Verification` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type VerificationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `uniqueId` field. */
  uniqueId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `message` field. */
  message?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `data` field. */
  data?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `timeExpired` field. */
  timeExpired?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `isVerified` field. */
  isVerified?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
};

/** A connection to a list of `Verification` values. */
export type VerificationsConnection = {
  __typename?: 'VerificationsConnection';
  /** A list of `Verification` objects. */
  nodes: Array<Maybe<Verification>>;
  /** A list of edges which contains the `Verification` and cursor to aid in pagination. */
  edges: Array<VerificationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Verification` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type Verification = Node & {
  __typename?: 'Verification';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  uniqueId: Scalars['String'];
  applicationId: Scalars['Int'];
  eventCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeExpired?: Maybe<Scalars['Datetime']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
};

/** A `Verification` edge in the connection. */
export type VerificationsEdge = {
  __typename?: 'VerificationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Verification` at the end of the edge. */
  node?: Maybe<Verification>;
};

/** A `Application` edge in the connection. */
export type ApplicationsEdge = {
  __typename?: 'ApplicationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Application` at the end of the edge. */
  node?: Maybe<Application>;
};

/** Methods to use when ordering `TemplateAction`. */
export enum TemplateActionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ActionCodeAsc = 'ACTION_CODE_ASC',
  ActionCodeDesc = 'ACTION_CODE_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  ConditionAsc = 'CONDITION_ASC',
  ConditionDesc = 'CONDITION_DESC',
  ParameterQueriesAsc = 'PARAMETER_QUERIES_ASC',
  ParameterQueriesDesc = 'PARAMETER_QUERIES_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  SequenceAsc = 'SEQUENCE_ASC',
  SequenceDesc = 'SEQUENCE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateAction` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateActionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `actionCode` field. */
  actionCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: Maybe<Trigger>;
  /** Checks for equality with the object’s `condition` field. */
  condition?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `parameterQueries` field. */
  parameterQueries?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sequence` field. */
  sequence?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `TemplateAction` values. */
export type TemplateActionsConnection = {
  __typename?: 'TemplateActionsConnection';
  /** A list of `TemplateAction` objects. */
  nodes: Array<Maybe<TemplateAction>>;
  /** A list of edges which contains the `TemplateAction` and cursor to aid in pagination. */
  edges: Array<TemplateActionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateAction` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type TemplateAction = Node & {
  __typename?: 'TemplateAction';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  templateId: Scalars['Int'];
  code?: Maybe<Scalars['String']>;
  actionCode?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  trigger?: Maybe<Trigger>;
  condition?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  description?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  parametersQueriesString?: Maybe<Scalars['String']>;
};

/** A `TemplateAction` edge in the connection. */
export type TemplateActionsEdge = {
  __typename?: 'TemplateActionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateAction` at the end of the edge. */
  node?: Maybe<TemplateAction>;
};

/** Methods to use when ordering `TemplateStage`. */
export enum TemplateStagesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  ColourAsc = 'COLOUR_ASC',
  ColourDesc = 'COLOUR_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateStage` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateStageCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `number` field. */
  number?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `colour` field. */
  colour?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `TemplateStage` values. */
export type TemplateStagesConnection = {
  __typename?: 'TemplateStagesConnection';
  /** A list of `TemplateStage` objects. */
  nodes: Array<Maybe<TemplateStage>>;
  /** A list of edges which contains the `TemplateStage` and cursor to aid in pagination. */
  edges: Array<TemplateStagesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateStage` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `TemplateStage` edge in the connection. */
export type TemplateStagesEdge = {
  __typename?: 'TemplateStagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateStage` at the end of the edge. */
  node?: Maybe<TemplateStage>;
};

/** Methods to use when ordering `TemplateFilterJoin`. */
export enum TemplateFilterJoinsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  FilterIdAsc = 'FILTER_ID_ASC',
  FilterIdDesc = 'FILTER_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateFilterJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateFilterJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `filterId` field. */
  filterId?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `TemplateFilterJoin` values. */
export type TemplateFilterJoinsConnection = {
  __typename?: 'TemplateFilterJoinsConnection';
  /** A list of `TemplateFilterJoin` objects. */
  nodes: Array<Maybe<TemplateFilterJoin>>;
  /** A list of edges which contains the `TemplateFilterJoin` and cursor to aid in pagination. */
  edges: Array<TemplateFilterJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateFilterJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type TemplateFilterJoin = Node & {
  __typename?: 'TemplateFilterJoin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  templateId: Scalars['Int'];
  filterId: Scalars['Int'];
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
};

export type Filter = Node & {
  __typename?: 'Filter';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['JSON']>;
  userRole?: Maybe<PermissionPolicyType>;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins: TemplateFilterJoinsConnection;
};


export type FilterTemplateFilterJoinsArgs = {
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['Cursor']>;
  after?: Maybe<Scalars['Cursor']>;
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
  condition?: Maybe<TemplateFilterJoinCondition>;
  filter?: Maybe<TemplateFilterJoinFilter>;
};

/** A `TemplateFilterJoin` edge in the connection. */
export type TemplateFilterJoinsEdge = {
  __typename?: 'TemplateFilterJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateFilterJoin` at the end of the edge. */
  node?: Maybe<TemplateFilterJoin>;
};

/** Methods to use when ordering `TemplateSection`. */
export enum TemplateSectionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IndexAsc = 'INDEX_ASC',
  IndexDesc = 'INDEX_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateSection` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateSectionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `index` field. */
  index?: Maybe<Scalars['Int']>;
};

/** A connection to a list of `TemplateSection` values. */
export type TemplateSectionsConnection = {
  __typename?: 'TemplateSectionsConnection';
  /** A list of `TemplateSection` objects. */
  nodes: Array<Maybe<TemplateSection>>;
  /** A list of edges which contains the `TemplateSection` and cursor to aid in pagination. */
  edges: Array<TemplateSectionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateSection` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `TemplateSection` edge in the connection. */
export type TemplateSectionsEdge = {
  __typename?: 'TemplateSectionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateSection` at the end of the edge. */
  node?: Maybe<TemplateSection>;
};

/** A `ActionQueue` edge in the connection. */
export type ActionQueuesEdge = {
  __typename?: 'ActionQueuesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ActionQueue` at the end of the edge. */
  node?: Maybe<ActionQueue>;
};

/** Methods to use when ordering `ApplicationListShape`. */
export enum ApplicationListShapesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC',
  ApplicantAsc = 'APPLICANT_ASC',
  ApplicantDesc = 'APPLICANT_DESC',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  StageAsc = 'STAGE_ASC',
  StageDesc = 'STAGE_DESC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  LastActiveDateAsc = 'LAST_ACTIVE_DATE_ASC',
  LastActiveDateDesc = 'LAST_ACTIVE_DATE_DESC',
  ApplicantDeadlineAsc = 'APPLICANT_DEADLINE_ASC',
  ApplicantDeadlineDesc = 'APPLICANT_DEADLINE_DESC',
  AssignersAsc = 'ASSIGNERS_ASC',
  AssignersDesc = 'ASSIGNERS_DESC',
  ReviewersAsc = 'REVIEWERS_ASC',
  ReviewersDesc = 'REVIEWERS_DESC',
  ReviewerActionAsc = 'REVIEWER_ACTION_ASC',
  ReviewerActionDesc = 'REVIEWER_ACTION_DESC',
  AssignerActionAsc = 'ASSIGNER_ACTION_ASC',
  AssignerActionDesc = 'ASSIGNER_ACTION_DESC'
}

/** A condition to be used against `ApplicationListShape` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationListShapeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicant` field. */
  applicant?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ApplicationStatus>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `lastActiveDate` field. */
  lastActiveDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `applicantDeadline` field. */
  applicantDeadline?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `assigners` field. */
  assigners?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `reviewers` field. */
  reviewers?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `reviewerAction` field. */
  reviewerAction?: Maybe<ReviewerAction>;
  /** Checks for equality with the object’s `assignerAction` field. */
  assignerAction?: Maybe<AssignerAction>;
};

export enum ReviewerAction {
  SelfAssign = 'SELF_ASSIGN',
  StartReview = 'START_REVIEW',
  ViewReview = 'VIEW_REVIEW',
  ContinueReview = 'CONTINUE_REVIEW',
  MakeDecision = 'MAKE_DECISION',
  RestartReview = 'RESTART_REVIEW',
  UpdateReview = 'UPDATE_REVIEW',
  AwaitingResponse = 'AWAITING_RESPONSE'
}

export enum AssignerAction {
  Assign = 'ASSIGN',
  AssignLocked = 'ASSIGN_LOCKED',
  ReAssign = 'RE_ASSIGN'
}

/** A filter to be used against `ApplicationListShape` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationListShapeFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: Maybe<StringFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: Maybe<StringFilter>;
  /** Filter by the object’s `applicant` field. */
  applicant?: Maybe<StringFilter>;
  /** Filter by the object’s `orgName` field. */
  orgName?: Maybe<StringFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: Maybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: Maybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationStatusFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `lastActiveDate` field. */
  lastActiveDate?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `applicantDeadline` field. */
  applicantDeadline?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `assigners` field. */
  assigners?: Maybe<StringListFilter>;
  /** Filter by the object’s `reviewers` field. */
  reviewers?: Maybe<StringListFilter>;
  /** Filter by the object’s `reviewerAction` field. */
  reviewerAction?: Maybe<ReviewerActionFilter>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: Maybe<AssignerActionFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationListShapeFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationListShapeFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationListShapeFilter>;
};

/** A filter to be used against ReviewerAction fields. All fields are combined with a logical ‘and.’ */
export type ReviewerActionFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<ReviewerAction>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<ReviewerAction>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<ReviewerAction>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<ReviewerAction>;
  /** Included in the specified list. */
  in?: Maybe<Array<ReviewerAction>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<ReviewerAction>>;
  /** Less than the specified value. */
  lessThan?: Maybe<ReviewerAction>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<ReviewerAction>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<ReviewerAction>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<ReviewerAction>;
};

/** A filter to be used against AssignerAction fields. All fields are combined with a logical ‘and.’ */
export type AssignerActionFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<AssignerAction>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<AssignerAction>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<AssignerAction>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<AssignerAction>;
  /** Included in the specified list. */
  in?: Maybe<Array<AssignerAction>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<AssignerAction>>;
  /** Less than the specified value. */
  lessThan?: Maybe<AssignerAction>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<AssignerAction>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<AssignerAction>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<AssignerAction>;
};

/** A connection to a list of `ApplicationListShape` values. */
export type ApplicationListShapesConnection = {
  __typename?: 'ApplicationListShapesConnection';
  /** A list of `ApplicationListShape` objects. */
  nodes: Array<Maybe<ApplicationListShape>>;
  /** A list of edges which contains the `ApplicationListShape` and cursor to aid in pagination. */
  edges: Array<ApplicationListShapesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationListShape` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationListShape = {
  __typename?: 'ApplicationListShape';
  id?: Maybe<Scalars['Int']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  templateName?: Maybe<Scalars['String']>;
  applicant?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  stage?: Maybe<Scalars['String']>;
  stageColour?: Maybe<Scalars['String']>;
  status?: Maybe<ApplicationStatus>;
  outcome?: Maybe<ApplicationOutcome>;
  lastActiveDate?: Maybe<Scalars['Datetime']>;
  applicantDeadline?: Maybe<Scalars['Datetime']>;
  assigners?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewerAction?: Maybe<ReviewerAction>;
  assignerAction?: Maybe<AssignerAction>;
};

/** A `ApplicationListShape` edge in the connection. */
export type ApplicationListShapesEdge = {
  __typename?: 'ApplicationListShapesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationListShape` at the end of the edge. */
  node?: Maybe<ApplicationListShape>;
};

/** Methods to use when ordering `ApplicationStageStatusAll`. */
export enum ApplicationStageStatusAllsOrderBy {
  Natural = 'NATURAL',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StageAsc = 'STAGE_ASC',
  StageDesc = 'STAGE_DESC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StageHistoryIdAsc = 'STAGE_HISTORY_ID_ASC',
  StageHistoryIdDesc = 'STAGE_HISTORY_ID_DESC',
  StageHistoryTimeCreatedAsc = 'STAGE_HISTORY_TIME_CREATED_ASC',
  StageHistoryTimeCreatedDesc = 'STAGE_HISTORY_TIME_CREATED_DESC',
  StageIsCurrentAsc = 'STAGE_IS_CURRENT_ASC',
  StageIsCurrentDesc = 'STAGE_IS_CURRENT_DESC',
  StatusHistoryIdAsc = 'STATUS_HISTORY_ID_ASC',
  StatusHistoryIdDesc = 'STATUS_HISTORY_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  StatusHistoryTimeCreatedAsc = 'STATUS_HISTORY_TIME_CREATED_ASC',
  StatusHistoryTimeCreatedDesc = 'STATUS_HISTORY_TIME_CREATED_DESC',
  StatusIsCurrentAsc = 'STATUS_IS_CURRENT_ASC',
  StatusIsCurrentDesc = 'STATUS_IS_CURRENT_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC'
}

/** A condition to be used against `ApplicationStageStatusAll` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationStageStatusAllCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageHistoryId` field. */
  stageHistoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `stageIsCurrent` field. */
  stageIsCurrent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `statusHistoryId` field. */
  statusHistoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ApplicationStatus>;
  /** Checks for equality with the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `statusIsCurrent` field. */
  statusIsCurrent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcome>;
};

/** A filter to be used against `ApplicationStageStatusAll` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageStatusAllFilter = {
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: Maybe<StringFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: Maybe<StringFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: Maybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: Maybe<StringFilter>;
  /** Filter by the object’s `stageHistoryId` field. */
  stageHistoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `stageIsCurrent` field. */
  stageIsCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `statusHistoryId` field. */
  statusHistoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationStatusFilter>;
  /** Filter by the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `statusIsCurrent` field. */
  statusIsCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcomeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationStageStatusAllFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationStageStatusAllFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationStageStatusAllFilter>;
};

/** A connection to a list of `ApplicationStageStatusAll` values. */
export type ApplicationStageStatusAllsConnection = {
  __typename?: 'ApplicationStageStatusAllsConnection';
  /** A list of `ApplicationStageStatusAll` objects. */
  nodes: Array<Maybe<ApplicationStageStatusAll>>;
  /** A list of edges which contains the `ApplicationStageStatusAll` and cursor to aid in pagination. */
  edges: Array<ApplicationStageStatusAllsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageStatusAll` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationStageStatusAll = {
  __typename?: 'ApplicationStageStatusAll';
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  templateName?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sessionId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  stage?: Maybe<Scalars['String']>;
  stageColour?: Maybe<Scalars['String']>;
  stageHistoryId?: Maybe<Scalars['Int']>;
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  stageIsCurrent?: Maybe<Scalars['Boolean']>;
  statusHistoryId?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  statusIsCurrent?: Maybe<Scalars['Boolean']>;
  outcome?: Maybe<ApplicationOutcome>;
};

/** A `ApplicationStageStatusAll` edge in the connection. */
export type ApplicationStageStatusAllsEdge = {
  __typename?: 'ApplicationStageStatusAllsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationStageStatusAll` at the end of the edge. */
  node?: Maybe<ApplicationStageStatusAll>;
};

/** Methods to use when ordering `ApplicationStageStatusLatest`. */
export enum ApplicationStageStatusLatestsOrderBy {
  Natural = 'NATURAL',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StageAsc = 'STAGE_ASC',
  StageDesc = 'STAGE_DESC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StageHistoryIdAsc = 'STAGE_HISTORY_ID_ASC',
  StageHistoryIdDesc = 'STAGE_HISTORY_ID_DESC',
  StageHistoryTimeCreatedAsc = 'STAGE_HISTORY_TIME_CREATED_ASC',
  StageHistoryTimeCreatedDesc = 'STAGE_HISTORY_TIME_CREATED_DESC',
  StageIsCurrentAsc = 'STAGE_IS_CURRENT_ASC',
  StageIsCurrentDesc = 'STAGE_IS_CURRENT_DESC',
  StatusHistoryIdAsc = 'STATUS_HISTORY_ID_ASC',
  StatusHistoryIdDesc = 'STATUS_HISTORY_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  StatusHistoryTimeCreatedAsc = 'STATUS_HISTORY_TIME_CREATED_ASC',
  StatusHistoryTimeCreatedDesc = 'STATUS_HISTORY_TIME_CREATED_DESC',
  StatusIsCurrentAsc = 'STATUS_IS_CURRENT_ASC',
  StatusIsCurrentDesc = 'STATUS_IS_CURRENT_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC'
}

/** A condition to be used against `ApplicationStageStatusLatest` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ApplicationStageStatusLatestCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageHistoryId` field. */
  stageHistoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `stageIsCurrent` field. */
  stageIsCurrent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `statusHistoryId` field. */
  statusHistoryId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<ApplicationStatus>;
  /** Checks for equality with the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `statusIsCurrent` field. */
  statusIsCurrent?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcome>;
};

/** A filter to be used against `ApplicationStageStatusLatest` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageStatusLatestFilter = {
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: Maybe<StringFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: Maybe<StringFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: Maybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: Maybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: Maybe<StringFilter>;
  /** Filter by the object’s `stageHistoryId` field. */
  stageHistoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `stageIsCurrent` field. */
  stageIsCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `statusHistoryId` field. */
  statusHistoryId?: Maybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: Maybe<ApplicationStatusFilter>;
  /** Filter by the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: Maybe<DatetimeFilter>;
  /** Filter by the object’s `statusIsCurrent` field. */
  statusIsCurrent?: Maybe<BooleanFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: Maybe<ApplicationOutcomeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ApplicationStageStatusLatestFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ApplicationStageStatusLatestFilter>>;
  /** Negates the expression. */
  not?: Maybe<ApplicationStageStatusLatestFilter>;
};

/** A connection to a list of `ApplicationStageStatusLatest` values. */
export type ApplicationStageStatusLatestsConnection = {
  __typename?: 'ApplicationStageStatusLatestsConnection';
  /** A list of `ApplicationStageStatusLatest` objects. */
  nodes: Array<Maybe<ApplicationStageStatusLatest>>;
  /** A list of edges which contains the `ApplicationStageStatusLatest` and cursor to aid in pagination. */
  edges: Array<ApplicationStageStatusLatestsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageStatusLatest` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ApplicationStageStatusLatest = {
  __typename?: 'ApplicationStageStatusLatest';
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  templateName?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  sessionId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  stage?: Maybe<Scalars['String']>;
  stageColour?: Maybe<Scalars['String']>;
  stageHistoryId?: Maybe<Scalars['Int']>;
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  stageIsCurrent?: Maybe<Scalars['Boolean']>;
  statusHistoryId?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']>;
  statusIsCurrent?: Maybe<Scalars['Boolean']>;
  outcome?: Maybe<ApplicationOutcome>;
};

/** A `ApplicationStageStatusLatest` edge in the connection. */
export type ApplicationStageStatusLatestsEdge = {
  __typename?: 'ApplicationStageStatusLatestsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ApplicationStageStatusLatest` at the end of the edge. */
  node?: Maybe<ApplicationStageStatusLatest>;
};

/** Methods to use when ordering `ConstraintsInfo`. */
export enum ConstraintsInfosOrderBy {
  Natural = 'NATURAL',
  ConstraintTypeAsc = 'CONSTRAINT_TYPE_ASC',
  ConstraintTypeDesc = 'CONSTRAINT_TYPE_DESC',
  FromTableNameAsc = 'FROM_TABLE_NAME_ASC',
  FromTableNameDesc = 'FROM_TABLE_NAME_DESC',
  FromColumnNameAsc = 'FROM_COLUMN_NAME_ASC',
  FromColumnNameDesc = 'FROM_COLUMN_NAME_DESC',
  ToTableNameAsc = 'TO_TABLE_NAME_ASC',
  ToTableNameDesc = 'TO_TABLE_NAME_DESC',
  ToColumnNameAsc = 'TO_COLUMN_NAME_ASC',
  ToColumnNameDesc = 'TO_COLUMN_NAME_DESC'
}

/** A condition to be used against `ConstraintsInfo` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ConstraintsInfoCondition = {
  /** Checks for equality with the object’s `constraintType` field. */
  constraintType?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `fromTableName` field. */
  fromTableName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `fromColumnName` field. */
  fromColumnName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `toTableName` field. */
  toTableName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `toColumnName` field. */
  toColumnName?: Maybe<Scalars['SqlIdentifier']>;
};



/** A filter to be used against `ConstraintsInfo` object types. All fields are combined with a logical ‘and.’ */
export type ConstraintsInfoFilter = {
  /** Filter by the object’s `constraintType` field. */
  constraintType?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `fromTableName` field. */
  fromTableName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `fromColumnName` field. */
  fromColumnName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `toTableName` field. */
  toTableName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `toColumnName` field. */
  toColumnName?: Maybe<SqlIdentifierFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ConstraintsInfoFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ConstraintsInfoFilter>>;
  /** Negates the expression. */
  not?: Maybe<ConstraintsInfoFilter>;
};

/** A filter to be used against CharacterData fields. All fields are combined with a logical ‘and.’ */
export type CharacterDataFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['CharacterData']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['CharacterData']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['CharacterData']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['CharacterData']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['CharacterData']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['CharacterData']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['CharacterData']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['CharacterData']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['CharacterData']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['CharacterData']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['CharacterData']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['CharacterData']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['CharacterData']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['CharacterData']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['CharacterData']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['CharacterData']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['CharacterData']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['CharacterData']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: Maybe<Array<Scalars['CharacterData']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: Maybe<Array<Scalars['CharacterData']>>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: Maybe<Scalars['CharacterData']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: Maybe<Scalars['CharacterData']>;
};

/** A filter to be used against SqlIdentifier fields. All fields are combined with a logical ‘and.’ */
export type SqlIdentifierFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['SqlIdentifier']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['SqlIdentifier']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['SqlIdentifier']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['SqlIdentifier']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['SqlIdentifier']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['SqlIdentifier']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['SqlIdentifier']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['SqlIdentifier']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['SqlIdentifier']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['SqlIdentifier']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['SqlIdentifier']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['SqlIdentifier']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['SqlIdentifier']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['SqlIdentifier']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: Maybe<Array<Scalars['SqlIdentifier']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: Maybe<Array<Scalars['SqlIdentifier']>>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: Maybe<Scalars['SqlIdentifier']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: Maybe<Scalars['SqlIdentifier']>;
};

/** A connection to a list of `ConstraintsInfo` values. */
export type ConstraintsInfosConnection = {
  __typename?: 'ConstraintsInfosConnection';
  /** A list of `ConstraintsInfo` objects. */
  nodes: Array<Maybe<ConstraintsInfo>>;
  /** A list of edges which contains the `ConstraintsInfo` and cursor to aid in pagination. */
  edges: Array<ConstraintsInfosEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ConstraintsInfo` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ConstraintsInfo = {
  __typename?: 'ConstraintsInfo';
  constraintType?: Maybe<Scalars['CharacterData']>;
  fromTableName?: Maybe<Scalars['SqlIdentifier']>;
  fromColumnName?: Maybe<Scalars['SqlIdentifier']>;
  toTableName?: Maybe<Scalars['SqlIdentifier']>;
  toColumnName?: Maybe<Scalars['SqlIdentifier']>;
};

/** A `ConstraintsInfo` edge in the connection. */
export type ConstraintsInfosEdge = {
  __typename?: 'ConstraintsInfosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ConstraintsInfo` at the end of the edge. */
  node?: Maybe<ConstraintsInfo>;
};

/** Methods to use when ordering `Counter`. */
export enum CountersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Counter` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type CounterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['Int']>;
};

/** A filter to be used against `Counter` object types. All fields are combined with a logical ‘and.’ */
export type CounterFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<IntFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<CounterFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<CounterFilter>>;
  /** Negates the expression. */
  not?: Maybe<CounterFilter>;
};

/** A connection to a list of `Counter` values. */
export type CountersConnection = {
  __typename?: 'CountersConnection';
  /** A list of `Counter` objects. */
  nodes: Array<Maybe<Counter>>;
  /** A list of edges which contains the `Counter` and cursor to aid in pagination. */
  edges: Array<CountersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Counter` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type Counter = Node & {
  __typename?: 'Counter';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name: Scalars['String'];
  value?: Maybe<Scalars['Int']>;
};

/** A `Counter` edge in the connection. */
export type CountersEdge = {
  __typename?: 'CountersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Counter` at the end of the edge. */
  node?: Maybe<Counter>;
};

/** Methods to use when ordering `DataTable`. */
export enum DataTablesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  DisplayNameAsc = 'DISPLAY_NAME_ASC',
  DisplayNameDesc = 'DISPLAY_NAME_DESC',
  FieldMapAsc = 'FIELD_MAP_ASC',
  FieldMapDesc = 'FIELD_MAP_DESC',
  IsLookupTableAsc = 'IS_LOOKUP_TABLE_ASC',
  IsLookupTableDesc = 'IS_LOOKUP_TABLE_DESC',
  DataViewCodeAsc = 'DATA_VIEW_CODE_ASC',
  DataViewCodeDesc = 'DATA_VIEW_CODE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTable` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `displayName` field. */
  displayName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fieldMap` field. */
  fieldMap?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isLookupTable` field. */
  isLookupTable?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `dataViewCode` field. */
  dataViewCode?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTable` object types. All fields are combined with a logical ‘and.’ */
export type DataTableFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: Maybe<StringFilter>;
  /** Filter by the object’s `displayName` field. */
  displayName?: Maybe<StringFilter>;
  /** Filter by the object’s `fieldMap` field. */
  fieldMap?: Maybe<JsonFilter>;
  /** Filter by the object’s `isLookupTable` field. */
  isLookupTable?: Maybe<BooleanFilter>;
  /** Filter by the object’s `dataViewCode` field. */
  dataViewCode?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableFilter>;
};

/** A connection to a list of `DataTable` values. */
export type DataTablesConnection = {
  __typename?: 'DataTablesConnection';
  /** A list of `DataTable` objects. */
  nodes: Array<Maybe<DataTable>>;
  /** A list of edges which contains the `DataTable` and cursor to aid in pagination. */
  edges: Array<DataTablesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTable` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTable = Node & {
  __typename?: 'DataTable';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  tableName: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  fieldMap?: Maybe<Scalars['JSON']>;
  isLookupTable?: Maybe<Scalars['Boolean']>;
  dataViewCode?: Maybe<Scalars['String']>;
};

/** A `DataTable` edge in the connection. */
export type DataTablesEdge = {
  __typename?: 'DataTablesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTable` at the end of the edge. */
  node?: Maybe<DataTable>;
};

/** Methods to use when ordering `DataTableManufacturingStep`. */
export enum DataTableManufacturingStepsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TipoDeFabricanteAsc = 'TIPO_DE_FABRICANTE_ASC',
  TipoDeFabricanteDesc = 'TIPO_DE_FABRICANTE_DESC',
  ManufacturingOperationAsc = 'MANUFACTURING_OPERATION_ASC',
  ManufacturingOperationDesc = 'MANUFACTURING_OPERATION_DESC',
  DefinitionAsc = 'DEFINITION_ASC',
  DefinitionDesc = 'DEFINITION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableManufacturingStep` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableManufacturingStepCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `tipoDeFabricante` field. */
  tipoDeFabricante?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `manufacturingOperation` field. */
  manufacturingOperation?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `definition` field. */
  definition?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableManufacturingStep` object types. All fields are combined with a logical ‘and.’ */
export type DataTableManufacturingStepFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `tipoDeFabricante` field. */
  tipoDeFabricante?: Maybe<StringFilter>;
  /** Filter by the object’s `manufacturingOperation` field. */
  manufacturingOperation?: Maybe<StringFilter>;
  /** Filter by the object’s `definition` field. */
  definition?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableManufacturingStepFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableManufacturingStepFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableManufacturingStepFilter>;
};

/** A connection to a list of `DataTableManufacturingStep` values. */
export type DataTableManufacturingStepsConnection = {
  __typename?: 'DataTableManufacturingStepsConnection';
  /** A list of `DataTableManufacturingStep` objects. */
  nodes: Array<Maybe<DataTableManufacturingStep>>;
  /** A list of edges which contains the `DataTableManufacturingStep` and cursor to aid in pagination. */
  edges: Array<DataTableManufacturingStepsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableManufacturingStep` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableManufacturingStep = Node & {
  __typename?: 'DataTableManufacturingStep';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  tipoDeFabricante?: Maybe<Scalars['String']>;
  manufacturingOperation?: Maybe<Scalars['String']>;
  definition?: Maybe<Scalars['String']>;
};

/** A `DataTableManufacturingStep` edge in the connection. */
export type DataTableManufacturingStepsEdge = {
  __typename?: 'DataTableManufacturingStepsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableManufacturingStep` at the end of the edge. */
  node?: Maybe<DataTableManufacturingStep>;
};

/** Methods to use when ordering `DataTableActiveIngredient`. */
export enum DataTableActiveIngredientsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  LatinaAsc = 'LATINA_ASC',
  LatinaDesc = 'LATINA_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableActiveIngredient` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableActiveIngredientCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `latina` field. */
  latina?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableActiveIngredient` object types. All fields are combined with a logical ‘and.’ */
export type DataTableActiveIngredientFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `latina` field. */
  latina?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableActiveIngredientFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableActiveIngredientFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableActiveIngredientFilter>;
};

/** A connection to a list of `DataTableActiveIngredient` values. */
export type DataTableActiveIngredientsConnection = {
  __typename?: 'DataTableActiveIngredientsConnection';
  /** A list of `DataTableActiveIngredient` objects. */
  nodes: Array<Maybe<DataTableActiveIngredient>>;
  /** A list of edges which contains the `DataTableActiveIngredient` and cursor to aid in pagination. */
  edges: Array<DataTableActiveIngredientsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableActiveIngredient` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableActiveIngredient = Node & {
  __typename?: 'DataTableActiveIngredient';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  latina?: Maybe<Scalars['String']>;
};

/** A `DataTableActiveIngredient` edge in the connection. */
export type DataTableActiveIngredientsEdge = {
  __typename?: 'DataTableActiveIngredientsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableActiveIngredient` at the end of the edge. */
  node?: Maybe<DataTableActiveIngredient>;
};

/** Methods to use when ordering `DataTableAdministrationRoute`. */
export enum DataTableAdministrationRoutesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableAdministrationRoute` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableAdministrationRouteCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableAdministrationRoute` object types. All fields are combined with a logical ‘and.’ */
export type DataTableAdministrationRouteFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableAdministrationRouteFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableAdministrationRouteFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableAdministrationRouteFilter>;
};

/** A connection to a list of `DataTableAdministrationRoute` values. */
export type DataTableAdministrationRoutesConnection = {
  __typename?: 'DataTableAdministrationRoutesConnection';
  /** A list of `DataTableAdministrationRoute` objects. */
  nodes: Array<Maybe<DataTableAdministrationRoute>>;
  /** A list of edges which contains the `DataTableAdministrationRoute` and cursor to aid in pagination. */
  edges: Array<DataTableAdministrationRoutesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableAdministrationRoute` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableAdministrationRoute = Node & {
  __typename?: 'DataTableAdministrationRoute';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** A `DataTableAdministrationRoute` edge in the connection. */
export type DataTableAdministrationRoutesEdge = {
  __typename?: 'DataTableAdministrationRoutesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableAdministrationRoute` at the end of the edge. */
  node?: Maybe<DataTableAdministrationRoute>;
};

/** Methods to use when ordering `DataTableAnnex`. */
export enum DataTableAnnexesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  SourceAsc = 'SOURCE_ASC',
  SourceDesc = 'SOURCE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableAnnex` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableAnnexCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `source` field. */
  source?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableAnnex` object types. All fields are combined with a logical ‘and.’ */
export type DataTableAnnexFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `source` field. */
  source?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableAnnexFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableAnnexFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableAnnexFilter>;
};

/** A connection to a list of `DataTableAnnex` values. */
export type DataTableAnnexesConnection = {
  __typename?: 'DataTableAnnexesConnection';
  /** A list of `DataTableAnnex` objects. */
  nodes: Array<Maybe<DataTableAnnex>>;
  /** A list of edges which contains the `DataTableAnnex` and cursor to aid in pagination. */
  edges: Array<DataTableAnnexesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableAnnex` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableAnnex = Node & {
  __typename?: 'DataTableAnnex';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** A `DataTableAnnex` edge in the connection. */
export type DataTableAnnexesEdge = {
  __typename?: 'DataTableAnnexesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableAnnex` at the end of the edge. */
  node?: Maybe<DataTableAnnex>;
};

/** Methods to use when ordering `DataTableAnnex2`. */
export enum DataTableAnnex2sOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  SourceAsc = 'SOURCE_ASC',
  SourceDesc = 'SOURCE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableAnnex2` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableAnnex2Condition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `source` field. */
  source?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableAnnex2` object types. All fields are combined with a logical ‘and.’ */
export type DataTableAnnex2Filter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `country` field. */
  country?: Maybe<StringFilter>;
  /** Filter by the object’s `source` field. */
  source?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableAnnex2Filter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableAnnex2Filter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableAnnex2Filter>;
};

/** A connection to a list of `DataTableAnnex2` values. */
export type DataTableAnnex2sConnection = {
  __typename?: 'DataTableAnnex2sConnection';
  /** A list of `DataTableAnnex2` objects. */
  nodes: Array<Maybe<DataTableAnnex2>>;
  /** A list of edges which contains the `DataTableAnnex2` and cursor to aid in pagination. */
  edges: Array<DataTableAnnex2sEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableAnnex2` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableAnnex2 = Node & {
  __typename?: 'DataTableAnnex2';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** A `DataTableAnnex2` edge in the connection. */
export type DataTableAnnex2sEdge = {
  __typename?: 'DataTableAnnex2sEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableAnnex2` at the end of the edge. */
  node?: Maybe<DataTableAnnex2>;
};

/** Methods to use when ordering `DataTableAtcCode`. */
export enum DataTableAtcCodesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  WhoAtcIdAsc = 'WHO_ATC_ID_ASC',
  WhoAtcIdDesc = 'WHO_ATC_ID_DESC',
  AtcCodeAsc = 'ATC_CODE_ASC',
  AtcCodeDesc = 'ATC_CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableAtcCode` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableAtcCodeCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcCode` field. */
  atcCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableAtcCode` object types. All fields are combined with a logical ‘and.’ */
export type DataTableAtcCodeFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<StringFilter>;
  /** Filter by the object’s `atcCode` field. */
  atcCode?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableAtcCodeFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableAtcCodeFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableAtcCodeFilter>;
};

/** A connection to a list of `DataTableAtcCode` values. */
export type DataTableAtcCodesConnection = {
  __typename?: 'DataTableAtcCodesConnection';
  /** A list of `DataTableAtcCode` objects. */
  nodes: Array<Maybe<DataTableAtcCode>>;
  /** A list of edges which contains the `DataTableAtcCode` and cursor to aid in pagination. */
  edges: Array<DataTableAtcCodesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableAtcCode` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableAtcCode = Node & {
  __typename?: 'DataTableAtcCode';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** A `DataTableAtcCode` edge in the connection. */
export type DataTableAtcCodesEdge = {
  __typename?: 'DataTableAtcCodesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableAtcCode` at the end of the edge. */
  node?: Maybe<DataTableAtcCode>;
};

/** Methods to use when ordering `DataTableAtcTherapeuticCategory`. */
export enum DataTableAtcTherapeuticCategoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  WhoAtcIdAsc = 'WHO_ATC_ID_ASC',
  WhoAtcIdDesc = 'WHO_ATC_ID_DESC',
  AtcCodeAsc = 'ATC_CODE_ASC',
  AtcCodeDesc = 'ATC_CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableAtcTherapeuticCategory` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableAtcTherapeuticCategoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcCode` field. */
  atcCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableAtcTherapeuticCategory` object types. All fields are combined with a logical ‘and.’ */
export type DataTableAtcTherapeuticCategoryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<StringFilter>;
  /** Filter by the object’s `atcCode` field. */
  atcCode?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableAtcTherapeuticCategoryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableAtcTherapeuticCategoryFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableAtcTherapeuticCategoryFilter>;
};

/** A connection to a list of `DataTableAtcTherapeuticCategory` values. */
export type DataTableAtcTherapeuticCategoriesConnection = {
  __typename?: 'DataTableAtcTherapeuticCategoriesConnection';
  /** A list of `DataTableAtcTherapeuticCategory` objects. */
  nodes: Array<Maybe<DataTableAtcTherapeuticCategory>>;
  /** A list of edges which contains the `DataTableAtcTherapeuticCategory` and cursor to aid in pagination. */
  edges: Array<DataTableAtcTherapeuticCategoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableAtcTherapeuticCategory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableAtcTherapeuticCategory = Node & {
  __typename?: 'DataTableAtcTherapeuticCategory';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** A `DataTableAtcTherapeuticCategory` edge in the connection. */
export type DataTableAtcTherapeuticCategoriesEdge = {
  __typename?: 'DataTableAtcTherapeuticCategoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableAtcTherapeuticCategory` at the end of the edge. */
  node?: Maybe<DataTableAtcTherapeuticCategory>;
};

/** Methods to use when ordering `DataTableContainer`. */
export enum DataTableContainersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableContainer` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableContainerCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableContainer` object types. All fields are combined with a logical ‘and.’ */
export type DataTableContainerFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableContainerFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableContainerFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableContainerFilter>;
};

/** A connection to a list of `DataTableContainer` values. */
export type DataTableContainersConnection = {
  __typename?: 'DataTableContainersConnection';
  /** A list of `DataTableContainer` objects. */
  nodes: Array<Maybe<DataTableContainer>>;
  /** A list of edges which contains the `DataTableContainer` and cursor to aid in pagination. */
  edges: Array<DataTableContainersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableContainer` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableContainer = Node & {
  __typename?: 'DataTableContainer';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** A `DataTableContainer` edge in the connection. */
export type DataTableContainersEdge = {
  __typename?: 'DataTableContainersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableContainer` at the end of the edge. */
  node?: Maybe<DataTableContainer>;
};

/** Methods to use when ordering `DataTableCountry`. */
export enum DataTableCountriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameCommonAsc = 'NAME_COMMON_ASC',
  NameCommonDesc = 'NAME_COMMON_DESC',
  NameOfficialAsc = 'NAME_OFFICIAL_ASC',
  NameOfficialDesc = 'NAME_OFFICIAL_DESC',
  TranslationsPorOfficialAsc = 'TRANSLATIONS_POR_OFFICIAL_ASC',
  TranslationsPorOfficialDesc = 'TRANSLATIONS_POR_OFFICIAL_DESC',
  TranslationsPorCommonAsc = 'TRANSLATIONS_POR_COMMON_ASC',
  TranslationsPorCommonDesc = 'TRANSLATIONS_POR_COMMON_DESC',
  TranslationCommonNoAccentAsc = 'TRANSLATION_COMMON_NO_ACCENT_ASC',
  TranslationCommonNoAccentDesc = 'TRANSLATION_COMMON_NO_ACCENT_DESC',
  FlagAsc = 'FLAG_ASC',
  FlagDesc = 'FLAG_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableCountry` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableCountryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `nameCommon` field. */
  nameCommon?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `nameOfficial` field. */
  nameOfficial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `translationsPorOfficial` field. */
  translationsPorOfficial?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `translationsPorCommon` field. */
  translationsPorCommon?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `translationCommonNoAccent` field. */
  translationCommonNoAccent?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `flag` field. */
  flag?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableCountry` object types. All fields are combined with a logical ‘and.’ */
export type DataTableCountryFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `nameCommon` field. */
  nameCommon?: Maybe<StringFilter>;
  /** Filter by the object’s `nameOfficial` field. */
  nameOfficial?: Maybe<StringFilter>;
  /** Filter by the object’s `translationsPorOfficial` field. */
  translationsPorOfficial?: Maybe<StringFilter>;
  /** Filter by the object’s `translationsPorCommon` field. */
  translationsPorCommon?: Maybe<StringFilter>;
  /** Filter by the object’s `translationCommonNoAccent` field. */
  translationCommonNoAccent?: Maybe<StringFilter>;
  /** Filter by the object’s `flag` field. */
  flag?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableCountryFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableCountryFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableCountryFilter>;
};

/** A connection to a list of `DataTableCountry` values. */
export type DataTableCountriesConnection = {
  __typename?: 'DataTableCountriesConnection';
  /** A list of `DataTableCountry` objects. */
  nodes: Array<Maybe<DataTableCountry>>;
  /** A list of edges which contains the `DataTableCountry` and cursor to aid in pagination. */
  edges: Array<DataTableCountriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableCountry` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableCountry = Node & {
  __typename?: 'DataTableCountry';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  nameCommon?: Maybe<Scalars['String']>;
  nameOfficial?: Maybe<Scalars['String']>;
  translationsPorOfficial?: Maybe<Scalars['String']>;
  translationsPorCommon?: Maybe<Scalars['String']>;
  translationCommonNoAccent?: Maybe<Scalars['String']>;
  flag?: Maybe<Scalars['String']>;
};

/** A `DataTableCountry` edge in the connection. */
export type DataTableCountriesEdge = {
  __typename?: 'DataTableCountriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableCountry` at the end of the edge. */
  node?: Maybe<DataTableCountry>;
};

/** Methods to use when ordering `DataTableDosageForm`. */
export enum DataTableDosageFormsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableDosageForm` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableDosageFormCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableDosageForm` object types. All fields are combined with a logical ‘and.’ */
export type DataTableDosageFormFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableDosageFormFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableDosageFormFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableDosageFormFilter>;
};

/** A connection to a list of `DataTableDosageForm` values. */
export type DataTableDosageFormsConnection = {
  __typename?: 'DataTableDosageFormsConnection';
  /** A list of `DataTableDosageForm` objects. */
  nodes: Array<Maybe<DataTableDosageForm>>;
  /** A list of edges which contains the `DataTableDosageForm` and cursor to aid in pagination. */
  edges: Array<DataTableDosageFormsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableDosageForm` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableDosageForm = Node & {
  __typename?: 'DataTableDosageForm';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
};

/** A `DataTableDosageForm` edge in the connection. */
export type DataTableDosageFormsEdge = {
  __typename?: 'DataTableDosageFormsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableDosageForm` at the end of the edge. */
  node?: Maybe<DataTableDosageForm>;
};

/** Methods to use when ordering `DataTableGenericIngredient`. */
export enum DataTableGenericIngredientsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  ProductEnAsc = 'PRODUCT_EN_ASC',
  ProductEnDesc = 'PRODUCT_EN_DESC',
  ProductFrAsc = 'PRODUCT_FR_ASC',
  ProductFrDesc = 'PRODUCT_FR_DESC',
  WhoAtcIdAsc = 'WHO_ATC_ID_ASC',
  WhoAtcIdDesc = 'WHO_ATC_ID_DESC',
  AtcCodeAsc = 'ATC_CODE_ASC',
  AtcCodeDesc = 'ATC_CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableGenericIngredient` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableGenericIngredientCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `productEn` field. */
  productEn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `productFr` field. */
  productFr?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcCode` field. */
  atcCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableGenericIngredient` object types. All fields are combined with a logical ‘and.’ */
export type DataTableGenericIngredientFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `productEn` field. */
  productEn?: Maybe<StringFilter>;
  /** Filter by the object’s `productFr` field. */
  productFr?: Maybe<StringFilter>;
  /** Filter by the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<StringFilter>;
  /** Filter by the object’s `atcCode` field. */
  atcCode?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableGenericIngredientFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableGenericIngredientFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableGenericIngredientFilter>;
};

/** A connection to a list of `DataTableGenericIngredient` values. */
export type DataTableGenericIngredientsConnection = {
  __typename?: 'DataTableGenericIngredientsConnection';
  /** A list of `DataTableGenericIngredient` objects. */
  nodes: Array<Maybe<DataTableGenericIngredient>>;
  /** A list of edges which contains the `DataTableGenericIngredient` and cursor to aid in pagination. */
  edges: Array<DataTableGenericIngredientsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableGenericIngredient` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableGenericIngredient = Node & {
  __typename?: 'DataTableGenericIngredient';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  productEn?: Maybe<Scalars['String']>;
  productFr?: Maybe<Scalars['String']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** A `DataTableGenericIngredient` edge in the connection. */
export type DataTableGenericIngredientsEdge = {
  __typename?: 'DataTableGenericIngredientsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableGenericIngredient` at the end of the edge. */
  node?: Maybe<DataTableGenericIngredient>;
};

/** Methods to use when ordering `DataTableIngredientsList`. */
export enum DataTableIngredientsListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  WhoAtcIdAsc = 'WHO_ATC_ID_ASC',
  WhoAtcIdDesc = 'WHO_ATC_ID_DESC',
  AtcCodeAsc = 'ATC_CODE_ASC',
  AtcCodeDesc = 'ATC_CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableIngredientsList` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableIngredientsListCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcCode` field. */
  atcCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableIngredientsList` object types. All fields are combined with a logical ‘and.’ */
export type DataTableIngredientsListFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `whoAtcId` field. */
  whoAtcId?: Maybe<StringFilter>;
  /** Filter by the object’s `atcCode` field. */
  atcCode?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableIngredientsListFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableIngredientsListFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableIngredientsListFilter>;
};

/** A connection to a list of `DataTableIngredientsList` values. */
export type DataTableIngredientsListsConnection = {
  __typename?: 'DataTableIngredientsListsConnection';
  /** A list of `DataTableIngredientsList` objects. */
  nodes: Array<Maybe<DataTableIngredientsList>>;
  /** A list of edges which contains the `DataTableIngredientsList` and cursor to aid in pagination. */
  edges: Array<DataTableIngredientsListsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableIngredientsList` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableIngredientsList = Node & {
  __typename?: 'DataTableIngredientsList';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** A `DataTableIngredientsList` edge in the connection. */
export type DataTableIngredientsListsEdge = {
  __typename?: 'DataTableIngredientsListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableIngredientsList` at the end of the edge. */
  node?: Maybe<DataTableIngredientsList>;
};

/** Methods to use when ordering `DataTableListOfSra`. */
export enum DataTableListOfSrasOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  SraAsc = 'SRA_ASC',
  SraDesc = 'SRA_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableListOfSra` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableListOfSraCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `sra` field. */
  sra?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableListOfSra` object types. All fields are combined with a logical ‘and.’ */
export type DataTableListOfSraFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `sra` field. */
  sra?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableListOfSraFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableListOfSraFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableListOfSraFilter>;
};

/** A connection to a list of `DataTableListOfSra` values. */
export type DataTableListOfSrasConnection = {
  __typename?: 'DataTableListOfSrasConnection';
  /** A list of `DataTableListOfSra` objects. */
  nodes: Array<Maybe<DataTableListOfSra>>;
  /** A list of edges which contains the `DataTableListOfSra` and cursor to aid in pagination. */
  edges: Array<DataTableListOfSrasEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableListOfSra` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableListOfSra = Node & {
  __typename?: 'DataTableListOfSra';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  sra?: Maybe<Scalars['String']>;
};

/** A `DataTableListOfSra` edge in the connection. */
export type DataTableListOfSrasEdge = {
  __typename?: 'DataTableListOfSrasEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableListOfSra` at the end of the edge. */
  node?: Maybe<DataTableListOfSra>;
};

/** Methods to use when ordering `DataTableProcessingStep`. */
export enum DataTableProcessingStepsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PortugueseNameAsc = 'PORTUGUESE_NAME_ASC',
  PortugueseNameDesc = 'PORTUGUESE_NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableProcessingStep` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableProcessingStepCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `portugueseName` field. */
  portugueseName?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableProcessingStep` object types. All fields are combined with a logical ‘and.’ */
export type DataTableProcessingStepFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `portugueseName` field. */
  portugueseName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableProcessingStepFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableProcessingStepFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableProcessingStepFilter>;
};

/** A connection to a list of `DataTableProcessingStep` values. */
export type DataTableProcessingStepsConnection = {
  __typename?: 'DataTableProcessingStepsConnection';
  /** A list of `DataTableProcessingStep` objects. */
  nodes: Array<Maybe<DataTableProcessingStep>>;
  /** A list of edges which contains the `DataTableProcessingStep` and cursor to aid in pagination. */
  edges: Array<DataTableProcessingStepsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableProcessingStep` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableProcessingStep = Node & {
  __typename?: 'DataTableProcessingStep';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** A `DataTableProcessingStep` edge in the connection. */
export type DataTableProcessingStepsEdge = {
  __typename?: 'DataTableProcessingStepsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableProcessingStep` at the end of the edge. */
  node?: Maybe<DataTableProcessingStep>;
};

/** Methods to use when ordering `DataTableProduct`. */
export enum DataTableProductsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  OriginAsc = 'ORIGIN_ASC',
  OriginDesc = 'ORIGIN_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  ExpiryDateAsc = 'EXPIRY_DATE_ASC',
  ExpiryDateDesc = 'EXPIRY_DATE_DESC',
  RegistrationAsc = 'REGISTRATION_ASC',
  RegistrationDesc = 'REGISTRATION_DESC',
  ApplicantNameAsc = 'APPLICANT_NAME_ASC',
  ApplicantNameDesc = 'APPLICANT_NAME_DESC',
  RegistrationDateAsc = 'REGISTRATION_DATE_ASC',
  RegistrationDateDesc = 'REGISTRATION_DATE_DESC',
  ResponsiblePersonAsc = 'RESPONSIBLE_PERSON_ASC',
  ResponsiblePersonDesc = 'RESPONSIBLE_PERSON_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  AtcCodeAsc = 'ATC_CODE_ASC',
  AtcCodeDesc = 'ATC_CODE_DESC',
  AtcClassAsc = 'ATC_CLASS_ASC',
  AtcClassDesc = 'ATC_CLASS_DESC',
  CompanyIdAsc = 'COMPANY_ID_ASC',
  CompanyIdDesc = 'COMPANY_ID_DESC',
  DimensionsAsc = 'DIMENSIONS_ASC',
  DimensionsDesc = 'DIMENSIONS_DESC',
  DosageFormAsc = 'DOSAGE_FORM_ASC',
  DosageFormDesc = 'DOSAGE_FORM_DESC',
  ApplicantIdAsc = 'APPLICANT_ID_ASC',
  ApplicantIdDesc = 'APPLICANT_ID_DESC',
  CompanyNameAsc = 'COMPANY_NAME_ASC',
  CompanyNameDesc = 'COMPANY_NAME_DESC',
  FormulationsAsc = 'FORMULATIONS_ASC',
  FormulationsDesc = 'FORMULATIONS_DESC',
  PrescriptionAsc = 'PRESCRIPTION_ASC',
  PrescriptionDesc = 'PRESCRIPTION_DESC',
  GenericNamesAsc = 'GENERIC_NAMES_ASC',
  GenericNamesDesc = 'GENERIC_NAMES_DESC',
  MedicineTypeAsc = 'MEDICINE_TYPE_ASC',
  MedicineTypeDesc = 'MEDICINE_TYPE_DESC',
  ApplicationTypeAsc = 'APPLICATION_TYPE_ASC',
  ApplicationTypeDesc = 'APPLICATION_TYPE_DESC',
  PrimaryContainerAsc = 'PRIMARY_CONTAINER_ASC',
  PrimaryContainerDesc = 'PRIMARY_CONTAINER_DESC',
  ShelfLifeOpenedAsc = 'SHELF_LIFE_OPENED_ASC',
  ShelfLifeOpenedDesc = 'SHELF_LIFE_OPENED_DESC',
  ManufacturersListAsc = 'MANUFACTURERS_LIST_ASC',
  ManufacturersListDesc = 'MANUFACTURERS_LIST_DESC',
  ShelfLifeProposedAsc = 'SHELF_LIFE_PROPOSED_ASC',
  ShelfLifeProposedDesc = 'SHELF_LIFE_PROPOSED_DESC',
  AdministrationRouteAsc = 'ADMINISTRATION_ROUTE_ASC',
  AdministrationRouteDesc = 'ADMINISTRATION_ROUTE_DESC',
  IsLocallyManufacturedAsc = 'IS_LOCALLY_MANUFACTURED_ASC',
  IsLocallyManufacturedDesc = 'IS_LOCALLY_MANUFACTURED_DESC',
  ShelfLifeReconstructedAsc = 'SHELF_LIFE_RECONSTRUCTED_ASC',
  ShelfLifeReconstructedDesc = 'SHELF_LIFE_RECONSTRUCTED_DESC',
  StorageConditionsOpenedAsc = 'STORAGE_CONDITIONS_OPENED_ASC',
  StorageConditionsOpenedDesc = 'STORAGE_CONDITIONS_OPENED_DESC',
  StorageConditionsProposedAsc = 'STORAGE_CONDITIONS_PROPOSED_ASC',
  StorageConditionsProposedDesc = 'STORAGE_CONDITIONS_PROPOSED_DESC',
  GenericNamesFilterDataAsc = 'GENERIC_NAMES_FILTER_DATA_ASC',
  GenericNamesFilterDataDesc = 'GENERIC_NAMES_FILTER_DATA_DESC',
  ManufacturersListFilterDataAsc = 'MANUFACTURERS_LIST_FILTER_DATA_ASC',
  ManufacturersListFilterDataDesc = 'MANUFACTURERS_LIST_FILTER_DATA_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableProduct` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableProductCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `origin` field. */
  origin?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `expiryDate` field. */
  expiryDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `registration` field. */
  registration?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicantName` field. */
  applicantName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationDate` field. */
  registrationDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `responsiblePerson` field. */
  responsiblePerson?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcCode` field. */
  atcCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `atcClass` field. */
  atcClass?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `companyId` field. */
  companyId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `dimensions` field. */
  dimensions?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `dosageForm` field. */
  dosageForm?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicantId` field. */
  applicantId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `companyName` field. */
  companyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `formulations` field. */
  formulations?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `prescription` field. */
  prescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `genericNames` field. */
  genericNames?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `medicineType` field. */
  medicineType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `applicationType` field. */
  applicationType?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `primaryContainer` field. */
  primaryContainer?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `shelfLifeOpened` field. */
  shelfLifeOpened?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `manufacturersList` field. */
  manufacturersList?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `shelfLifeProposed` field. */
  shelfLifeProposed?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `administrationRoute` field. */
  administrationRoute?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isLocallyManufactured` field. */
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `shelfLifeReconstructed` field. */
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `storageConditionsOpened` field. */
  storageConditionsOpened?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `storageConditionsProposed` field. */
  storageConditionsProposed?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `genericNamesFilterData` field. */
  genericNamesFilterData?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `manufacturersListFilterData` field. */
  manufacturersListFilterData?: Maybe<Scalars['String']>;
};

/** A connection to a list of `DataTableProduct` values. */
export type DataTableProductsConnection = {
  __typename?: 'DataTableProductsConnection';
  /** A list of `DataTableProduct` objects. */
  nodes: Array<Maybe<DataTableProduct>>;
  /** A list of edges which contains the `DataTableProduct` and cursor to aid in pagination. */
  edges: Array<DataTableProductsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableProduct` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `DataTableProduct` edge in the connection. */
export type DataTableProductsEdge = {
  __typename?: 'DataTableProductsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableProduct` at the end of the edge. */
  node?: Maybe<DataTableProduct>;
};

/** Methods to use when ordering `DataTableProvince`. */
export enum DataTableProvincesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AreaAsc = 'AREA_ASC',
  AreaDesc = 'AREA_DESC',
  NomeAsc = 'NOME_ASC',
  NomeDesc = 'NOME_DESC',
  CodigoAsc = 'CODIGO_ASC',
  CodigoDesc = 'CODIGO_DESC',
  CapitalAsc = 'CAPITAL_ASC',
  CapitalDesc = 'CAPITAL_DESC',
  ComunasAsc = 'COMUNAS_ASC',
  ComunasDesc = 'COMUNAS_DESC',
  PopulacaoAsc = 'POPULACAO_ASC',
  PopulacaoDesc = 'POPULACAO_DESC',
  MunicipiosAsc = 'MUNICIPIOS_ASC',
  MunicipiosDesc = 'MUNICIPIOS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableProvince` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableProvinceCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `area` field. */
  area?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `nome` field. */
  nome?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `codigo` field. */
  codigo?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `capital` field. */
  capital?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `comunas` field. */
  comunas?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `populacao` field. */
  populacao?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `municipios` field. */
  municipios?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableProvince` object types. All fields are combined with a logical ‘and.’ */
export type DataTableProvinceFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `area` field. */
  area?: Maybe<StringFilter>;
  /** Filter by the object’s `nome` field. */
  nome?: Maybe<StringFilter>;
  /** Filter by the object’s `codigo` field. */
  codigo?: Maybe<StringFilter>;
  /** Filter by the object’s `capital` field. */
  capital?: Maybe<StringFilter>;
  /** Filter by the object’s `comunas` field. */
  comunas?: Maybe<StringFilter>;
  /** Filter by the object’s `populacao` field. */
  populacao?: Maybe<StringFilter>;
  /** Filter by the object’s `municipios` field. */
  municipios?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableProvinceFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableProvinceFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableProvinceFilter>;
};

/** A connection to a list of `DataTableProvince` values. */
export type DataTableProvincesConnection = {
  __typename?: 'DataTableProvincesConnection';
  /** A list of `DataTableProvince` objects. */
  nodes: Array<Maybe<DataTableProvince>>;
  /** A list of edges which contains the `DataTableProvince` and cursor to aid in pagination. */
  edges: Array<DataTableProvincesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableProvince` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableProvince = Node & {
  __typename?: 'DataTableProvince';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  area?: Maybe<Scalars['String']>;
  nome?: Maybe<Scalars['String']>;
  codigo?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  comunas?: Maybe<Scalars['String']>;
  populacao?: Maybe<Scalars['String']>;
  municipios?: Maybe<Scalars['String']>;
};

/** A `DataTableProvince` edge in the connection. */
export type DataTableProvincesEdge = {
  __typename?: 'DataTableProvincesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableProvince` at the end of the edge. */
  node?: Maybe<DataTableProvince>;
};

/** Methods to use when ordering `DataTableStorageCondition`. */
export enum DataTableStorageConditionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PortugueseNameAsc = 'PORTUGUESE_NAME_ASC',
  PortugueseNameDesc = 'PORTUGUESE_NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableStorageCondition` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableStorageConditionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `portugueseName` field. */
  portugueseName?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableStorageCondition` object types. All fields are combined with a logical ‘and.’ */
export type DataTableStorageConditionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `portugueseName` field. */
  portugueseName?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableStorageConditionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableStorageConditionFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableStorageConditionFilter>;
};

/** A connection to a list of `DataTableStorageCondition` values. */
export type DataTableStorageConditionsConnection = {
  __typename?: 'DataTableStorageConditionsConnection';
  /** A list of `DataTableStorageCondition` objects. */
  nodes: Array<Maybe<DataTableStorageCondition>>;
  /** A list of edges which contains the `DataTableStorageCondition` and cursor to aid in pagination. */
  edges: Array<DataTableStorageConditionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableStorageCondition` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableStorageCondition = Node & {
  __typename?: 'DataTableStorageCondition';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** A `DataTableStorageCondition` edge in the connection. */
export type DataTableStorageConditionsEdge = {
  __typename?: 'DataTableStorageConditionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableStorageCondition` at the end of the edge. */
  node?: Maybe<DataTableStorageCondition>;
};

/** Methods to use when ordering `DataTableUnitsOfProportion`. */
export enum DataTableUnitsOfProportionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  LongDescriptionAsc = 'LONG_DESCRIPTION_ASC',
  LongDescriptionDesc = 'LONG_DESCRIPTION_DESC',
  ShortDescriptionAsc = 'SHORT_DESCRIPTION_ASC',
  ShortDescriptionDesc = 'SHORT_DESCRIPTION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataTableUnitsOfProportion` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataTableUnitsOfProportionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `longDescription` field. */
  longDescription?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `shortDescription` field. */
  shortDescription?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataTableUnitsOfProportion` object types. All fields are combined with a logical ‘and.’ */
export type DataTableUnitsOfProportionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `longDescription` field. */
  longDescription?: Maybe<StringFilter>;
  /** Filter by the object’s `shortDescription` field. */
  shortDescription?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataTableUnitsOfProportionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataTableUnitsOfProportionFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataTableUnitsOfProportionFilter>;
};

/** A connection to a list of `DataTableUnitsOfProportion` values. */
export type DataTableUnitsOfProportionsConnection = {
  __typename?: 'DataTableUnitsOfProportionsConnection';
  /** A list of `DataTableUnitsOfProportion` objects. */
  nodes: Array<Maybe<DataTableUnitsOfProportion>>;
  /** A list of edges which contains the `DataTableUnitsOfProportion` and cursor to aid in pagination. */
  edges: Array<DataTableUnitsOfProportionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTableUnitsOfProportion` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataTableUnitsOfProportion = Node & {
  __typename?: 'DataTableUnitsOfProportion';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  code?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
};

/** A `DataTableUnitsOfProportion` edge in the connection. */
export type DataTableUnitsOfProportionsEdge = {
  __typename?: 'DataTableUnitsOfProportionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataTableUnitsOfProportion` at the end of the edge. */
  node?: Maybe<DataTableUnitsOfProportion>;
};

/** Methods to use when ordering `DataView`. */
export enum DataViewsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  PermissionNamesAsc = 'PERMISSION_NAMES_ASC',
  PermissionNamesDesc = 'PERMISSION_NAMES_DESC',
  RowRestrictionsAsc = 'ROW_RESTRICTIONS_ASC',
  RowRestrictionsDesc = 'ROW_RESTRICTIONS_DESC',
  TableViewIncludeColumnsAsc = 'TABLE_VIEW_INCLUDE_COLUMNS_ASC',
  TableViewIncludeColumnsDesc = 'TABLE_VIEW_INCLUDE_COLUMNS_DESC',
  TableViewExcludeColumnsAsc = 'TABLE_VIEW_EXCLUDE_COLUMNS_ASC',
  TableViewExcludeColumnsDesc = 'TABLE_VIEW_EXCLUDE_COLUMNS_DESC',
  TableSearchColumnsAsc = 'TABLE_SEARCH_COLUMNS_ASC',
  TableSearchColumnsDesc = 'TABLE_SEARCH_COLUMNS_DESC',
  DetailViewIncludeColumnsAsc = 'DETAIL_VIEW_INCLUDE_COLUMNS_ASC',
  DetailViewIncludeColumnsDesc = 'DETAIL_VIEW_INCLUDE_COLUMNS_DESC',
  DetailViewExcludeColumnsAsc = 'DETAIL_VIEW_EXCLUDE_COLUMNS_ASC',
  DetailViewExcludeColumnsDesc = 'DETAIL_VIEW_EXCLUDE_COLUMNS_DESC',
  DetailViewHeaderColumnAsc = 'DETAIL_VIEW_HEADER_COLUMN_ASC',
  DetailViewHeaderColumnDesc = 'DETAIL_VIEW_HEADER_COLUMN_DESC',
  FilterIncludeColumnsAsc = 'FILTER_INCLUDE_COLUMNS_ASC',
  FilterIncludeColumnsDesc = 'FILTER_INCLUDE_COLUMNS_DESC',
  FilterExcludeColumnsAsc = 'FILTER_EXCLUDE_COLUMNS_ASC',
  FilterExcludeColumnsDesc = 'FILTER_EXCLUDE_COLUMNS_DESC',
  ShowLinkedApplicationsAsc = 'SHOW_LINKED_APPLICATIONS_ASC',
  ShowLinkedApplicationsDesc = 'SHOW_LINKED_APPLICATIONS_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  DefaultSortColumnAsc = 'DEFAULT_SORT_COLUMN_ASC',
  DefaultSortColumnDesc = 'DEFAULT_SORT_COLUMN_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataView` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataViewCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permissionNames` field. */
  permissionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `rowRestrictions` field. */
  rowRestrictions?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `tableViewIncludeColumns` field. */
  tableViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `tableViewExcludeColumns` field. */
  tableViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `tableSearchColumns` field. */
  tableSearchColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `detailViewIncludeColumns` field. */
  detailViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `detailViewExcludeColumns` field. */
  detailViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `detailViewHeaderColumn` field. */
  detailViewHeaderColumn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `filterIncludeColumns` field. */
  filterIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `filterExcludeColumns` field. */
  filterExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `showLinkedApplications` field. */
  showLinkedApplications?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `defaultSortColumn` field. */
  defaultSortColumn?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataView` object types. All fields are combined with a logical ‘and.’ */
export type DataViewFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `permissionNames` field. */
  permissionNames?: Maybe<StringListFilter>;
  /** Filter by the object’s `rowRestrictions` field. */
  rowRestrictions?: Maybe<JsonFilter>;
  /** Filter by the object’s `tableViewIncludeColumns` field. */
  tableViewIncludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `tableViewExcludeColumns` field. */
  tableViewExcludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `tableSearchColumns` field. */
  tableSearchColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `detailViewIncludeColumns` field. */
  detailViewIncludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `detailViewExcludeColumns` field. */
  detailViewExcludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `detailViewHeaderColumn` field. */
  detailViewHeaderColumn?: Maybe<StringFilter>;
  /** Filter by the object’s `filterIncludeColumns` field. */
  filterIncludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `filterExcludeColumns` field. */
  filterExcludeColumns?: Maybe<StringListFilter>;
  /** Filter by the object’s `showLinkedApplications` field. */
  showLinkedApplications?: Maybe<BooleanFilter>;
  /** Filter by the object’s `priority` field. */
  priority?: Maybe<IntFilter>;
  /** Filter by the object’s `defaultSortColumn` field. */
  defaultSortColumn?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataViewFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataViewFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataViewFilter>;
};

/** A connection to a list of `DataView` values. */
export type DataViewsConnection = {
  __typename?: 'DataViewsConnection';
  /** A list of `DataView` objects. */
  nodes: Array<Maybe<DataView>>;
  /** A list of edges which contains the `DataView` and cursor to aid in pagination. */
  edges: Array<DataViewsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataView` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataView = Node & {
  __typename?: 'DataView';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  tableName: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  permissionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  rowRestrictions?: Maybe<Scalars['JSON']>;
  tableViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableSearchColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewHeaderColumn: Scalars['String'];
  filterIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  filterExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  showLinkedApplications: Scalars['Boolean'];
  priority?: Maybe<Scalars['Int']>;
  defaultSortColumn?: Maybe<Scalars['String']>;
};

/** A `DataView` edge in the connection. */
export type DataViewsEdge = {
  __typename?: 'DataViewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataView` at the end of the edge. */
  node?: Maybe<DataView>;
};

/** Methods to use when ordering `DataViewColumnDefinition`. */
export enum DataViewColumnDefinitionsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  ColumnNameAsc = 'COLUMN_NAME_ASC',
  ColumnNameDesc = 'COLUMN_NAME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  ElementTypePluginCodeAsc = 'ELEMENT_TYPE_PLUGIN_CODE_ASC',
  ElementTypePluginCodeDesc = 'ELEMENT_TYPE_PLUGIN_CODE_DESC',
  ElementParametersAsc = 'ELEMENT_PARAMETERS_ASC',
  ElementParametersDesc = 'ELEMENT_PARAMETERS_DESC',
  AdditionalFormattingAsc = 'ADDITIONAL_FORMATTING_ASC',
  AdditionalFormattingDesc = 'ADDITIONAL_FORMATTING_DESC',
  ValueExpressionAsc = 'VALUE_EXPRESSION_ASC',
  ValueExpressionDesc = 'VALUE_EXPRESSION_DESC',
  SortColumnAsc = 'SORT_COLUMN_ASC',
  SortColumnDesc = 'SORT_COLUMN_DESC',
  FilterParametersAsc = 'FILTER_PARAMETERS_ASC',
  FilterParametersDesc = 'FILTER_PARAMETERS_DESC',
  FilterExpressionAsc = 'FILTER_EXPRESSION_ASC',
  FilterExpressionDesc = 'FILTER_EXPRESSION_DESC',
  FilterDataTypeAsc = 'FILTER_DATA_TYPE_ASC',
  FilterDataTypeDesc = 'FILTER_DATA_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `DataViewColumnDefinition` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type DataViewColumnDefinitionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `columnName` field. */
  columnName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `elementParameters` field. */
  elementParameters?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `additionalFormatting` field. */
  additionalFormatting?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `valueExpression` field. */
  valueExpression?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `sortColumn` field. */
  sortColumn?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `filterParameters` field. */
  filterParameters?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `filterExpression` field. */
  filterExpression?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `filterDataType` field. */
  filterDataType?: Maybe<Scalars['String']>;
};

/** A filter to be used against `DataViewColumnDefinition` object types. All fields are combined with a logical ‘and.’ */
export type DataViewColumnDefinitionFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: Maybe<StringFilter>;
  /** Filter by the object’s `columnName` field. */
  columnName?: Maybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: Maybe<StringFilter>;
  /** Filter by the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: Maybe<StringFilter>;
  /** Filter by the object’s `elementParameters` field. */
  elementParameters?: Maybe<JsonFilter>;
  /** Filter by the object’s `additionalFormatting` field. */
  additionalFormatting?: Maybe<JsonFilter>;
  /** Filter by the object’s `valueExpression` field. */
  valueExpression?: Maybe<JsonFilter>;
  /** Filter by the object’s `sortColumn` field. */
  sortColumn?: Maybe<StringFilter>;
  /** Filter by the object’s `filterParameters` field. */
  filterParameters?: Maybe<JsonFilter>;
  /** Filter by the object’s `filterExpression` field. */
  filterExpression?: Maybe<JsonFilter>;
  /** Filter by the object’s `filterDataType` field. */
  filterDataType?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<DataViewColumnDefinitionFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<DataViewColumnDefinitionFilter>>;
  /** Negates the expression. */
  not?: Maybe<DataViewColumnDefinitionFilter>;
};

/** A connection to a list of `DataViewColumnDefinition` values. */
export type DataViewColumnDefinitionsConnection = {
  __typename?: 'DataViewColumnDefinitionsConnection';
  /** A list of `DataViewColumnDefinition` objects. */
  nodes: Array<Maybe<DataViewColumnDefinition>>;
  /** A list of edges which contains the `DataViewColumnDefinition` and cursor to aid in pagination. */
  edges: Array<DataViewColumnDefinitionsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataViewColumnDefinition` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type DataViewColumnDefinition = Node & {
  __typename?: 'DataViewColumnDefinition';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  tableName?: Maybe<Scalars['String']>;
  columnName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  elementParameters?: Maybe<Scalars['JSON']>;
  additionalFormatting?: Maybe<Scalars['JSON']>;
  valueExpression?: Maybe<Scalars['JSON']>;
  sortColumn?: Maybe<Scalars['String']>;
  filterParameters?: Maybe<Scalars['JSON']>;
  filterExpression?: Maybe<Scalars['JSON']>;
  filterDataType?: Maybe<Scalars['String']>;
};

/** A `DataViewColumnDefinition` edge in the connection. */
export type DataViewColumnDefinitionsEdge = {
  __typename?: 'DataViewColumnDefinitionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `DataViewColumnDefinition` at the end of the edge. */
  node?: Maybe<DataViewColumnDefinition>;
};

/** Methods to use when ordering `ElementTypePlugin`. */
export enum ElementTypePluginsOrderBy {
  Natural = 'NATURAL',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  PathAsc = 'PATH_ASC',
  PathDesc = 'PATH_DESC',
  DisplayComponentNameAsc = 'DISPLAY_COMPONENT_NAME_ASC',
  DisplayComponentNameDesc = 'DISPLAY_COMPONENT_NAME_DESC',
  ConfigComponentNameAsc = 'CONFIG_COMPONENT_NAME_ASC',
  ConfigComponentNameDesc = 'CONFIG_COMPONENT_NAME_DESC',
  RequiredParametersAsc = 'REQUIRED_PARAMETERS_ASC',
  RequiredParametersDesc = 'REQUIRED_PARAMETERS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `ElementTypePlugin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ElementTypePluginCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `category` field. */
  category?: Maybe<TemplateElementCategory>;
  /** Checks for equality with the object’s `path` field. */
  path?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `displayComponentName` field. */
  displayComponentName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `configComponentName` field. */
  configComponentName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `requiredParameters` field. */
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A filter to be used against `ElementTypePlugin` object types. All fields are combined with a logical ‘and.’ */
export type ElementTypePluginFilter = {
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `category` field. */
  category?: Maybe<TemplateElementCategoryFilter>;
  /** Filter by the object’s `path` field. */
  path?: Maybe<StringFilter>;
  /** Filter by the object’s `displayComponentName` field. */
  displayComponentName?: Maybe<StringFilter>;
  /** Filter by the object’s `configComponentName` field. */
  configComponentName?: Maybe<StringFilter>;
  /** Filter by the object’s `requiredParameters` field. */
  requiredParameters?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ElementTypePluginFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ElementTypePluginFilter>>;
  /** Negates the expression. */
  not?: Maybe<ElementTypePluginFilter>;
};

/** A connection to a list of `ElementTypePlugin` values. */
export type ElementTypePluginsConnection = {
  __typename?: 'ElementTypePluginsConnection';
  /** A list of `ElementTypePlugin` objects. */
  nodes: Array<Maybe<ElementTypePlugin>>;
  /** A list of edges which contains the `ElementTypePlugin` and cursor to aid in pagination. */
  edges: Array<ElementTypePluginsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ElementTypePlugin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type ElementTypePlugin = Node & {
  __typename?: 'ElementTypePlugin';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  code: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  path?: Maybe<Scalars['String']>;
  displayComponentName?: Maybe<Scalars['String']>;
  configComponentName?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A `ElementTypePlugin` edge in the connection. */
export type ElementTypePluginsEdge = {
  __typename?: 'ElementTypePluginsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ElementTypePlugin` at the end of the edge. */
  node?: Maybe<ElementTypePlugin>;
};

/** Methods to use when ordering `Filter`. */
export enum FiltersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  QueryAsc = 'QUERY_ASC',
  QueryDesc = 'QUERY_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Filter` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type FilterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `query` field. */
  query?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: Maybe<PermissionPolicyType>;
};

/** A connection to a list of `Filter` values. */
export type FiltersConnection = {
  __typename?: 'FiltersConnection';
  /** A list of `Filter` objects. */
  nodes: Array<Maybe<Filter>>;
  /** A list of edges which contains the `Filter` and cursor to aid in pagination. */
  edges: Array<FiltersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Filter` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Filter` edge in the connection. */
export type FiltersEdge = {
  __typename?: 'FiltersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Filter` at the end of the edge. */
  node?: Maybe<Filter>;
};

/** Methods to use when ordering `Organisation`. */
export enum OrganisationsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  RegistrationAsc = 'REGISTRATION_ASC',
  RegistrationDesc = 'REGISTRATION_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  LogoUrlAsc = 'LOGO_URL_ASC',
  LogoUrlDesc = 'LOGO_URL_DESC',
  IsSystemOrgAsc = 'IS_SYSTEM_ORG_ASC',
  IsSystemOrgDesc = 'IS_SYSTEM_ORG_DESC',
  RegistrationDocumentationAsc = 'REGISTRATION_DOCUMENTATION_ASC',
  RegistrationDocumentationDesc = 'REGISTRATION_DOCUMENTATION_DESC',
  AgentAsc = 'AGENT_ASC',
  AgentDesc = 'AGENT_DESC',
  ContactAsc = 'CONTACT_ASC',
  ContactDesc = 'CONTACT_DESC',
  AuthorisationAsc = 'AUTHORISATION_ASC',
  AuthorisationDesc = 'AUTHORISATION_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ProvinceAsc = 'PROVINCE_ASC',
  ProvinceDesc = 'PROVINCE_DESC',
  PostalAddressAsc = 'POSTAL_ADDRESS_ASC',
  PostalAddressDesc = 'POSTAL_ADDRESS_DESC',
  PostalCountryAsc = 'POSTAL_COUNTRY_ASC',
  PostalCountryDesc = 'POSTAL_COUNTRY_DESC',
  PostalProvinceAsc = 'POSTAL_PROVINCE_ASC',
  PostalProvinceDesc = 'POSTAL_PROVINCE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  RegistrationDateAsc = 'REGISTRATION_DATE_ASC',
  RegistrationDateDesc = 'REGISTRATION_DATE_DESC',
  AgentIdAsc = 'AGENT_ID_ASC',
  AgentIdDesc = 'AGENT_ID_DESC',
  TypeFilterDataAsc = 'TYPE_FILTER_DATA_ASC',
  TypeFilterDataDesc = 'TYPE_FILTER_DATA_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `Organisation` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type OrganisationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registration` field. */
  registration?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoUrl` field. */
  logoUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isSystemOrg` field. */
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `registrationDocumentation` field. */
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `agent` field. */
  agent?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `contact` field. */
  contact?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `authorisation` field. */
  authorisation?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `province` field. */
  province?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalAddress` field. */
  postalAddress?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalCountry` field. */
  postalCountry?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `postalProvince` field. */
  postalProvince?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `registrationDate` field. */
  registrationDate?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `agentId` field. */
  agentId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `typeFilterData` field. */
  typeFilterData?: Maybe<Scalars['String']>;
};

/** A connection to a list of `Organisation` values. */
export type OrganisationsConnection = {
  __typename?: 'OrganisationsConnection';
  /** A list of `Organisation` objects. */
  nodes: Array<Maybe<Organisation>>;
  /** A list of edges which contains the `Organisation` and cursor to aid in pagination. */
  edges: Array<OrganisationsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Organisation` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `Organisation` edge in the connection. */
export type OrganisationsEdge = {
  __typename?: 'OrganisationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `Organisation` at the end of the edge. */
  node?: Maybe<Organisation>;
};

/** Methods to use when ordering `PermissionPolicy`. */
export enum PermissionPoliciesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  RulesAsc = 'RULES_ASC',
  RulesDesc = 'RULES_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  IsAdminAsc = 'IS_ADMIN_ASC',
  IsAdminDesc = 'IS_ADMIN_DESC',
  DefaultRestrictionsAsc = 'DEFAULT_RESTRICTIONS_ASC',
  DefaultRestrictionsDesc = 'DEFAULT_RESTRICTIONS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `PermissionPolicy` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PermissionPolicyCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `rules` field. */
  rules?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `type` field. */
  type?: Maybe<PermissionPolicyType>;
  /** Checks for equality with the object’s `isAdmin` field. */
  isAdmin?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `defaultRestrictions` field. */
  defaultRestrictions?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `PermissionPolicy` values. */
export type PermissionPoliciesConnection = {
  __typename?: 'PermissionPoliciesConnection';
  /** A list of `PermissionPolicy` objects. */
  nodes: Array<Maybe<PermissionPolicy>>;
  /** A list of edges which contains the `PermissionPolicy` and cursor to aid in pagination. */
  edges: Array<PermissionPoliciesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionPolicy` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `PermissionPolicy` edge in the connection. */
export type PermissionPoliciesEdge = {
  __typename?: 'PermissionPoliciesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PermissionPolicy` at the end of the edge. */
  node?: Maybe<PermissionPolicy>;
};

/** Methods to use when ordering `PermissionsAll`. */
export enum PermissionsAllsOrderBy {
  Natural = 'NATURAL',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  PermissionNameAsc = 'PERMISSION_NAME_ASC',
  PermissionNameDesc = 'PERMISSION_NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  ReviewLevelAsc = 'REVIEW_LEVEL_ASC',
  ReviewLevelDesc = 'REVIEW_LEVEL_DESC',
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  CanSelfAssignAsc = 'CAN_SELF_ASSIGN_ASC',
  CanSelfAssignDesc = 'CAN_SELF_ASSIGN_DESC',
  CanMakeFinalDecisionAsc = 'CAN_MAKE_FINAL_DECISION_ASC',
  CanMakeFinalDecisionDesc = 'CAN_MAKE_FINAL_DECISION_DESC',
  RestrictionsAsc = 'RESTRICTIONS_ASC',
  RestrictionsDesc = 'RESTRICTIONS_DESC',
  PolicyNameAsc = 'POLICY_NAME_ASC',
  PolicyNameDesc = 'POLICY_NAME_DESC',
  PermissionTypeAsc = 'PERMISSION_TYPE_ASC',
  PermissionTypeDesc = 'PERMISSION_TYPE_DESC',
  IsAdminAsc = 'IS_ADMIN_ASC',
  IsAdminDesc = 'IS_ADMIN_DESC',
  PermissionPolicyIdAsc = 'PERMISSION_POLICY_ID_ASC',
  PermissionPolicyIdDesc = 'PERMISSION_POLICY_ID_DESC',
  PermissionPolicyRulesAsc = 'PERMISSION_POLICY_RULES_ASC',
  PermissionPolicyRulesDesc = 'PERMISSION_POLICY_RULES_DESC',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  TemplatePermissionIdAsc = 'TEMPLATE_PERMISSION_ID_ASC',
  TemplatePermissionIdDesc = 'TEMPLATE_PERMISSION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  PermissionJoinIdAsc = 'PERMISSION_JOIN_ID_ASC',
  PermissionJoinIdDesc = 'PERMISSION_JOIN_ID_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  IsUserCategoryAsc = 'IS_USER_CATEGORY_ASC',
  IsUserCategoryDesc = 'IS_USER_CATEGORY_DESC',
  IsSystemOrgPermissionAsc = 'IS_SYSTEM_ORG_PERMISSION_ASC',
  IsSystemOrgPermissionDesc = 'IS_SYSTEM_ORG_PERMISSION_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC'
}

/** A condition to be used against `PermissionsAll` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PermissionsAllCondition = {
  /** Checks for equality with the object’s `username` field. */
  username?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permissionName` field. */
  permissionName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `description` field. */
  description?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `reviewLevel` field. */
  reviewLevel?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `canSelfAssign` field. */
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `restrictions` field. */
  restrictions?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `policyName` field. */
  policyName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permissionType` field. */
  permissionType?: Maybe<PermissionPolicyType>;
  /** Checks for equality with the object’s `isAdmin` field. */
  isAdmin?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `permissionPolicyId` field. */
  permissionPolicyId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `permissionPolicyRules` field. */
  permissionPolicyRules?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templatePermissionId` field. */
  templatePermissionId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `permissionJoinId` field. */
  permissionJoinId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `isUserCategory` field. */
  isUserCategory?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `PermissionsAll` object types. All fields are combined with a logical ‘and.’ */
export type PermissionsAllFilter = {
  /** Filter by the object’s `username` field. */
  username?: Maybe<StringFilter>;
  /** Filter by the object’s `orgName` field. */
  orgName?: Maybe<StringFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: Maybe<StringFilter>;
  /** Filter by the object’s `permissionName` field. */
  permissionName?: Maybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: Maybe<StringFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewLevel` field. */
  reviewLevel?: Maybe<IntFilter>;
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: Maybe<StringListFilter>;
  /** Filter by the object’s `canSelfAssign` field. */
  canSelfAssign?: Maybe<BooleanFilter>;
  /** Filter by the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: Maybe<BooleanFilter>;
  /** Filter by the object’s `restrictions` field. */
  restrictions?: Maybe<JsonFilter>;
  /** Filter by the object’s `policyName` field. */
  policyName?: Maybe<StringFilter>;
  /** Filter by the object’s `permissionType` field. */
  permissionType?: Maybe<PermissionPolicyTypeFilter>;
  /** Filter by the object’s `isAdmin` field. */
  isAdmin?: Maybe<BooleanFilter>;
  /** Filter by the object’s `permissionPolicyId` field. */
  permissionPolicyId?: Maybe<IntFilter>;
  /** Filter by the object’s `permissionPolicyRules` field. */
  permissionPolicyRules?: Maybe<JsonFilter>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: Maybe<IntFilter>;
  /** Filter by the object’s `templatePermissionId` field. */
  templatePermissionId?: Maybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: Maybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `permissionJoinId` field. */
  permissionJoinId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `isUserCategory` field. */
  isUserCategory?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PermissionsAllFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PermissionsAllFilter>>;
  /** Negates the expression. */
  not?: Maybe<PermissionsAllFilter>;
};

/** A connection to a list of `PermissionsAll` values. */
export type PermissionsAllsConnection = {
  __typename?: 'PermissionsAllsConnection';
  /** A list of `PermissionsAll` objects. */
  nodes: Array<Maybe<PermissionsAll>>;
  /** A list of edges which contains the `PermissionsAll` and cursor to aid in pagination. */
  edges: Array<PermissionsAllsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionsAll` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type PermissionsAll = {
  __typename?: 'PermissionsAll';
  username?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  permissionName?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  stageNumber?: Maybe<Scalars['Int']>;
  reviewLevel?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  restrictions?: Maybe<Scalars['JSON']>;
  policyName?: Maybe<Scalars['String']>;
  permissionType?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  permissionPolicyRules?: Maybe<Scalars['JSON']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  templatePermissionId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  permissionJoinId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  isUserCategory?: Maybe<Scalars['Boolean']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  isActive?: Maybe<Scalars['Boolean']>;
};

/** A `PermissionsAll` edge in the connection. */
export type PermissionsAllsEdge = {
  __typename?: 'PermissionsAllsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PermissionsAll` at the end of the edge. */
  node?: Maybe<PermissionsAll>;
};

/** Methods to use when ordering `PostgresRowLevel`. */
export enum PostgresRowLevelsOrderBy {
  Natural = 'NATURAL',
  SchemanameAsc = 'SCHEMANAME_ASC',
  SchemanameDesc = 'SCHEMANAME_DESC',
  TablenameAsc = 'TABLENAME_ASC',
  TablenameDesc = 'TABLENAME_DESC',
  PolicynameAsc = 'POLICYNAME_ASC',
  PolicynameDesc = 'POLICYNAME_DESC',
  PermissiveAsc = 'PERMISSIVE_ASC',
  PermissiveDesc = 'PERMISSIVE_DESC',
  RolesAsc = 'ROLES_ASC',
  RolesDesc = 'ROLES_DESC',
  CmdAsc = 'CMD_ASC',
  CmdDesc = 'CMD_DESC',
  QualAsc = 'QUAL_ASC',
  QualDesc = 'QUAL_DESC',
  WithCheckAsc = 'WITH_CHECK_ASC',
  WithCheckDesc = 'WITH_CHECK_DESC'
}

/** A condition to be used against `PostgresRowLevel` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type PostgresRowLevelCondition = {
  /** Checks for equality with the object’s `schemaname` field. */
  schemaname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `tablename` field. */
  tablename?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `policyname` field. */
  policyname?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `permissive` field. */
  permissive?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `roles` field. */
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Checks for equality with the object’s `cmd` field. */
  cmd?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `qual` field. */
  qual?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `withCheck` field. */
  withCheck?: Maybe<Scalars['String']>;
};

/** A filter to be used against `PostgresRowLevel` object types. All fields are combined with a logical ‘and.’ */
export type PostgresRowLevelFilter = {
  /** Filter by the object’s `schemaname` field. */
  schemaname?: Maybe<StringFilter>;
  /** Filter by the object’s `tablename` field. */
  tablename?: Maybe<StringFilter>;
  /** Filter by the object’s `policyname` field. */
  policyname?: Maybe<StringFilter>;
  /** Filter by the object’s `permissive` field. */
  permissive?: Maybe<StringFilter>;
  /** Filter by the object’s `roles` field. */
  roles?: Maybe<StringListFilter>;
  /** Filter by the object’s `cmd` field. */
  cmd?: Maybe<StringFilter>;
  /** Filter by the object’s `qual` field. */
  qual?: Maybe<StringFilter>;
  /** Filter by the object’s `withCheck` field. */
  withCheck?: Maybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<PostgresRowLevelFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<PostgresRowLevelFilter>>;
  /** Negates the expression. */
  not?: Maybe<PostgresRowLevelFilter>;
};

/** A connection to a list of `PostgresRowLevel` values. */
export type PostgresRowLevelsConnection = {
  __typename?: 'PostgresRowLevelsConnection';
  /** A list of `PostgresRowLevel` objects. */
  nodes: Array<Maybe<PostgresRowLevel>>;
  /** A list of edges which contains the `PostgresRowLevel` and cursor to aid in pagination. */
  edges: Array<PostgresRowLevelsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PostgresRowLevel` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type PostgresRowLevel = {
  __typename?: 'PostgresRowLevel';
  schemaname?: Maybe<Scalars['String']>;
  tablename?: Maybe<Scalars['String']>;
  policyname?: Maybe<Scalars['String']>;
  permissive?: Maybe<Scalars['String']>;
  roles?: Maybe<Array<Maybe<Scalars['String']>>>;
  cmd?: Maybe<Scalars['String']>;
  qual?: Maybe<Scalars['String']>;
  withCheck?: Maybe<Scalars['String']>;
};

/** A `PostgresRowLevel` edge in the connection. */
export type PostgresRowLevelsEdge = {
  __typename?: 'PostgresRowLevelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `PostgresRowLevel` at the end of the edge. */
  node?: Maybe<PostgresRowLevel>;
};

/** Methods to use when ordering `SchemaColumn`. */
export enum SchemaColumnsOrderBy {
  Natural = 'NATURAL',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  TableTypeAsc = 'TABLE_TYPE_ASC',
  TableTypeDesc = 'TABLE_TYPE_DESC',
  ColumnNameAsc = 'COLUMN_NAME_ASC',
  ColumnNameDesc = 'COLUMN_NAME_DESC',
  IsNullableAsc = 'IS_NULLABLE_ASC',
  IsNullableDesc = 'IS_NULLABLE_DESC',
  IsGeneratedAsc = 'IS_GENERATED_ASC',
  IsGeneratedDesc = 'IS_GENERATED_DESC',
  DataTypeAsc = 'DATA_TYPE_ASC',
  DataTypeDesc = 'DATA_TYPE_DESC',
  SubDataTypeAsc = 'SUB_DATA_TYPE_ASC',
  SubDataTypeDesc = 'SUB_DATA_TYPE_DESC',
  ConstraintTypeAsc = 'CONSTRAINT_TYPE_ASC',
  ConstraintTypeDesc = 'CONSTRAINT_TYPE_DESC',
  FkToTableNameAsc = 'FK_TO_TABLE_NAME_ASC',
  FkToTableNameDesc = 'FK_TO_TABLE_NAME_DESC',
  FkToColumnNameAsc = 'FK_TO_COLUMN_NAME_ASC',
  FkToColumnNameDesc = 'FK_TO_COLUMN_NAME_DESC'
}

/** A condition to be used against `SchemaColumn` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type SchemaColumnCondition = {
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `tableType` field. */
  tableType?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `columnName` field. */
  columnName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `isNullable` field. */
  isNullable?: Maybe<Scalars['YesOrNo']>;
  /** Checks for equality with the object’s `isGenerated` field. */
  isGenerated?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `dataType` field. */
  dataType?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `subDataType` field. */
  subDataType?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `constraintType` field. */
  constraintType?: Maybe<Scalars['CharacterData']>;
  /** Checks for equality with the object’s `fkToTableName` field. */
  fkToTableName?: Maybe<Scalars['SqlIdentifier']>;
  /** Checks for equality with the object’s `fkToColumnName` field. */
  fkToColumnName?: Maybe<Scalars['SqlIdentifier']>;
};


/** A filter to be used against `SchemaColumn` object types. All fields are combined with a logical ‘and.’ */
export type SchemaColumnFilter = {
  /** Filter by the object’s `tableName` field. */
  tableName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `tableType` field. */
  tableType?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `columnName` field. */
  columnName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `isNullable` field. */
  isNullable?: Maybe<YesOrNoFilter>;
  /** Filter by the object’s `isGenerated` field. */
  isGenerated?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `dataType` field. */
  dataType?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `subDataType` field. */
  subDataType?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `constraintType` field. */
  constraintType?: Maybe<CharacterDataFilter>;
  /** Filter by the object’s `fkToTableName` field. */
  fkToTableName?: Maybe<SqlIdentifierFilter>;
  /** Filter by the object’s `fkToColumnName` field. */
  fkToColumnName?: Maybe<SqlIdentifierFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SchemaColumnFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SchemaColumnFilter>>;
  /** Negates the expression. */
  not?: Maybe<SchemaColumnFilter>;
};

/** A filter to be used against YesOrNo fields. All fields are combined with a logical ‘and.’ */
export type YesOrNoFilter = {
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: Maybe<Scalars['Boolean']>;
  /** Equal to the specified value. */
  equalTo?: Maybe<Scalars['YesOrNo']>;
  /** Not equal to the specified value. */
  notEqualTo?: Maybe<Scalars['YesOrNo']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: Maybe<Scalars['YesOrNo']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: Maybe<Scalars['YesOrNo']>;
  /** Included in the specified list. */
  in?: Maybe<Array<Scalars['YesOrNo']>>;
  /** Not included in the specified list. */
  notIn?: Maybe<Array<Scalars['YesOrNo']>>;
  /** Less than the specified value. */
  lessThan?: Maybe<Scalars['YesOrNo']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: Maybe<Scalars['YesOrNo']>;
  /** Greater than the specified value. */
  greaterThan?: Maybe<Scalars['YesOrNo']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: Maybe<Scalars['YesOrNo']>;
  /** Contains the specified string (case-sensitive). */
  includes?: Maybe<Scalars['YesOrNo']>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: Maybe<Scalars['YesOrNo']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: Maybe<Scalars['YesOrNo']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: Maybe<Scalars['YesOrNo']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: Maybe<Scalars['YesOrNo']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: Maybe<Scalars['YesOrNo']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: Maybe<Scalars['YesOrNo']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: Maybe<Scalars['YesOrNo']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: Maybe<Array<Scalars['YesOrNo']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: Maybe<Array<Scalars['YesOrNo']>>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: Maybe<Scalars['YesOrNo']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: Maybe<Scalars['YesOrNo']>;
};

/** A connection to a list of `SchemaColumn` values. */
export type SchemaColumnsConnection = {
  __typename?: 'SchemaColumnsConnection';
  /** A list of `SchemaColumn` objects. */
  nodes: Array<Maybe<SchemaColumn>>;
  /** A list of edges which contains the `SchemaColumn` and cursor to aid in pagination. */
  edges: Array<SchemaColumnsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SchemaColumn` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type SchemaColumn = {
  __typename?: 'SchemaColumn';
  tableName?: Maybe<Scalars['SqlIdentifier']>;
  tableType?: Maybe<Scalars['CharacterData']>;
  columnName?: Maybe<Scalars['SqlIdentifier']>;
  isNullable?: Maybe<Scalars['YesOrNo']>;
  isGenerated?: Maybe<Scalars['CharacterData']>;
  dataType?: Maybe<Scalars['CharacterData']>;
  subDataType?: Maybe<Scalars['CharacterData']>;
  constraintType?: Maybe<Scalars['CharacterData']>;
  fkToTableName?: Maybe<Scalars['SqlIdentifier']>;
  fkToColumnName?: Maybe<Scalars['SqlIdentifier']>;
};

/** A `SchemaColumn` edge in the connection. */
export type SchemaColumnsEdge = {
  __typename?: 'SchemaColumnsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SchemaColumn` at the end of the edge. */
  node?: Maybe<SchemaColumn>;
};

/** Methods to use when ordering `SystemInfo`. */
export enum SystemInfosOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `SystemInfo` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type SystemInfoCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `name` field. */
  name?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `value` field. */
  value?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
};

/** A filter to be used against `SystemInfo` object types. All fields are combined with a logical ‘and.’ */
export type SystemInfoFilter = {
  /** Filter by the object’s `id` field. */
  id?: Maybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: Maybe<StringFilter>;
  /** Filter by the object’s `value` field. */
  value?: Maybe<JsonFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: Maybe<DatetimeFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<SystemInfoFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<SystemInfoFilter>>;
  /** Negates the expression. */
  not?: Maybe<SystemInfoFilter>;
};

/** A connection to a list of `SystemInfo` values. */
export type SystemInfosConnection = {
  __typename?: 'SystemInfosConnection';
  /** A list of `SystemInfo` objects. */
  nodes: Array<Maybe<SystemInfo>>;
  /** A list of edges which contains the `SystemInfo` and cursor to aid in pagination. */
  edges: Array<SystemInfosEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SystemInfo` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type SystemInfo = Node & {
  __typename?: 'SystemInfo';
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID'];
  id: Scalars['Int'];
  name: Scalars['String'];
  value?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
};

/** A `SystemInfo` edge in the connection. */
export type SystemInfosEdge = {
  __typename?: 'SystemInfosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `SystemInfo` at the end of the edge. */
  node?: Maybe<SystemInfo>;
};

/** Methods to use when ordering `TemplateCategory`. */
export enum TemplateCategoriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  IconAsc = 'ICON_ASC',
  IconDesc = 'ICON_DESC',
  UiLocationAsc = 'UI_LOCATION_ASC',
  UiLocationDesc = 'UI_LOCATION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TemplateCategory` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TemplateCategoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `code` field. */
  code?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `title` field. */
  title?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `icon` field. */
  icon?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `uiLocation` field. */
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
};

/** A connection to a list of `TemplateCategory` values. */
export type TemplateCategoriesConnection = {
  __typename?: 'TemplateCategoriesConnection';
  /** A list of `TemplateCategory` objects. */
  nodes: Array<Maybe<TemplateCategory>>;
  /** A list of edges which contains the `TemplateCategory` and cursor to aid in pagination. */
  edges: Array<TemplateCategoriesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateCategory` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `TemplateCategory` edge in the connection. */
export type TemplateCategoriesEdge = {
  __typename?: 'TemplateCategoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TemplateCategory` at the end of the edge. */
  node?: Maybe<TemplateCategory>;
};

/** Methods to use when ordering `TriggerQueue`. */
export enum TriggerQueuesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TriggerTypeAsc = 'TRIGGER_TYPE_ASC',
  TriggerTypeDesc = 'TRIGGER_TYPE_DESC',
  TableAsc = 'TABLE_ASC',
  TableDesc = 'TABLE_DESC',
  RecordIdAsc = 'RECORD_ID_ASC',
  RecordIdDesc = 'RECORD_ID_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  LogAsc = 'LOG_ASC',
  LogDesc = 'LOG_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `TriggerQueue` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type TriggerQueueCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `triggerType` field. */
  triggerType?: Maybe<Trigger>;
  /** Checks for equality with the object’s `table` field. */
  table?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `recordId` field. */
  recordId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `data` field. */
  data?: Maybe<Scalars['JSON']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: Maybe<Scalars['Datetime']>;
  /** Checks for equality with the object’s `status` field. */
  status?: Maybe<TriggerQueueStatus>;
  /** Checks for equality with the object’s `log` field. */
  log?: Maybe<Scalars['JSON']>;
};

/** A connection to a list of `TriggerQueue` values. */
export type TriggerQueuesConnection = {
  __typename?: 'TriggerQueuesConnection';
  /** A list of `TriggerQueue` objects. */
  nodes: Array<Maybe<TriggerQueue>>;
  /** A list of edges which contains the `TriggerQueue` and cursor to aid in pagination. */
  edges: Array<TriggerQueuesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TriggerQueue` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `TriggerQueue` edge in the connection. */
export type TriggerQueuesEdge = {
  __typename?: 'TriggerQueuesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `TriggerQueue` at the end of the edge. */
  node?: Maybe<TriggerQueue>;
};

/** Methods to use when ordering `User`. */
export enum UsersOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  FullNameAsc = 'FULL_NAME_ASC',
  FullNameDesc = 'FULL_NAME_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  DateOfBirthAsc = 'DATE_OF_BIRTH_ASC',
  DateOfBirthDesc = 'DATE_OF_BIRTH_DESC',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  PhoneAsc = 'PHONE_ASC',
  PhoneDesc = 'PHONE_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  ProvinceAsc = 'PROVINCE_ASC',
  ProvinceDesc = 'PROVINCE_DESC',
  RegistrationDateAsc = 'REGISTRATION_DATE_ASC',
  RegistrationDateDesc = 'REGISTRATION_DATE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `fullName` field. */
  fullName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `username` field. */
  username?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dateOfBirth` field. */
  dateOfBirth?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `passwordHash` field. */
  passwordHash?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `phone` field. */
  phone?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `country` field. */
  country?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `province` field. */
  province?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registrationDate` field. */
  registrationDate?: Maybe<Scalars['Datetime']>;
};

/** A connection to a list of `User` values. */
export type UsersConnection = {
  __typename?: 'UsersConnection';
  /** A list of `User` objects. */
  nodes: Array<Maybe<User>>;
  /** A list of edges which contains the `User` and cursor to aid in pagination. */
  edges: Array<UsersEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `User` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  __typename?: 'UsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `User` at the end of the edge. */
  node?: Maybe<User>;
};

/** Methods to use when ordering `UserOrgJoin`. */
export enum UserOrgJoinsOrderBy {
  Natural = 'NATURAL',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  DateOfBirthAsc = 'DATE_OF_BIRTH_ASC',
  DateOfBirthDesc = 'DATE_OF_BIRTH_DESC',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC',
  RegistrationAsc = 'REGISTRATION_ASC',
  RegistrationDesc = 'REGISTRATION_DESC',
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  LogoUrlAsc = 'LOGO_URL_ASC',
  LogoUrlDesc = 'LOGO_URL_DESC',
  IsSystemOrgAsc = 'IS_SYSTEM_ORG_ASC',
  IsSystemOrgDesc = 'IS_SYSTEM_ORG_DESC'
}

/** A condition to be used against `UserOrgJoin` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserOrgJoinCondition = {
  /** Checks for equality with the object’s `userId` field. */
  userId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `username` field. */
  username?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `email` field. */
  email?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `dateOfBirth` field. */
  dateOfBirth?: Maybe<Scalars['Date']>;
  /** Checks for equality with the object’s `passwordHash` field. */
  passwordHash?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: Maybe<Scalars['Int']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `registration` field. */
  registration?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `address` field. */
  address?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `logoUrl` field. */
  logoUrl?: Maybe<Scalars['String']>;
  /** Checks for equality with the object’s `isSystemOrg` field. */
  isSystemOrg?: Maybe<Scalars['Boolean']>;
};

/** A filter to be used against `UserOrgJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserOrgJoinFilter = {
  /** Filter by the object’s `userId` field. */
  userId?: Maybe<IntFilter>;
  /** Filter by the object’s `username` field. */
  username?: Maybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: Maybe<StringFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: Maybe<StringFilter>;
  /** Filter by the object’s `email` field. */
  email?: Maybe<StringFilter>;
  /** Filter by the object’s `dateOfBirth` field. */
  dateOfBirth?: Maybe<DateFilter>;
  /** Filter by the object’s `passwordHash` field. */
  passwordHash?: Maybe<StringFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: Maybe<IntFilter>;
  /** Filter by the object’s `orgName` field. */
  orgName?: Maybe<StringFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: Maybe<StringFilter>;
  /** Filter by the object’s `registration` field. */
  registration?: Maybe<StringFilter>;
  /** Filter by the object’s `address` field. */
  address?: Maybe<StringFilter>;
  /** Filter by the object’s `logoUrl` field. */
  logoUrl?: Maybe<StringFilter>;
  /** Filter by the object’s `isSystemOrg` field. */
  isSystemOrg?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<UserOrgJoinFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<UserOrgJoinFilter>>;
  /** Negates the expression. */
  not?: Maybe<UserOrgJoinFilter>;
};

/** A connection to a list of `UserOrgJoin` values. */
export type UserOrgJoinsConnection = {
  __typename?: 'UserOrgJoinsConnection';
  /** A list of `UserOrgJoin` objects. */
  nodes: Array<Maybe<UserOrgJoin>>;
  /** A list of edges which contains the `UserOrgJoin` and cursor to aid in pagination. */
  edges: Array<UserOrgJoinsEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserOrgJoin` you could get from the connection. */
  totalCount: Scalars['Int'];
};

export type UserOrgJoin = {
  __typename?: 'UserOrgJoin';
  userId?: Maybe<Scalars['Int']>;
  username?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  orgId?: Maybe<Scalars['Int']>;
  orgName?: Maybe<Scalars['String']>;
  userRole?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
};

/** A `UserOrgJoin` edge in the connection. */
export type UserOrgJoinsEdge = {
  __typename?: 'UserOrgJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `UserOrgJoin` at the end of the edge. */
  node?: Maybe<UserOrgJoin>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterApplicantConnection = {
  __typename?: 'ApplicationListFilterApplicantConnection';
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']>>;
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterApplicantEdge>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterApplicantEdge = {
  __typename?: 'ApplicationListFilterApplicantEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterAssignerConnection = {
  __typename?: 'ApplicationListFilterAssignerConnection';
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']>>;
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterAssignerEdge>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterAssignerEdge = {
  __typename?: 'ApplicationListFilterAssignerEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterOrganisationConnection = {
  __typename?: 'ApplicationListFilterOrganisationConnection';
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']>>;
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterOrganisationEdge>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterOrganisationEdge = {
  __typename?: 'ApplicationListFilterOrganisationEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterReviewerConnection = {
  __typename?: 'ApplicationListFilterReviewerConnection';
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']>>;
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterReviewerEdge>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterReviewerEdge = {
  __typename?: 'ApplicationListFilterReviewerEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterStageConnection = {
  __typename?: 'ApplicationListFilterStageConnection';
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']>>;
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterStageEdge>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterStageEdge = {
  __typename?: 'ApplicationListFilterStageEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']>;
};


/** A filter to be used against `AssignedQuestionsRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignedQuestionsRecordFilter = {
  /** Filter by the object’s `reviewId` field. */
  reviewId?: Maybe<IntFilter>;
  /** Filter by the object’s `responseId` field. */
  responseId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewResponseCode` field. */
  reviewResponseCode?: Maybe<StringFilter>;
  /** Filter by the object’s `reviewResponseStatus` field. */
  reviewResponseStatus?: Maybe<ReviewResponseStatusFilter>;
  /** Filter by the object’s `decision` field. */
  decision?: Maybe<ReviewResponseDecisionFilter>;
  /** Filter by the object’s `isOptional` field. */
  isOptional?: Maybe<BooleanFilter>;
  /** Filter by the object’s `isLastestReview` field. */
  isLastestReview?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AssignedQuestionsRecordFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AssignedQuestionsRecordFilter>>;
  /** Negates the expression. */
  not?: Maybe<AssignedQuestionsRecordFilter>;
};

/** A connection to a list of `AssignedQuestionsRecord` values. */
export type AssignedQuestionsConnection = {
  __typename?: 'AssignedQuestionsConnection';
  /** A list of `AssignedQuestionsRecord` objects. */
  nodes: Array<Maybe<AssignedQuestionsRecord>>;
  /** A list of edges which contains the `AssignedQuestionsRecord` and cursor to aid in pagination. */
  edges: Array<AssignedQuestionEdge>;
  /** The count of *all* `AssignedQuestionsRecord` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** The return type of our `assignedQuestions` query. */
export type AssignedQuestionsRecord = {
  __typename?: 'AssignedQuestionsRecord';
  reviewId?: Maybe<Scalars['Int']>;
  responseId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  reviewResponseCode?: Maybe<Scalars['String']>;
  reviewResponseStatus?: Maybe<ReviewResponseStatus>;
  decision?: Maybe<ReviewResponseDecision>;
  isOptional?: Maybe<Scalars['Boolean']>;
  isLastestReview?: Maybe<Scalars['Boolean']>;
};

/** A `AssignedQuestionsRecord` edge in the connection. */
export type AssignedQuestionEdge = {
  __typename?: 'AssignedQuestionEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AssignedQuestionsRecord` at the end of the edge. */
  node?: Maybe<AssignedQuestionsRecord>;
};

/** A filter to be used against `AssignerListRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignerListRecordFilter = {
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: Maybe<AssignerActionFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AssignerListRecordFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AssignerListRecordFilter>>;
  /** Negates the expression. */
  not?: Maybe<AssignerListRecordFilter>;
};

/** A connection to a list of `AssignerListRecord` values. */
export type AssignerListConnection = {
  __typename?: 'AssignerListConnection';
  /** A list of `AssignerListRecord` objects. */
  nodes: Array<Maybe<AssignerListRecord>>;
  /** A list of edges which contains the `AssignerListRecord` and cursor to aid in pagination. */
  edges: Array<AssignerListEdge>;
  /** The count of *all* `AssignerListRecord` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** The return type of our `assignerList` query. */
export type AssignerListRecord = {
  __typename?: 'AssignerListRecord';
  applicationId?: Maybe<Scalars['Int']>;
  assignerAction?: Maybe<AssignerAction>;
};

/** A `AssignerListRecord` edge in the connection. */
export type AssignerListEdge = {
  __typename?: 'AssignerListEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AssignerListRecord` at the end of the edge. */
  node?: Maybe<AssignerListRecord>;
};

/** A filter to be used against `AssignmentListRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignmentListRecordFilter = {
  /** Filter by the object’s `applicationId` field. */
  applicationId?: Maybe<IntFilter>;
  /** Filter by the object’s `reviewers` field. */
  reviewers?: Maybe<StringListFilter>;
  /** Filter by the object’s `assigners` field. */
  assigners?: Maybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<AssignmentListRecordFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<AssignmentListRecordFilter>>;
  /** Negates the expression. */
  not?: Maybe<AssignmentListRecordFilter>;
};

/** A connection to a list of `AssignmentListRecord` values. */
export type AssignmentListConnection = {
  __typename?: 'AssignmentListConnection';
  /** A list of `AssignmentListRecord` objects. */
  nodes: Array<Maybe<AssignmentListRecord>>;
  /** A list of edges which contains the `AssignmentListRecord` and cursor to aid in pagination. */
  edges: Array<AssignmentListEdge>;
  /** The count of *all* `AssignmentListRecord` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** The return type of our `assignmentList` query. */
export type AssignmentListRecord = {
  __typename?: 'AssignmentListRecord';
  applicationId?: Maybe<Scalars['Int']>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigners?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A `AssignmentListRecord` edge in the connection. */
export type AssignmentListEdge = {
  __typename?: 'AssignmentListEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `AssignmentListRecord` at the end of the edge. */
  node?: Maybe<AssignmentListRecord>;
};

/** A filter to be used against `ReviewableQuestionsRecord` object types. All fields are combined with a logical ‘and.’ */
export type ReviewableQuestionsRecordFilter = {
  /** Filter by the object’s `code` field. */
  code?: Maybe<StringFilter>;
  /** Filter by the object’s `reviewability` field. */
  reviewability?: Maybe<ReviewabilityFilter>;
  /** Filter by the object’s `responseId` field. */
  responseId?: Maybe<IntFilter>;
  /** Filter by the object’s `responseValue` field. */
  responseValue?: Maybe<JsonFilter>;
  /** Filter by the object’s `isOptional` field. */
  isOptional?: Maybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: Maybe<Array<ReviewableQuestionsRecordFilter>>;
  /** Checks for any expressions in this list. */
  or?: Maybe<Array<ReviewableQuestionsRecordFilter>>;
  /** Negates the expression. */
  not?: Maybe<ReviewableQuestionsRecordFilter>;
};

/** A connection to a list of `ReviewableQuestionsRecord` values. */
export type ReviewableQuestionsConnection = {
  __typename?: 'ReviewableQuestionsConnection';
  /** A list of `ReviewableQuestionsRecord` objects. */
  nodes: Array<Maybe<ReviewableQuestionsRecord>>;
  /** A list of edges which contains the `ReviewableQuestionsRecord` and cursor to aid in pagination. */
  edges: Array<ReviewableQuestionEdge>;
  /** The count of *all* `ReviewableQuestionsRecord` you could get from the connection. */
  totalCount: Scalars['Int'];
};

/** The return type of our `reviewableQuestions` query. */
export type ReviewableQuestionsRecord = {
  __typename?: 'ReviewableQuestionsRecord';
  code?: Maybe<Scalars['String']>;
  reviewability?: Maybe<Reviewability>;
  responseId?: Maybe<Scalars['Int']>;
  responseValue?: Maybe<Scalars['JSON']>;
  isOptional?: Maybe<Scalars['Boolean']>;
};

/** A `ReviewableQuestionsRecord` edge in the connection. */
export type ReviewableQuestionEdge = {
  __typename?: 'ReviewableQuestionEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']>;
  /** The `ReviewableQuestionsRecord` at the end of the edge. */
  node?: Maybe<ReviewableQuestionsRecord>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Creates a single `ActionPlugin`. */
  createActionPlugin?: Maybe<CreateActionPluginPayload>;
  /** Creates a single `ActionQueue`. */
  createActionQueue?: Maybe<CreateActionQueuePayload>;
  /** Creates a single `ActivityLog`. */
  createActivityLog?: Maybe<CreateActivityLogPayload>;
  /** Creates a single `Application`. */
  createApplication?: Maybe<CreateApplicationPayload>;
  /** Creates a single `ApplicationListShape`. */
  createApplicationListShape?: Maybe<CreateApplicationListShapePayload>;
  /** Creates a single `ApplicationNote`. */
  createApplicationNote?: Maybe<CreateApplicationNotePayload>;
  /** Creates a single `ApplicationResponse`. */
  createApplicationResponse?: Maybe<CreateApplicationResponsePayload>;
  /** Creates a single `ApplicationStageHistory`. */
  createApplicationStageHistory?: Maybe<CreateApplicationStageHistoryPayload>;
  /** Creates a single `ApplicationStatusHistory`. */
  createApplicationStatusHistory?: Maybe<CreateApplicationStatusHistoryPayload>;
  /** Creates a single `Counter`. */
  createCounter?: Maybe<CreateCounterPayload>;
  /** Creates a single `DataTable`. */
  createDataTable?: Maybe<CreateDataTablePayload>;
  /** Creates a single `DataTableManufacturingStep`. */
  createDataTableManufacturingStep?: Maybe<CreateDataTableManufacturingStepPayload>;
  /** Creates a single `DataTableActiveIngredient`. */
  createDataTableActiveIngredient?: Maybe<CreateDataTableActiveIngredientPayload>;
  /** Creates a single `DataTableAdministrationRoute`. */
  createDataTableAdministrationRoute?: Maybe<CreateDataTableAdministrationRoutePayload>;
  /** Creates a single `DataTableAnnex`. */
  createDataTableAnnex?: Maybe<CreateDataTableAnnexPayload>;
  /** Creates a single `DataTableAnnex2`. */
  createDataTableAnnex2?: Maybe<CreateDataTableAnnex2Payload>;
  /** Creates a single `DataTableAtcCode`. */
  createDataTableAtcCode?: Maybe<CreateDataTableAtcCodePayload>;
  /** Creates a single `DataTableAtcTherapeuticCategory`. */
  createDataTableAtcTherapeuticCategory?: Maybe<CreateDataTableAtcTherapeuticCategoryPayload>;
  /** Creates a single `DataTableContainer`. */
  createDataTableContainer?: Maybe<CreateDataTableContainerPayload>;
  /** Creates a single `DataTableCountry`. */
  createDataTableCountry?: Maybe<CreateDataTableCountryPayload>;
  /** Creates a single `DataTableDosageForm`. */
  createDataTableDosageForm?: Maybe<CreateDataTableDosageFormPayload>;
  /** Creates a single `DataTableGenericIngredient`. */
  createDataTableGenericIngredient?: Maybe<CreateDataTableGenericIngredientPayload>;
  /** Creates a single `DataTableIngredientsList`. */
  createDataTableIngredientsList?: Maybe<CreateDataTableIngredientsListPayload>;
  /** Creates a single `DataTableListOfSra`. */
  createDataTableListOfSra?: Maybe<CreateDataTableListOfSraPayload>;
  /** Creates a single `DataTableProcessingStep`. */
  createDataTableProcessingStep?: Maybe<CreateDataTableProcessingStepPayload>;
  /** Creates a single `DataTableProduct`. */
  createDataTableProduct?: Maybe<CreateDataTableProductPayload>;
  /** Creates a single `DataTableProductApplicationJoin`. */
  createDataTableProductApplicationJoin?: Maybe<CreateDataTableProductApplicationJoinPayload>;
  /** Creates a single `DataTableProvince`. */
  createDataTableProvince?: Maybe<CreateDataTableProvincePayload>;
  /** Creates a single `DataTableStorageCondition`. */
  createDataTableStorageCondition?: Maybe<CreateDataTableStorageConditionPayload>;
  /** Creates a single `DataTableUnitsOfProportion`. */
  createDataTableUnitsOfProportion?: Maybe<CreateDataTableUnitsOfProportionPayload>;
  /** Creates a single `DataView`. */
  createDataView?: Maybe<CreateDataViewPayload>;
  /** Creates a single `DataViewColumnDefinition`. */
  createDataViewColumnDefinition?: Maybe<CreateDataViewColumnDefinitionPayload>;
  /** Creates a single `ElementTypePlugin`. */
  createElementTypePlugin?: Maybe<CreateElementTypePluginPayload>;
  /** Creates a single `File`. */
  createFile?: Maybe<CreateFilePayload>;
  /** Creates a single `Filter`. */
  createFilter?: Maybe<CreateFilterPayload>;
  /** Creates a single `Notification`. */
  createNotification?: Maybe<CreateNotificationPayload>;
  /** Creates a single `Organisation`. */
  createOrganisation?: Maybe<CreateOrganisationPayload>;
  /** Creates a single `OrganisationApplicationJoin`. */
  createOrganisationApplicationJoin?: Maybe<CreateOrganisationApplicationJoinPayload>;
  /** Creates a single `PermissionJoin`. */
  createPermissionJoin?: Maybe<CreatePermissionJoinPayload>;
  /** Creates a single `PermissionName`. */
  createPermissionName?: Maybe<CreatePermissionNamePayload>;
  /** Creates a single `PermissionPolicy`. */
  createPermissionPolicy?: Maybe<CreatePermissionPolicyPayload>;
  /** Creates a single `ProductApplicationJoin`. */
  createProductApplicationJoin?: Maybe<CreateProductApplicationJoinPayload>;
  /** Creates a single `Review`. */
  createReview?: Maybe<CreateReviewPayload>;
  /** Creates a single `ReviewAssignment`. */
  createReviewAssignment?: Maybe<CreateReviewAssignmentPayload>;
  /** Creates a single `ReviewAssignmentAssignerJoin`. */
  createReviewAssignmentAssignerJoin?: Maybe<CreateReviewAssignmentAssignerJoinPayload>;
  /** Creates a single `ReviewDecision`. */
  createReviewDecision?: Maybe<CreateReviewDecisionPayload>;
  /** Creates a single `ReviewResponse`. */
  createReviewResponse?: Maybe<CreateReviewResponsePayload>;
  /** Creates a single `ReviewStatusHistory`. */
  createReviewStatusHistory?: Maybe<CreateReviewStatusHistoryPayload>;
  /** Creates a single `SystemInfo`. */
  createSystemInfo?: Maybe<CreateSystemInfoPayload>;
  /** Creates a single `Template`. */
  createTemplate?: Maybe<CreateTemplatePayload>;
  /** Creates a single `TemplateAction`. */
  createTemplateAction?: Maybe<CreateTemplateActionPayload>;
  /** Creates a single `TemplateCategory`. */
  createTemplateCategory?: Maybe<CreateTemplateCategoryPayload>;
  /** Creates a single `TemplateElement`. */
  createTemplateElement?: Maybe<CreateTemplateElementPayload>;
  /** Creates a single `TemplateFilterJoin`. */
  createTemplateFilterJoin?: Maybe<CreateTemplateFilterJoinPayload>;
  /** Creates a single `TemplatePermission`. */
  createTemplatePermission?: Maybe<CreateTemplatePermissionPayload>;
  /** Creates a single `TemplateSection`. */
  createTemplateSection?: Maybe<CreateTemplateSectionPayload>;
  /** Creates a single `TemplateStage`. */
  createTemplateStage?: Maybe<CreateTemplateStagePayload>;
  /** Creates a single `TemplateStageReviewLevel`. */
  createTemplateStageReviewLevel?: Maybe<CreateTemplateStageReviewLevelPayload>;
  /** Creates a single `TriggerQueue`. */
  createTriggerQueue?: Maybe<CreateTriggerQueuePayload>;
  /** Creates a single `TriggerSchedule`. */
  createTriggerSchedule?: Maybe<CreateTriggerSchedulePayload>;
  /** Creates a single `User`. */
  createUser?: Maybe<CreateUserPayload>;
  /** Creates a single `UserApplicationJoin`. */
  createUserApplicationJoin?: Maybe<CreateUserApplicationJoinPayload>;
  /** Creates a single `UserOrganisation`. */
  createUserOrganisation?: Maybe<CreateUserOrganisationPayload>;
  /** Creates a single `UserOrganisationApplicationJoin`. */
  createUserOrganisationApplicationJoin?: Maybe<CreateUserOrganisationApplicationJoinPayload>;
  /** Creates a single `Verification`. */
  createVerification?: Maybe<CreateVerificationPayload>;
  /** Updates a single `ActionPlugin` using its globally unique id and a patch. */
  updateActionPluginByNodeId?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionPlugin` using a unique key and a patch. */
  updateActionPlugin?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionPlugin` using a unique key and a patch. */
  updateActionPluginByCode?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionQueue` using its globally unique id and a patch. */
  updateActionQueueByNodeId?: Maybe<UpdateActionQueuePayload>;
  /** Updates a single `ActionQueue` using a unique key and a patch. */
  updateActionQueue?: Maybe<UpdateActionQueuePayload>;
  /** Updates a single `ActivityLog` using its globally unique id and a patch. */
  updateActivityLogByNodeId?: Maybe<UpdateActivityLogPayload>;
  /** Updates a single `ActivityLog` using a unique key and a patch. */
  updateActivityLog?: Maybe<UpdateActivityLogPayload>;
  /** Updates a single `Application` using its globally unique id and a patch. */
  updateApplicationByNodeId?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `Application` using a unique key and a patch. */
  updateApplication?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `Application` using a unique key and a patch. */
  updateApplicationBySerial?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `ApplicationNote` using its globally unique id and a patch. */
  updateApplicationNoteByNodeId?: Maybe<UpdateApplicationNotePayload>;
  /** Updates a single `ApplicationNote` using a unique key and a patch. */
  updateApplicationNote?: Maybe<UpdateApplicationNotePayload>;
  /** Updates a single `ApplicationResponse` using its globally unique id and a patch. */
  updateApplicationResponseByNodeId?: Maybe<UpdateApplicationResponsePayload>;
  /** Updates a single `ApplicationResponse` using a unique key and a patch. */
  updateApplicationResponse?: Maybe<UpdateApplicationResponsePayload>;
  /** Updates a single `ApplicationStageHistory` using its globally unique id and a patch. */
  updateApplicationStageHistoryByNodeId?: Maybe<UpdateApplicationStageHistoryPayload>;
  /** Updates a single `ApplicationStageHistory` using a unique key and a patch. */
  updateApplicationStageHistory?: Maybe<UpdateApplicationStageHistoryPayload>;
  /** Updates a single `ApplicationStatusHistory` using its globally unique id and a patch. */
  updateApplicationStatusHistoryByNodeId?: Maybe<UpdateApplicationStatusHistoryPayload>;
  /** Updates a single `ApplicationStatusHistory` using a unique key and a patch. */
  updateApplicationStatusHistory?: Maybe<UpdateApplicationStatusHistoryPayload>;
  /** Updates a single `Counter` using its globally unique id and a patch. */
  updateCounterByNodeId?: Maybe<UpdateCounterPayload>;
  /** Updates a single `Counter` using a unique key and a patch. */
  updateCounter?: Maybe<UpdateCounterPayload>;
  /** Updates a single `Counter` using a unique key and a patch. */
  updateCounterByName?: Maybe<UpdateCounterPayload>;
  /** Updates a single `DataTable` using its globally unique id and a patch. */
  updateDataTableByNodeId?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataTable` using a unique key and a patch. */
  updateDataTable?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataTable` using a unique key and a patch. */
  updateDataTableByTableName?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataTableManufacturingStep` using its globally unique id and a patch. */
  updateDataTableManufacturingStepByNodeId?: Maybe<UpdateDataTableManufacturingStepPayload>;
  /** Updates a single `DataTableManufacturingStep` using a unique key and a patch. */
  updateDataTableManufacturingStep?: Maybe<UpdateDataTableManufacturingStepPayload>;
  /** Updates a single `DataTableActiveIngredient` using its globally unique id and a patch. */
  updateDataTableActiveIngredientByNodeId?: Maybe<UpdateDataTableActiveIngredientPayload>;
  /** Updates a single `DataTableActiveIngredient` using a unique key and a patch. */
  updateDataTableActiveIngredient?: Maybe<UpdateDataTableActiveIngredientPayload>;
  /** Updates a single `DataTableAdministrationRoute` using its globally unique id and a patch. */
  updateDataTableAdministrationRouteByNodeId?: Maybe<UpdateDataTableAdministrationRoutePayload>;
  /** Updates a single `DataTableAdministrationRoute` using a unique key and a patch. */
  updateDataTableAdministrationRoute?: Maybe<UpdateDataTableAdministrationRoutePayload>;
  /** Updates a single `DataTableAnnex` using its globally unique id and a patch. */
  updateDataTableAnnexByNodeId?: Maybe<UpdateDataTableAnnexPayload>;
  /** Updates a single `DataTableAnnex` using a unique key and a patch. */
  updateDataTableAnnex?: Maybe<UpdateDataTableAnnexPayload>;
  /** Updates a single `DataTableAnnex2` using its globally unique id and a patch. */
  updateDataTableAnnex2ByNodeId?: Maybe<UpdateDataTableAnnex2Payload>;
  /** Updates a single `DataTableAnnex2` using a unique key and a patch. */
  updateDataTableAnnex2?: Maybe<UpdateDataTableAnnex2Payload>;
  /** Updates a single `DataTableAtcCode` using its globally unique id and a patch. */
  updateDataTableAtcCodeByNodeId?: Maybe<UpdateDataTableAtcCodePayload>;
  /** Updates a single `DataTableAtcCode` using a unique key and a patch. */
  updateDataTableAtcCode?: Maybe<UpdateDataTableAtcCodePayload>;
  /** Updates a single `DataTableAtcTherapeuticCategory` using its globally unique id and a patch. */
  updateDataTableAtcTherapeuticCategoryByNodeId?: Maybe<UpdateDataTableAtcTherapeuticCategoryPayload>;
  /** Updates a single `DataTableAtcTherapeuticCategory` using a unique key and a patch. */
  updateDataTableAtcTherapeuticCategory?: Maybe<UpdateDataTableAtcTherapeuticCategoryPayload>;
  /** Updates a single `DataTableContainer` using its globally unique id and a patch. */
  updateDataTableContainerByNodeId?: Maybe<UpdateDataTableContainerPayload>;
  /** Updates a single `DataTableContainer` using a unique key and a patch. */
  updateDataTableContainer?: Maybe<UpdateDataTableContainerPayload>;
  /** Updates a single `DataTableCountry` using its globally unique id and a patch. */
  updateDataTableCountryByNodeId?: Maybe<UpdateDataTableCountryPayload>;
  /** Updates a single `DataTableCountry` using a unique key and a patch. */
  updateDataTableCountry?: Maybe<UpdateDataTableCountryPayload>;
  /** Updates a single `DataTableDosageForm` using its globally unique id and a patch. */
  updateDataTableDosageFormByNodeId?: Maybe<UpdateDataTableDosageFormPayload>;
  /** Updates a single `DataTableDosageForm` using a unique key and a patch. */
  updateDataTableDosageForm?: Maybe<UpdateDataTableDosageFormPayload>;
  /** Updates a single `DataTableGenericIngredient` using its globally unique id and a patch. */
  updateDataTableGenericIngredientByNodeId?: Maybe<UpdateDataTableGenericIngredientPayload>;
  /** Updates a single `DataTableGenericIngredient` using a unique key and a patch. */
  updateDataTableGenericIngredient?: Maybe<UpdateDataTableGenericIngredientPayload>;
  /** Updates a single `DataTableIngredientsList` using its globally unique id and a patch. */
  updateDataTableIngredientsListByNodeId?: Maybe<UpdateDataTableIngredientsListPayload>;
  /** Updates a single `DataTableIngredientsList` using a unique key and a patch. */
  updateDataTableIngredientsList?: Maybe<UpdateDataTableIngredientsListPayload>;
  /** Updates a single `DataTableListOfSra` using its globally unique id and a patch. */
  updateDataTableListOfSraByNodeId?: Maybe<UpdateDataTableListOfSraPayload>;
  /** Updates a single `DataTableListOfSra` using a unique key and a patch. */
  updateDataTableListOfSra?: Maybe<UpdateDataTableListOfSraPayload>;
  /** Updates a single `DataTableProcessingStep` using its globally unique id and a patch. */
  updateDataTableProcessingStepByNodeId?: Maybe<UpdateDataTableProcessingStepPayload>;
  /** Updates a single `DataTableProcessingStep` using a unique key and a patch. */
  updateDataTableProcessingStep?: Maybe<UpdateDataTableProcessingStepPayload>;
  /** Updates a single `DataTableProduct` using its globally unique id and a patch. */
  updateDataTableProductByNodeId?: Maybe<UpdateDataTableProductPayload>;
  /** Updates a single `DataTableProduct` using a unique key and a patch. */
  updateDataTableProduct?: Maybe<UpdateDataTableProductPayload>;
  /** Updates a single `DataTableProductApplicationJoin` using its globally unique id and a patch. */
  updateDataTableProductApplicationJoinByNodeId?: Maybe<UpdateDataTableProductApplicationJoinPayload>;
  /** Updates a single `DataTableProductApplicationJoin` using a unique key and a patch. */
  updateDataTableProductApplicationJoin?: Maybe<UpdateDataTableProductApplicationJoinPayload>;
  /** Updates a single `DataTableProvince` using its globally unique id and a patch. */
  updateDataTableProvinceByNodeId?: Maybe<UpdateDataTableProvincePayload>;
  /** Updates a single `DataTableProvince` using a unique key and a patch. */
  updateDataTableProvince?: Maybe<UpdateDataTableProvincePayload>;
  /** Updates a single `DataTableStorageCondition` using its globally unique id and a patch. */
  updateDataTableStorageConditionByNodeId?: Maybe<UpdateDataTableStorageConditionPayload>;
  /** Updates a single `DataTableStorageCondition` using a unique key and a patch. */
  updateDataTableStorageCondition?: Maybe<UpdateDataTableStorageConditionPayload>;
  /** Updates a single `DataTableUnitsOfProportion` using its globally unique id and a patch. */
  updateDataTableUnitsOfProportionByNodeId?: Maybe<UpdateDataTableUnitsOfProportionPayload>;
  /** Updates a single `DataTableUnitsOfProportion` using a unique key and a patch. */
  updateDataTableUnitsOfProportion?: Maybe<UpdateDataTableUnitsOfProportionPayload>;
  /** Updates a single `DataView` using its globally unique id and a patch. */
  updateDataViewByNodeId?: Maybe<UpdateDataViewPayload>;
  /** Updates a single `DataView` using a unique key and a patch. */
  updateDataView?: Maybe<UpdateDataViewPayload>;
  /** Updates a single `DataViewColumnDefinition` using its globally unique id and a patch. */
  updateDataViewColumnDefinitionByNodeId?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `DataViewColumnDefinition` using a unique key and a patch. */
  updateDataViewColumnDefinition?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `DataViewColumnDefinition` using a unique key and a patch. */
  updateDataViewColumnDefinitionByTableNameAndColumnName?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `ElementTypePlugin` using its globally unique id and a patch. */
  updateElementTypePluginByNodeId?: Maybe<UpdateElementTypePluginPayload>;
  /** Updates a single `ElementTypePlugin` using a unique key and a patch. */
  updateElementTypePlugin?: Maybe<UpdateElementTypePluginPayload>;
  /** Updates a single `File` using its globally unique id and a patch. */
  updateFileByNodeId?: Maybe<UpdateFilePayload>;
  /** Updates a single `File` using a unique key and a patch. */
  updateFile?: Maybe<UpdateFilePayload>;
  /** Updates a single `File` using a unique key and a patch. */
  updateFileByUniqueId?: Maybe<UpdateFilePayload>;
  /** Updates a single `Filter` using its globally unique id and a patch. */
  updateFilterByNodeId?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Filter` using a unique key and a patch. */
  updateFilter?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Filter` using a unique key and a patch. */
  updateFilterByCode?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Notification` using its globally unique id and a patch. */
  updateNotificationByNodeId?: Maybe<UpdateNotificationPayload>;
  /** Updates a single `Notification` using a unique key and a patch. */
  updateNotification?: Maybe<UpdateNotificationPayload>;
  /** Updates a single `Organisation` using its globally unique id and a patch. */
  updateOrganisationByNodeId?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisation?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisationByName?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisationByRegistration?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `OrganisationApplicationJoin` using its globally unique id and a patch. */
  updateOrganisationApplicationJoinByNodeId?: Maybe<UpdateOrganisationApplicationJoinPayload>;
  /** Updates a single `OrganisationApplicationJoin` using a unique key and a patch. */
  updateOrganisationApplicationJoin?: Maybe<UpdateOrganisationApplicationJoinPayload>;
  /** Updates a single `PermissionJoin` using its globally unique id and a patch. */
  updatePermissionJoinByNodeId?: Maybe<UpdatePermissionJoinPayload>;
  /** Updates a single `PermissionJoin` using a unique key and a patch. */
  updatePermissionJoin?: Maybe<UpdatePermissionJoinPayload>;
  /** Updates a single `PermissionName` using its globally unique id and a patch. */
  updatePermissionNameByNodeId?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionName` using a unique key and a patch. */
  updatePermissionName?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionName` using a unique key and a patch. */
  updatePermissionNameByName?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionPolicy` using its globally unique id and a patch. */
  updatePermissionPolicyByNodeId?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `PermissionPolicy` using a unique key and a patch. */
  updatePermissionPolicy?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `PermissionPolicy` using a unique key and a patch. */
  updatePermissionPolicyByName?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `ProductApplicationJoin` using its globally unique id and a patch. */
  updateProductApplicationJoinByNodeId?: Maybe<UpdateProductApplicationJoinPayload>;
  /** Updates a single `ProductApplicationJoin` using a unique key and a patch. */
  updateProductApplicationJoin?: Maybe<UpdateProductApplicationJoinPayload>;
  /** Updates a single `Review` using its globally unique id and a patch. */
  updateReviewByNodeId?: Maybe<UpdateReviewPayload>;
  /** Updates a single `Review` using a unique key and a patch. */
  updateReview?: Maybe<UpdateReviewPayload>;
  /** Updates a single `ReviewAssignment` using its globally unique id and a patch. */
  updateReviewAssignmentByNodeId?: Maybe<UpdateReviewAssignmentPayload>;
  /** Updates a single `ReviewAssignment` using a unique key and a patch. */
  updateReviewAssignment?: Maybe<UpdateReviewAssignmentPayload>;
  /** Updates a single `ReviewAssignmentAssignerJoin` using its globally unique id and a patch. */
  updateReviewAssignmentAssignerJoinByNodeId?: Maybe<UpdateReviewAssignmentAssignerJoinPayload>;
  /** Updates a single `ReviewAssignmentAssignerJoin` using a unique key and a patch. */
  updateReviewAssignmentAssignerJoin?: Maybe<UpdateReviewAssignmentAssignerJoinPayload>;
  /** Updates a single `ReviewDecision` using its globally unique id and a patch. */
  updateReviewDecisionByNodeId?: Maybe<UpdateReviewDecisionPayload>;
  /** Updates a single `ReviewDecision` using a unique key and a patch. */
  updateReviewDecision?: Maybe<UpdateReviewDecisionPayload>;
  /** Updates a single `ReviewResponse` using its globally unique id and a patch. */
  updateReviewResponseByNodeId?: Maybe<UpdateReviewResponsePayload>;
  /** Updates a single `ReviewResponse` using a unique key and a patch. */
  updateReviewResponse?: Maybe<UpdateReviewResponsePayload>;
  /** Updates a single `ReviewStatusHistory` using its globally unique id and a patch. */
  updateReviewStatusHistoryByNodeId?: Maybe<UpdateReviewStatusHistoryPayload>;
  /** Updates a single `ReviewStatusHistory` using a unique key and a patch. */
  updateReviewStatusHistory?: Maybe<UpdateReviewStatusHistoryPayload>;
  /** Updates a single `SystemInfo` using its globally unique id and a patch. */
  updateSystemInfoByNodeId?: Maybe<UpdateSystemInfoPayload>;
  /** Updates a single `SystemInfo` using a unique key and a patch. */
  updateSystemInfo?: Maybe<UpdateSystemInfoPayload>;
  /** Updates a single `Template` using its globally unique id and a patch. */
  updateTemplateByNodeId?: Maybe<UpdateTemplatePayload>;
  /** Updates a single `Template` using a unique key and a patch. */
  updateTemplate?: Maybe<UpdateTemplatePayload>;
  /** Updates a single `TemplateAction` using its globally unique id and a patch. */
  updateTemplateActionByNodeId?: Maybe<UpdateTemplateActionPayload>;
  /** Updates a single `TemplateAction` using a unique key and a patch. */
  updateTemplateAction?: Maybe<UpdateTemplateActionPayload>;
  /** Updates a single `TemplateCategory` using its globally unique id and a patch. */
  updateTemplateCategoryByNodeId?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateCategory` using a unique key and a patch. */
  updateTemplateCategory?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateCategory` using a unique key and a patch. */
  updateTemplateCategoryByCode?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateElement` using its globally unique id and a patch. */
  updateTemplateElementByNodeId?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateElement` using a unique key and a patch. */
  updateTemplateElement?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateElement` using a unique key and a patch. */
  updateTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateFilterJoin` using its globally unique id and a patch. */
  updateTemplateFilterJoinByNodeId?: Maybe<UpdateTemplateFilterJoinPayload>;
  /** Updates a single `TemplateFilterJoin` using a unique key and a patch. */
  updateTemplateFilterJoin?: Maybe<UpdateTemplateFilterJoinPayload>;
  /** Updates a single `TemplatePermission` using its globally unique id and a patch. */
  updateTemplatePermissionByNodeId?: Maybe<UpdateTemplatePermissionPayload>;
  /** Updates a single `TemplatePermission` using a unique key and a patch. */
  updateTemplatePermission?: Maybe<UpdateTemplatePermissionPayload>;
  /** Updates a single `TemplateSection` using its globally unique id and a patch. */
  updateTemplateSectionByNodeId?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateSection` using a unique key and a patch. */
  updateTemplateSection?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateSection` using a unique key and a patch. */
  updateTemplateSectionByTemplateIdAndCode?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateStage` using its globally unique id and a patch. */
  updateTemplateStageByNodeId?: Maybe<UpdateTemplateStagePayload>;
  /** Updates a single `TemplateStage` using a unique key and a patch. */
  updateTemplateStage?: Maybe<UpdateTemplateStagePayload>;
  /** Updates a single `TemplateStageReviewLevel` using its globally unique id and a patch. */
  updateTemplateStageReviewLevelByNodeId?: Maybe<UpdateTemplateStageReviewLevelPayload>;
  /** Updates a single `TemplateStageReviewLevel` using a unique key and a patch. */
  updateTemplateStageReviewLevel?: Maybe<UpdateTemplateStageReviewLevelPayload>;
  /** Updates a single `TriggerQueue` using its globally unique id and a patch. */
  updateTriggerQueueByNodeId?: Maybe<UpdateTriggerQueuePayload>;
  /** Updates a single `TriggerQueue` using a unique key and a patch. */
  updateTriggerQueue?: Maybe<UpdateTriggerQueuePayload>;
  /** Updates a single `TriggerSchedule` using its globally unique id and a patch. */
  updateTriggerScheduleByNodeId?: Maybe<UpdateTriggerSchedulePayload>;
  /** Updates a single `TriggerSchedule` using a unique key and a patch. */
  updateTriggerSchedule?: Maybe<UpdateTriggerSchedulePayload>;
  /** Updates a single `User` using its globally unique id and a patch. */
  updateUserByNodeId?: Maybe<UpdateUserPayload>;
  /** Updates a single `User` using a unique key and a patch. */
  updateUser?: Maybe<UpdateUserPayload>;
  /** Updates a single `User` using a unique key and a patch. */
  updateUserByUsername?: Maybe<UpdateUserPayload>;
  /** Updates a single `UserApplicationJoin` using its globally unique id and a patch. */
  updateUserApplicationJoinByNodeId?: Maybe<UpdateUserApplicationJoinPayload>;
  /** Updates a single `UserApplicationJoin` using a unique key and a patch. */
  updateUserApplicationJoin?: Maybe<UpdateUserApplicationJoinPayload>;
  /** Updates a single `UserOrganisation` using its globally unique id and a patch. */
  updateUserOrganisationByNodeId?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `UserOrganisation` using a unique key and a patch. */
  updateUserOrganisation?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `UserOrganisation` using a unique key and a patch. */
  updateUserOrganisationByUserIdAndOrganisationId?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `UserOrganisationApplicationJoin` using its globally unique id and a patch. */
  updateUserOrganisationApplicationJoinByNodeId?: Maybe<UpdateUserOrganisationApplicationJoinPayload>;
  /** Updates a single `UserOrganisationApplicationJoin` using a unique key and a patch. */
  updateUserOrganisationApplicationJoin?: Maybe<UpdateUserOrganisationApplicationJoinPayload>;
  /** Updates a single `Verification` using its globally unique id and a patch. */
  updateVerificationByNodeId?: Maybe<UpdateVerificationPayload>;
  /** Updates a single `Verification` using a unique key and a patch. */
  updateVerification?: Maybe<UpdateVerificationPayload>;
  /** Updates a single `Verification` using a unique key and a patch. */
  updateVerificationByUniqueId?: Maybe<UpdateVerificationPayload>;
  /** Deletes a single `ActionPlugin` using its globally unique id. */
  deleteActionPluginByNodeId?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionPlugin` using a unique key. */
  deleteActionPlugin?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionPlugin` using a unique key. */
  deleteActionPluginByCode?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionQueue` using its globally unique id. */
  deleteActionQueueByNodeId?: Maybe<DeleteActionQueuePayload>;
  /** Deletes a single `ActionQueue` using a unique key. */
  deleteActionQueue?: Maybe<DeleteActionQueuePayload>;
  /** Deletes a single `ActivityLog` using its globally unique id. */
  deleteActivityLogByNodeId?: Maybe<DeleteActivityLogPayload>;
  /** Deletes a single `ActivityLog` using a unique key. */
  deleteActivityLog?: Maybe<DeleteActivityLogPayload>;
  /** Deletes a single `Application` using its globally unique id. */
  deleteApplicationByNodeId?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `Application` using a unique key. */
  deleteApplication?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `Application` using a unique key. */
  deleteApplicationBySerial?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `ApplicationNote` using its globally unique id. */
  deleteApplicationNoteByNodeId?: Maybe<DeleteApplicationNotePayload>;
  /** Deletes a single `ApplicationNote` using a unique key. */
  deleteApplicationNote?: Maybe<DeleteApplicationNotePayload>;
  /** Deletes a single `ApplicationResponse` using its globally unique id. */
  deleteApplicationResponseByNodeId?: Maybe<DeleteApplicationResponsePayload>;
  /** Deletes a single `ApplicationResponse` using a unique key. */
  deleteApplicationResponse?: Maybe<DeleteApplicationResponsePayload>;
  /** Deletes a single `ApplicationStageHistory` using its globally unique id. */
  deleteApplicationStageHistoryByNodeId?: Maybe<DeleteApplicationStageHistoryPayload>;
  /** Deletes a single `ApplicationStageHistory` using a unique key. */
  deleteApplicationStageHistory?: Maybe<DeleteApplicationStageHistoryPayload>;
  /** Deletes a single `ApplicationStatusHistory` using its globally unique id. */
  deleteApplicationStatusHistoryByNodeId?: Maybe<DeleteApplicationStatusHistoryPayload>;
  /** Deletes a single `ApplicationStatusHistory` using a unique key. */
  deleteApplicationStatusHistory?: Maybe<DeleteApplicationStatusHistoryPayload>;
  /** Deletes a single `Counter` using its globally unique id. */
  deleteCounterByNodeId?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `Counter` using a unique key. */
  deleteCounter?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `Counter` using a unique key. */
  deleteCounterByName?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `DataTable` using its globally unique id. */
  deleteDataTableByNodeId?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataTable` using a unique key. */
  deleteDataTable?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataTable` using a unique key. */
  deleteDataTableByTableName?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataTableManufacturingStep` using its globally unique id. */
  deleteDataTableManufacturingStepByNodeId?: Maybe<DeleteDataTableManufacturingStepPayload>;
  /** Deletes a single `DataTableManufacturingStep` using a unique key. */
  deleteDataTableManufacturingStep?: Maybe<DeleteDataTableManufacturingStepPayload>;
  /** Deletes a single `DataTableActiveIngredient` using its globally unique id. */
  deleteDataTableActiveIngredientByNodeId?: Maybe<DeleteDataTableActiveIngredientPayload>;
  /** Deletes a single `DataTableActiveIngredient` using a unique key. */
  deleteDataTableActiveIngredient?: Maybe<DeleteDataTableActiveIngredientPayload>;
  /** Deletes a single `DataTableAdministrationRoute` using its globally unique id. */
  deleteDataTableAdministrationRouteByNodeId?: Maybe<DeleteDataTableAdministrationRoutePayload>;
  /** Deletes a single `DataTableAdministrationRoute` using a unique key. */
  deleteDataTableAdministrationRoute?: Maybe<DeleteDataTableAdministrationRoutePayload>;
  /** Deletes a single `DataTableAnnex` using its globally unique id. */
  deleteDataTableAnnexByNodeId?: Maybe<DeleteDataTableAnnexPayload>;
  /** Deletes a single `DataTableAnnex` using a unique key. */
  deleteDataTableAnnex?: Maybe<DeleteDataTableAnnexPayload>;
  /** Deletes a single `DataTableAnnex2` using its globally unique id. */
  deleteDataTableAnnex2ByNodeId?: Maybe<DeleteDataTableAnnex2Payload>;
  /** Deletes a single `DataTableAnnex2` using a unique key. */
  deleteDataTableAnnex2?: Maybe<DeleteDataTableAnnex2Payload>;
  /** Deletes a single `DataTableAtcCode` using its globally unique id. */
  deleteDataTableAtcCodeByNodeId?: Maybe<DeleteDataTableAtcCodePayload>;
  /** Deletes a single `DataTableAtcCode` using a unique key. */
  deleteDataTableAtcCode?: Maybe<DeleteDataTableAtcCodePayload>;
  /** Deletes a single `DataTableAtcTherapeuticCategory` using its globally unique id. */
  deleteDataTableAtcTherapeuticCategoryByNodeId?: Maybe<DeleteDataTableAtcTherapeuticCategoryPayload>;
  /** Deletes a single `DataTableAtcTherapeuticCategory` using a unique key. */
  deleteDataTableAtcTherapeuticCategory?: Maybe<DeleteDataTableAtcTherapeuticCategoryPayload>;
  /** Deletes a single `DataTableContainer` using its globally unique id. */
  deleteDataTableContainerByNodeId?: Maybe<DeleteDataTableContainerPayload>;
  /** Deletes a single `DataTableContainer` using a unique key. */
  deleteDataTableContainer?: Maybe<DeleteDataTableContainerPayload>;
  /** Deletes a single `DataTableCountry` using its globally unique id. */
  deleteDataTableCountryByNodeId?: Maybe<DeleteDataTableCountryPayload>;
  /** Deletes a single `DataTableCountry` using a unique key. */
  deleteDataTableCountry?: Maybe<DeleteDataTableCountryPayload>;
  /** Deletes a single `DataTableDosageForm` using its globally unique id. */
  deleteDataTableDosageFormByNodeId?: Maybe<DeleteDataTableDosageFormPayload>;
  /** Deletes a single `DataTableDosageForm` using a unique key. */
  deleteDataTableDosageForm?: Maybe<DeleteDataTableDosageFormPayload>;
  /** Deletes a single `DataTableGenericIngredient` using its globally unique id. */
  deleteDataTableGenericIngredientByNodeId?: Maybe<DeleteDataTableGenericIngredientPayload>;
  /** Deletes a single `DataTableGenericIngredient` using a unique key. */
  deleteDataTableGenericIngredient?: Maybe<DeleteDataTableGenericIngredientPayload>;
  /** Deletes a single `DataTableIngredientsList` using its globally unique id. */
  deleteDataTableIngredientsListByNodeId?: Maybe<DeleteDataTableIngredientsListPayload>;
  /** Deletes a single `DataTableIngredientsList` using a unique key. */
  deleteDataTableIngredientsList?: Maybe<DeleteDataTableIngredientsListPayload>;
  /** Deletes a single `DataTableListOfSra` using its globally unique id. */
  deleteDataTableListOfSraByNodeId?: Maybe<DeleteDataTableListOfSraPayload>;
  /** Deletes a single `DataTableListOfSra` using a unique key. */
  deleteDataTableListOfSra?: Maybe<DeleteDataTableListOfSraPayload>;
  /** Deletes a single `DataTableProcessingStep` using its globally unique id. */
  deleteDataTableProcessingStepByNodeId?: Maybe<DeleteDataTableProcessingStepPayload>;
  /** Deletes a single `DataTableProcessingStep` using a unique key. */
  deleteDataTableProcessingStep?: Maybe<DeleteDataTableProcessingStepPayload>;
  /** Deletes a single `DataTableProduct` using its globally unique id. */
  deleteDataTableProductByNodeId?: Maybe<DeleteDataTableProductPayload>;
  /** Deletes a single `DataTableProduct` using a unique key. */
  deleteDataTableProduct?: Maybe<DeleteDataTableProductPayload>;
  /** Deletes a single `DataTableProductApplicationJoin` using its globally unique id. */
  deleteDataTableProductApplicationJoinByNodeId?: Maybe<DeleteDataTableProductApplicationJoinPayload>;
  /** Deletes a single `DataTableProductApplicationJoin` using a unique key. */
  deleteDataTableProductApplicationJoin?: Maybe<DeleteDataTableProductApplicationJoinPayload>;
  /** Deletes a single `DataTableProvince` using its globally unique id. */
  deleteDataTableProvinceByNodeId?: Maybe<DeleteDataTableProvincePayload>;
  /** Deletes a single `DataTableProvince` using a unique key. */
  deleteDataTableProvince?: Maybe<DeleteDataTableProvincePayload>;
  /** Deletes a single `DataTableStorageCondition` using its globally unique id. */
  deleteDataTableStorageConditionByNodeId?: Maybe<DeleteDataTableStorageConditionPayload>;
  /** Deletes a single `DataTableStorageCondition` using a unique key. */
  deleteDataTableStorageCondition?: Maybe<DeleteDataTableStorageConditionPayload>;
  /** Deletes a single `DataTableUnitsOfProportion` using its globally unique id. */
  deleteDataTableUnitsOfProportionByNodeId?: Maybe<DeleteDataTableUnitsOfProportionPayload>;
  /** Deletes a single `DataTableUnitsOfProportion` using a unique key. */
  deleteDataTableUnitsOfProportion?: Maybe<DeleteDataTableUnitsOfProportionPayload>;
  /** Deletes a single `DataView` using its globally unique id. */
  deleteDataViewByNodeId?: Maybe<DeleteDataViewPayload>;
  /** Deletes a single `DataView` using a unique key. */
  deleteDataView?: Maybe<DeleteDataViewPayload>;
  /** Deletes a single `DataViewColumnDefinition` using its globally unique id. */
  deleteDataViewColumnDefinitionByNodeId?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `DataViewColumnDefinition` using a unique key. */
  deleteDataViewColumnDefinition?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `DataViewColumnDefinition` using a unique key. */
  deleteDataViewColumnDefinitionByTableNameAndColumnName?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `ElementTypePlugin` using its globally unique id. */
  deleteElementTypePluginByNodeId?: Maybe<DeleteElementTypePluginPayload>;
  /** Deletes a single `ElementTypePlugin` using a unique key. */
  deleteElementTypePlugin?: Maybe<DeleteElementTypePluginPayload>;
  /** Deletes a single `File` using its globally unique id. */
  deleteFileByNodeId?: Maybe<DeleteFilePayload>;
  /** Deletes a single `File` using a unique key. */
  deleteFile?: Maybe<DeleteFilePayload>;
  /** Deletes a single `File` using a unique key. */
  deleteFileByUniqueId?: Maybe<DeleteFilePayload>;
  /** Deletes a single `Filter` using its globally unique id. */
  deleteFilterByNodeId?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Filter` using a unique key. */
  deleteFilter?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Filter` using a unique key. */
  deleteFilterByCode?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Notification` using its globally unique id. */
  deleteNotificationByNodeId?: Maybe<DeleteNotificationPayload>;
  /** Deletes a single `Notification` using a unique key. */
  deleteNotification?: Maybe<DeleteNotificationPayload>;
  /** Deletes a single `Organisation` using its globally unique id. */
  deleteOrganisationByNodeId?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisation?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisationByName?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisationByRegistration?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `OrganisationApplicationJoin` using its globally unique id. */
  deleteOrganisationApplicationJoinByNodeId?: Maybe<DeleteOrganisationApplicationJoinPayload>;
  /** Deletes a single `OrganisationApplicationJoin` using a unique key. */
  deleteOrganisationApplicationJoin?: Maybe<DeleteOrganisationApplicationJoinPayload>;
  /** Deletes a single `PermissionJoin` using its globally unique id. */
  deletePermissionJoinByNodeId?: Maybe<DeletePermissionJoinPayload>;
  /** Deletes a single `PermissionJoin` using a unique key. */
  deletePermissionJoin?: Maybe<DeletePermissionJoinPayload>;
  /** Deletes a single `PermissionName` using its globally unique id. */
  deletePermissionNameByNodeId?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionName` using a unique key. */
  deletePermissionName?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionName` using a unique key. */
  deletePermissionNameByName?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionPolicy` using its globally unique id. */
  deletePermissionPolicyByNodeId?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `PermissionPolicy` using a unique key. */
  deletePermissionPolicy?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `PermissionPolicy` using a unique key. */
  deletePermissionPolicyByName?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `ProductApplicationJoin` using its globally unique id. */
  deleteProductApplicationJoinByNodeId?: Maybe<DeleteProductApplicationJoinPayload>;
  /** Deletes a single `ProductApplicationJoin` using a unique key. */
  deleteProductApplicationJoin?: Maybe<DeleteProductApplicationJoinPayload>;
  /** Deletes a single `Review` using its globally unique id. */
  deleteReviewByNodeId?: Maybe<DeleteReviewPayload>;
  /** Deletes a single `Review` using a unique key. */
  deleteReview?: Maybe<DeleteReviewPayload>;
  /** Deletes a single `ReviewAssignment` using its globally unique id. */
  deleteReviewAssignmentByNodeId?: Maybe<DeleteReviewAssignmentPayload>;
  /** Deletes a single `ReviewAssignment` using a unique key. */
  deleteReviewAssignment?: Maybe<DeleteReviewAssignmentPayload>;
  /** Deletes a single `ReviewAssignmentAssignerJoin` using its globally unique id. */
  deleteReviewAssignmentAssignerJoinByNodeId?: Maybe<DeleteReviewAssignmentAssignerJoinPayload>;
  /** Deletes a single `ReviewAssignmentAssignerJoin` using a unique key. */
  deleteReviewAssignmentAssignerJoin?: Maybe<DeleteReviewAssignmentAssignerJoinPayload>;
  /** Deletes a single `ReviewDecision` using its globally unique id. */
  deleteReviewDecisionByNodeId?: Maybe<DeleteReviewDecisionPayload>;
  /** Deletes a single `ReviewDecision` using a unique key. */
  deleteReviewDecision?: Maybe<DeleteReviewDecisionPayload>;
  /** Deletes a single `ReviewResponse` using its globally unique id. */
  deleteReviewResponseByNodeId?: Maybe<DeleteReviewResponsePayload>;
  /** Deletes a single `ReviewResponse` using a unique key. */
  deleteReviewResponse?: Maybe<DeleteReviewResponsePayload>;
  /** Deletes a single `ReviewStatusHistory` using its globally unique id. */
  deleteReviewStatusHistoryByNodeId?: Maybe<DeleteReviewStatusHistoryPayload>;
  /** Deletes a single `ReviewStatusHistory` using a unique key. */
  deleteReviewStatusHistory?: Maybe<DeleteReviewStatusHistoryPayload>;
  /** Deletes a single `SystemInfo` using its globally unique id. */
  deleteSystemInfoByNodeId?: Maybe<DeleteSystemInfoPayload>;
  /** Deletes a single `SystemInfo` using a unique key. */
  deleteSystemInfo?: Maybe<DeleteSystemInfoPayload>;
  /** Deletes a single `Template` using its globally unique id. */
  deleteTemplateByNodeId?: Maybe<DeleteTemplatePayload>;
  /** Deletes a single `Template` using a unique key. */
  deleteTemplate?: Maybe<DeleteTemplatePayload>;
  /** Deletes a single `TemplateAction` using its globally unique id. */
  deleteTemplateActionByNodeId?: Maybe<DeleteTemplateActionPayload>;
  /** Deletes a single `TemplateAction` using a unique key. */
  deleteTemplateAction?: Maybe<DeleteTemplateActionPayload>;
  /** Deletes a single `TemplateCategory` using its globally unique id. */
  deleteTemplateCategoryByNodeId?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateCategory` using a unique key. */
  deleteTemplateCategory?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateCategory` using a unique key. */
  deleteTemplateCategoryByCode?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateElement` using its globally unique id. */
  deleteTemplateElementByNodeId?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateElement` using a unique key. */
  deleteTemplateElement?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateElement` using a unique key. */
  deleteTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateFilterJoin` using its globally unique id. */
  deleteTemplateFilterJoinByNodeId?: Maybe<DeleteTemplateFilterJoinPayload>;
  /** Deletes a single `TemplateFilterJoin` using a unique key. */
  deleteTemplateFilterJoin?: Maybe<DeleteTemplateFilterJoinPayload>;
  /** Deletes a single `TemplatePermission` using its globally unique id. */
  deleteTemplatePermissionByNodeId?: Maybe<DeleteTemplatePermissionPayload>;
  /** Deletes a single `TemplatePermission` using a unique key. */
  deleteTemplatePermission?: Maybe<DeleteTemplatePermissionPayload>;
  /** Deletes a single `TemplateSection` using its globally unique id. */
  deleteTemplateSectionByNodeId?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateSection` using a unique key. */
  deleteTemplateSection?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateSection` using a unique key. */
  deleteTemplateSectionByTemplateIdAndCode?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateStage` using its globally unique id. */
  deleteTemplateStageByNodeId?: Maybe<DeleteTemplateStagePayload>;
  /** Deletes a single `TemplateStage` using a unique key. */
  deleteTemplateStage?: Maybe<DeleteTemplateStagePayload>;
  /** Deletes a single `TemplateStageReviewLevel` using its globally unique id. */
  deleteTemplateStageReviewLevelByNodeId?: Maybe<DeleteTemplateStageReviewLevelPayload>;
  /** Deletes a single `TemplateStageReviewLevel` using a unique key. */
  deleteTemplateStageReviewLevel?: Maybe<DeleteTemplateStageReviewLevelPayload>;
  /** Deletes a single `TriggerQueue` using its globally unique id. */
  deleteTriggerQueueByNodeId?: Maybe<DeleteTriggerQueuePayload>;
  /** Deletes a single `TriggerQueue` using a unique key. */
  deleteTriggerQueue?: Maybe<DeleteTriggerQueuePayload>;
  /** Deletes a single `TriggerSchedule` using its globally unique id. */
  deleteTriggerScheduleByNodeId?: Maybe<DeleteTriggerSchedulePayload>;
  /** Deletes a single `TriggerSchedule` using a unique key. */
  deleteTriggerSchedule?: Maybe<DeleteTriggerSchedulePayload>;
  /** Deletes a single `User` using its globally unique id. */
  deleteUserByNodeId?: Maybe<DeleteUserPayload>;
  /** Deletes a single `User` using a unique key. */
  deleteUser?: Maybe<DeleteUserPayload>;
  /** Deletes a single `User` using a unique key. */
  deleteUserByUsername?: Maybe<DeleteUserPayload>;
  /** Deletes a single `UserApplicationJoin` using its globally unique id. */
  deleteUserApplicationJoinByNodeId?: Maybe<DeleteUserApplicationJoinPayload>;
  /** Deletes a single `UserApplicationJoin` using a unique key. */
  deleteUserApplicationJoin?: Maybe<DeleteUserApplicationJoinPayload>;
  /** Deletes a single `UserOrganisation` using its globally unique id. */
  deleteUserOrganisationByNodeId?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `UserOrganisation` using a unique key. */
  deleteUserOrganisation?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `UserOrganisation` using a unique key. */
  deleteUserOrganisationByUserIdAndOrganisationId?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `UserOrganisationApplicationJoin` using its globally unique id. */
  deleteUserOrganisationApplicationJoinByNodeId?: Maybe<DeleteUserOrganisationApplicationJoinPayload>;
  /** Deletes a single `UserOrganisationApplicationJoin` using a unique key. */
  deleteUserOrganisationApplicationJoin?: Maybe<DeleteUserOrganisationApplicationJoinPayload>;
  /** Deletes a single `Verification` using its globally unique id. */
  deleteVerificationByNodeId?: Maybe<DeleteVerificationPayload>;
  /** Deletes a single `Verification` using a unique key. */
  deleteVerification?: Maybe<DeleteVerificationPayload>;
  /** Deletes a single `Verification` using a unique key. */
  deleteVerificationByUniqueId?: Maybe<DeleteVerificationPayload>;
  deleteWholeApplication?: Maybe<DeleteWholeApplicationPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActionPluginArgs = {
  input: CreateActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActionQueueArgs = {
  input: CreateActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActivityLogArgs = {
  input: CreateActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationArgs = {
  input: CreateApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationListShapeArgs = {
  input: CreateApplicationListShapeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationNoteArgs = {
  input: CreateApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationResponseArgs = {
  input: CreateApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationStageHistoryArgs = {
  input: CreateApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationStatusHistoryArgs = {
  input: CreateApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCounterArgs = {
  input: CreateCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableArgs = {
  input: CreateDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableManufacturingStepArgs = {
  input: CreateDataTableManufacturingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableActiveIngredientArgs = {
  input: CreateDataTableActiveIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableAdministrationRouteArgs = {
  input: CreateDataTableAdministrationRouteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableAnnexArgs = {
  input: CreateDataTableAnnexInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableAnnex2Args = {
  input: CreateDataTableAnnex2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableAtcCodeArgs = {
  input: CreateDataTableAtcCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableAtcTherapeuticCategoryArgs = {
  input: CreateDataTableAtcTherapeuticCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableContainerArgs = {
  input: CreateDataTableContainerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableCountryArgs = {
  input: CreateDataTableCountryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableDosageFormArgs = {
  input: CreateDataTableDosageFormInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableGenericIngredientArgs = {
  input: CreateDataTableGenericIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableIngredientsListArgs = {
  input: CreateDataTableIngredientsListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableListOfSraArgs = {
  input: CreateDataTableListOfSraInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableProcessingStepArgs = {
  input: CreateDataTableProcessingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableProductArgs = {
  input: CreateDataTableProductInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableProductApplicationJoinArgs = {
  input: CreateDataTableProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableProvinceArgs = {
  input: CreateDataTableProvinceInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableStorageConditionArgs = {
  input: CreateDataTableStorageConditionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableUnitsOfProportionArgs = {
  input: CreateDataTableUnitsOfProportionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataViewArgs = {
  input: CreateDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataViewColumnDefinitionArgs = {
  input: CreateDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateElementTypePluginArgs = {
  input: CreateElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFileArgs = {
  input: CreateFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFilterArgs = {
  input: CreateFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNotificationArgs = {
  input: CreateNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganisationArgs = {
  input: CreateOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganisationApplicationJoinArgs = {
  input: CreateOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionJoinArgs = {
  input: CreatePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionNameArgs = {
  input: CreatePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionPolicyArgs = {
  input: CreatePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateProductApplicationJoinArgs = {
  input: CreateProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewArgs = {
  input: CreateReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewAssignmentArgs = {
  input: CreateReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewAssignmentAssignerJoinArgs = {
  input: CreateReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewDecisionArgs = {
  input: CreateReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewResponseArgs = {
  input: CreateReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewStatusHistoryArgs = {
  input: CreateReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSystemInfoArgs = {
  input: CreateSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateArgs = {
  input: CreateTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateActionArgs = {
  input: CreateTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateCategoryArgs = {
  input: CreateTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateElementArgs = {
  input: CreateTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateFilterJoinArgs = {
  input: CreateTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplatePermissionArgs = {
  input: CreateTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateSectionArgs = {
  input: CreateTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateStageArgs = {
  input: CreateTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateStageReviewLevelArgs = {
  input: CreateTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTriggerQueueArgs = {
  input: CreateTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTriggerScheduleArgs = {
  input: CreateTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserApplicationJoinArgs = {
  input: CreateUserApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserOrganisationArgs = {
  input: CreateUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserOrganisationApplicationJoinArgs = {
  input: CreateUserOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateVerificationArgs = {
  input: CreateVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginByNodeIdArgs = {
  input: UpdateActionPluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginArgs = {
  input: UpdateActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginByCodeArgs = {
  input: UpdateActionPluginByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionQueueByNodeIdArgs = {
  input: UpdateActionQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionQueueArgs = {
  input: UpdateActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActivityLogByNodeIdArgs = {
  input: UpdateActivityLogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActivityLogArgs = {
  input: UpdateActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationByNodeIdArgs = {
  input: UpdateApplicationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationArgs = {
  input: UpdateApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationBySerialArgs = {
  input: UpdateApplicationBySerialInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationNoteByNodeIdArgs = {
  input: UpdateApplicationNoteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationNoteArgs = {
  input: UpdateApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationResponseByNodeIdArgs = {
  input: UpdateApplicationResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationResponseArgs = {
  input: UpdateApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStageHistoryByNodeIdArgs = {
  input: UpdateApplicationStageHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStageHistoryArgs = {
  input: UpdateApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStatusHistoryByNodeIdArgs = {
  input: UpdateApplicationStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStatusHistoryArgs = {
  input: UpdateApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterByNodeIdArgs = {
  input: UpdateCounterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterArgs = {
  input: UpdateCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterByNameArgs = {
  input: UpdateCounterByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableByNodeIdArgs = {
  input: UpdateDataTableByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableArgs = {
  input: UpdateDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableByTableNameArgs = {
  input: UpdateDataTableByTableNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableManufacturingStepByNodeIdArgs = {
  input: UpdateDataTableManufacturingStepByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableManufacturingStepArgs = {
  input: UpdateDataTableManufacturingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableActiveIngredientByNodeIdArgs = {
  input: UpdateDataTableActiveIngredientByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableActiveIngredientArgs = {
  input: UpdateDataTableActiveIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAdministrationRouteByNodeIdArgs = {
  input: UpdateDataTableAdministrationRouteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAdministrationRouteArgs = {
  input: UpdateDataTableAdministrationRouteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAnnexByNodeIdArgs = {
  input: UpdateDataTableAnnexByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAnnexArgs = {
  input: UpdateDataTableAnnexInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAnnex2ByNodeIdArgs = {
  input: UpdateDataTableAnnex2ByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAnnex2Args = {
  input: UpdateDataTableAnnex2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAtcCodeByNodeIdArgs = {
  input: UpdateDataTableAtcCodeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAtcCodeArgs = {
  input: UpdateDataTableAtcCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAtcTherapeuticCategoryByNodeIdArgs = {
  input: UpdateDataTableAtcTherapeuticCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableAtcTherapeuticCategoryArgs = {
  input: UpdateDataTableAtcTherapeuticCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableContainerByNodeIdArgs = {
  input: UpdateDataTableContainerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableContainerArgs = {
  input: UpdateDataTableContainerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableCountryByNodeIdArgs = {
  input: UpdateDataTableCountryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableCountryArgs = {
  input: UpdateDataTableCountryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableDosageFormByNodeIdArgs = {
  input: UpdateDataTableDosageFormByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableDosageFormArgs = {
  input: UpdateDataTableDosageFormInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableGenericIngredientByNodeIdArgs = {
  input: UpdateDataTableGenericIngredientByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableGenericIngredientArgs = {
  input: UpdateDataTableGenericIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableIngredientsListByNodeIdArgs = {
  input: UpdateDataTableIngredientsListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableIngredientsListArgs = {
  input: UpdateDataTableIngredientsListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableListOfSraByNodeIdArgs = {
  input: UpdateDataTableListOfSraByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableListOfSraArgs = {
  input: UpdateDataTableListOfSraInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProcessingStepByNodeIdArgs = {
  input: UpdateDataTableProcessingStepByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProcessingStepArgs = {
  input: UpdateDataTableProcessingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProductByNodeIdArgs = {
  input: UpdateDataTableProductByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProductArgs = {
  input: UpdateDataTableProductInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProductApplicationJoinByNodeIdArgs = {
  input: UpdateDataTableProductApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProductApplicationJoinArgs = {
  input: UpdateDataTableProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProvinceByNodeIdArgs = {
  input: UpdateDataTableProvinceByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableProvinceArgs = {
  input: UpdateDataTableProvinceInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableStorageConditionByNodeIdArgs = {
  input: UpdateDataTableStorageConditionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableStorageConditionArgs = {
  input: UpdateDataTableStorageConditionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableUnitsOfProportionByNodeIdArgs = {
  input: UpdateDataTableUnitsOfProportionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableUnitsOfProportionArgs = {
  input: UpdateDataTableUnitsOfProportionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewByNodeIdArgs = {
  input: UpdateDataViewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewArgs = {
  input: UpdateDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionByNodeIdArgs = {
  input: UpdateDataViewColumnDefinitionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionArgs = {
  input: UpdateDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  input: UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateElementTypePluginByNodeIdArgs = {
  input: UpdateElementTypePluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateElementTypePluginArgs = {
  input: UpdateElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileByNodeIdArgs = {
  input: UpdateFileByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileArgs = {
  input: UpdateFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileByUniqueIdArgs = {
  input: UpdateFileByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterByNodeIdArgs = {
  input: UpdateFilterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterArgs = {
  input: UpdateFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterByCodeArgs = {
  input: UpdateFilterByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateNotificationByNodeIdArgs = {
  input: UpdateNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateNotificationArgs = {
  input: UpdateNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByNodeIdArgs = {
  input: UpdateOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationArgs = {
  input: UpdateOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByNameArgs = {
  input: UpdateOrganisationByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByRegistrationArgs = {
  input: UpdateOrganisationByRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationApplicationJoinByNodeIdArgs = {
  input: UpdateOrganisationApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationApplicationJoinArgs = {
  input: UpdateOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionJoinByNodeIdArgs = {
  input: UpdatePermissionJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionJoinArgs = {
  input: UpdatePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameByNodeIdArgs = {
  input: UpdatePermissionNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameArgs = {
  input: UpdatePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameByNameArgs = {
  input: UpdatePermissionNameByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyByNodeIdArgs = {
  input: UpdatePermissionPolicyByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyArgs = {
  input: UpdatePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyByNameArgs = {
  input: UpdatePermissionPolicyByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProductApplicationJoinByNodeIdArgs = {
  input: UpdateProductApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateProductApplicationJoinArgs = {
  input: UpdateProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewByNodeIdArgs = {
  input: UpdateReviewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewArgs = {
  input: UpdateReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentByNodeIdArgs = {
  input: UpdateReviewAssignmentByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentArgs = {
  input: UpdateReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentAssignerJoinByNodeIdArgs = {
  input: UpdateReviewAssignmentAssignerJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentAssignerJoinArgs = {
  input: UpdateReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewDecisionByNodeIdArgs = {
  input: UpdateReviewDecisionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewDecisionArgs = {
  input: UpdateReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewResponseByNodeIdArgs = {
  input: UpdateReviewResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewResponseArgs = {
  input: UpdateReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewStatusHistoryByNodeIdArgs = {
  input: UpdateReviewStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewStatusHistoryArgs = {
  input: UpdateReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSystemInfoByNodeIdArgs = {
  input: UpdateSystemInfoByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSystemInfoArgs = {
  input: UpdateSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateByNodeIdArgs = {
  input: UpdateTemplateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateArgs = {
  input: UpdateTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateActionByNodeIdArgs = {
  input: UpdateTemplateActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateActionArgs = {
  input: UpdateTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryByNodeIdArgs = {
  input: UpdateTemplateCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryArgs = {
  input: UpdateTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryByCodeArgs = {
  input: UpdateTemplateCategoryByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementByNodeIdArgs = {
  input: UpdateTemplateElementByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementArgs = {
  input: UpdateTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  input: UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateFilterJoinByNodeIdArgs = {
  input: UpdateTemplateFilterJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateFilterJoinArgs = {
  input: UpdateTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplatePermissionByNodeIdArgs = {
  input: UpdateTemplatePermissionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplatePermissionArgs = {
  input: UpdateTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionByNodeIdArgs = {
  input: UpdateTemplateSectionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionArgs = {
  input: UpdateTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionByTemplateIdAndCodeArgs = {
  input: UpdateTemplateSectionByTemplateIdAndCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageByNodeIdArgs = {
  input: UpdateTemplateStageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageArgs = {
  input: UpdateTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageReviewLevelByNodeIdArgs = {
  input: UpdateTemplateStageReviewLevelByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageReviewLevelArgs = {
  input: UpdateTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerQueueByNodeIdArgs = {
  input: UpdateTriggerQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerQueueArgs = {
  input: UpdateTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerScheduleByNodeIdArgs = {
  input: UpdateTriggerScheduleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerScheduleArgs = {
  input: UpdateTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserByNodeIdArgs = {
  input: UpdateUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserByUsernameArgs = {
  input: UpdateUserByUsernameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserApplicationJoinByNodeIdArgs = {
  input: UpdateUserApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserApplicationJoinArgs = {
  input: UpdateUserApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationByNodeIdArgs = {
  input: UpdateUserOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationArgs = {
  input: UpdateUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationByUserIdAndOrganisationIdArgs = {
  input: UpdateUserOrganisationByUserIdAndOrganisationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationApplicationJoinByNodeIdArgs = {
  input: UpdateUserOrganisationApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationApplicationJoinArgs = {
  input: UpdateUserOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationByNodeIdArgs = {
  input: UpdateVerificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationArgs = {
  input: UpdateVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationByUniqueIdArgs = {
  input: UpdateVerificationByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginByNodeIdArgs = {
  input: DeleteActionPluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginArgs = {
  input: DeleteActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginByCodeArgs = {
  input: DeleteActionPluginByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionQueueByNodeIdArgs = {
  input: DeleteActionQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionQueueArgs = {
  input: DeleteActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActivityLogByNodeIdArgs = {
  input: DeleteActivityLogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActivityLogArgs = {
  input: DeleteActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationByNodeIdArgs = {
  input: DeleteApplicationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationArgs = {
  input: DeleteApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationBySerialArgs = {
  input: DeleteApplicationBySerialInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationNoteByNodeIdArgs = {
  input: DeleteApplicationNoteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationNoteArgs = {
  input: DeleteApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationResponseByNodeIdArgs = {
  input: DeleteApplicationResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationResponseArgs = {
  input: DeleteApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStageHistoryByNodeIdArgs = {
  input: DeleteApplicationStageHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStageHistoryArgs = {
  input: DeleteApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStatusHistoryByNodeIdArgs = {
  input: DeleteApplicationStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStatusHistoryArgs = {
  input: DeleteApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterByNodeIdArgs = {
  input: DeleteCounterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterArgs = {
  input: DeleteCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterByNameArgs = {
  input: DeleteCounterByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableByNodeIdArgs = {
  input: DeleteDataTableByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableArgs = {
  input: DeleteDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableByTableNameArgs = {
  input: DeleteDataTableByTableNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableManufacturingStepByNodeIdArgs = {
  input: DeleteDataTableManufacturingStepByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableManufacturingStepArgs = {
  input: DeleteDataTableManufacturingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableActiveIngredientByNodeIdArgs = {
  input: DeleteDataTableActiveIngredientByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableActiveIngredientArgs = {
  input: DeleteDataTableActiveIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAdministrationRouteByNodeIdArgs = {
  input: DeleteDataTableAdministrationRouteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAdministrationRouteArgs = {
  input: DeleteDataTableAdministrationRouteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAnnexByNodeIdArgs = {
  input: DeleteDataTableAnnexByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAnnexArgs = {
  input: DeleteDataTableAnnexInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAnnex2ByNodeIdArgs = {
  input: DeleteDataTableAnnex2ByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAnnex2Args = {
  input: DeleteDataTableAnnex2Input;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAtcCodeByNodeIdArgs = {
  input: DeleteDataTableAtcCodeByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAtcCodeArgs = {
  input: DeleteDataTableAtcCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAtcTherapeuticCategoryByNodeIdArgs = {
  input: DeleteDataTableAtcTherapeuticCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableAtcTherapeuticCategoryArgs = {
  input: DeleteDataTableAtcTherapeuticCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableContainerByNodeIdArgs = {
  input: DeleteDataTableContainerByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableContainerArgs = {
  input: DeleteDataTableContainerInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableCountryByNodeIdArgs = {
  input: DeleteDataTableCountryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableCountryArgs = {
  input: DeleteDataTableCountryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableDosageFormByNodeIdArgs = {
  input: DeleteDataTableDosageFormByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableDosageFormArgs = {
  input: DeleteDataTableDosageFormInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableGenericIngredientByNodeIdArgs = {
  input: DeleteDataTableGenericIngredientByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableGenericIngredientArgs = {
  input: DeleteDataTableGenericIngredientInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableIngredientsListByNodeIdArgs = {
  input: DeleteDataTableIngredientsListByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableIngredientsListArgs = {
  input: DeleteDataTableIngredientsListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableListOfSraByNodeIdArgs = {
  input: DeleteDataTableListOfSraByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableListOfSraArgs = {
  input: DeleteDataTableListOfSraInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProcessingStepByNodeIdArgs = {
  input: DeleteDataTableProcessingStepByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProcessingStepArgs = {
  input: DeleteDataTableProcessingStepInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProductByNodeIdArgs = {
  input: DeleteDataTableProductByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProductArgs = {
  input: DeleteDataTableProductInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProductApplicationJoinByNodeIdArgs = {
  input: DeleteDataTableProductApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProductApplicationJoinArgs = {
  input: DeleteDataTableProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProvinceByNodeIdArgs = {
  input: DeleteDataTableProvinceByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableProvinceArgs = {
  input: DeleteDataTableProvinceInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableStorageConditionByNodeIdArgs = {
  input: DeleteDataTableStorageConditionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableStorageConditionArgs = {
  input: DeleteDataTableStorageConditionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableUnitsOfProportionByNodeIdArgs = {
  input: DeleteDataTableUnitsOfProportionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableUnitsOfProportionArgs = {
  input: DeleteDataTableUnitsOfProportionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewByNodeIdArgs = {
  input: DeleteDataViewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewArgs = {
  input: DeleteDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionByNodeIdArgs = {
  input: DeleteDataViewColumnDefinitionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionArgs = {
  input: DeleteDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  input: DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteElementTypePluginByNodeIdArgs = {
  input: DeleteElementTypePluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteElementTypePluginArgs = {
  input: DeleteElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileByNodeIdArgs = {
  input: DeleteFileByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileArgs = {
  input: DeleteFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileByUniqueIdArgs = {
  input: DeleteFileByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterByNodeIdArgs = {
  input: DeleteFilterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterArgs = {
  input: DeleteFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterByCodeArgs = {
  input: DeleteFilterByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteNotificationByNodeIdArgs = {
  input: DeleteNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteNotificationArgs = {
  input: DeleteNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByNodeIdArgs = {
  input: DeleteOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationArgs = {
  input: DeleteOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByNameArgs = {
  input: DeleteOrganisationByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByRegistrationArgs = {
  input: DeleteOrganisationByRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationApplicationJoinByNodeIdArgs = {
  input: DeleteOrganisationApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationApplicationJoinArgs = {
  input: DeleteOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionJoinByNodeIdArgs = {
  input: DeletePermissionJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionJoinArgs = {
  input: DeletePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameByNodeIdArgs = {
  input: DeletePermissionNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameArgs = {
  input: DeletePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameByNameArgs = {
  input: DeletePermissionNameByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyByNodeIdArgs = {
  input: DeletePermissionPolicyByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyArgs = {
  input: DeletePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyByNameArgs = {
  input: DeletePermissionPolicyByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProductApplicationJoinByNodeIdArgs = {
  input: DeleteProductApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteProductApplicationJoinArgs = {
  input: DeleteProductApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewByNodeIdArgs = {
  input: DeleteReviewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewArgs = {
  input: DeleteReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentByNodeIdArgs = {
  input: DeleteReviewAssignmentByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentArgs = {
  input: DeleteReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentAssignerJoinByNodeIdArgs = {
  input: DeleteReviewAssignmentAssignerJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentAssignerJoinArgs = {
  input: DeleteReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewDecisionByNodeIdArgs = {
  input: DeleteReviewDecisionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewDecisionArgs = {
  input: DeleteReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewResponseByNodeIdArgs = {
  input: DeleteReviewResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewResponseArgs = {
  input: DeleteReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewStatusHistoryByNodeIdArgs = {
  input: DeleteReviewStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewStatusHistoryArgs = {
  input: DeleteReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSystemInfoByNodeIdArgs = {
  input: DeleteSystemInfoByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSystemInfoArgs = {
  input: DeleteSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateByNodeIdArgs = {
  input: DeleteTemplateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateArgs = {
  input: DeleteTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateActionByNodeIdArgs = {
  input: DeleteTemplateActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateActionArgs = {
  input: DeleteTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryByNodeIdArgs = {
  input: DeleteTemplateCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryArgs = {
  input: DeleteTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryByCodeArgs = {
  input: DeleteTemplateCategoryByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementByNodeIdArgs = {
  input: DeleteTemplateElementByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementArgs = {
  input: DeleteTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  input: DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateFilterJoinByNodeIdArgs = {
  input: DeleteTemplateFilterJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateFilterJoinArgs = {
  input: DeleteTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplatePermissionByNodeIdArgs = {
  input: DeleteTemplatePermissionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplatePermissionArgs = {
  input: DeleteTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionByNodeIdArgs = {
  input: DeleteTemplateSectionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionArgs = {
  input: DeleteTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionByTemplateIdAndCodeArgs = {
  input: DeleteTemplateSectionByTemplateIdAndCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageByNodeIdArgs = {
  input: DeleteTemplateStageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageArgs = {
  input: DeleteTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageReviewLevelByNodeIdArgs = {
  input: DeleteTemplateStageReviewLevelByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageReviewLevelArgs = {
  input: DeleteTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerQueueByNodeIdArgs = {
  input: DeleteTriggerQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerQueueArgs = {
  input: DeleteTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerScheduleByNodeIdArgs = {
  input: DeleteTriggerScheduleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerScheduleArgs = {
  input: DeleteTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserByNodeIdArgs = {
  input: DeleteUserByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserByUsernameArgs = {
  input: DeleteUserByUsernameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserApplicationJoinByNodeIdArgs = {
  input: DeleteUserApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserApplicationJoinArgs = {
  input: DeleteUserApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationByNodeIdArgs = {
  input: DeleteUserOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationArgs = {
  input: DeleteUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationByUserIdAndOrganisationIdArgs = {
  input: DeleteUserOrganisationByUserIdAndOrganisationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationApplicationJoinByNodeIdArgs = {
  input: DeleteUserOrganisationApplicationJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationApplicationJoinArgs = {
  input: DeleteUserOrganisationApplicationJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationByNodeIdArgs = {
  input: DeleteVerificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationArgs = {
  input: DeleteVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationByUniqueIdArgs = {
  input: DeleteVerificationByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteWholeApplicationArgs = {
  input: DeleteWholeApplicationInput;
};

/** All input for the create `ActionPlugin` mutation. */
export type CreateActionPluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionPlugin` to be created by this mutation. */
  actionPlugin: ActionPluginInput;
};

/** An input for mutations affecting `ActionPlugin` */
export type ActionPluginInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionalParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  outputProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The output of our create `ActionPlugin` mutation. */
export type CreateActionPluginPayload = {
  __typename?: 'CreateActionPluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionPlugin` that was created by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
};


/** The output of our create `ActionPlugin` mutation. */
export type CreateActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: Maybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the create `ActionQueue` mutation. */
export type CreateActionQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionQueue` to be created by this mutation. */
  actionQueue: ActionQueueInput;
};

/** An input for mutations affecting `ActionQueue` */
export type ActionQueueInput = {
  id?: Maybe<Scalars['Int']>;
  triggerEvent?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  templateId?: Maybe<Scalars['Int']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `triggerQueue` in the `ActionQueueInput` mutation. */
export type ActionQueueTriggerEventFkeyInput = {
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectById?: Maybe<TriggerQueueTriggerQueuePkeyConnect>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectByNodeId?: Maybe<TriggerQueueNodeIdConnect>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteById?: Maybe<TriggerQueueTriggerQueuePkeyDelete>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TriggerQueueNodeIdDelete>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateById?: Maybe<TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateByNodeId?: Maybe<ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate>;
  /** A `TriggerQueueInput` object that will be created and connected to this object. */
  create?: Maybe<ActionQueueTriggerEventFkeyTriggerQueueCreateInput>;
};

/** The fields on `triggerQueue` to look up the row to connect. */
export type TriggerQueueTriggerQueuePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TriggerQueueNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `triggerQueue` to look up the row to delete. */
export type TriggerQueueTriggerQueuePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TriggerQueueNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `triggerQueue` to look up the row to update. */
export type TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate = {
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `triggerQueue` being updated. */
export type UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  triggerType?: Maybe<Trigger>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  status?: Maybe<TriggerQueueStatus>;
  log?: Maybe<Scalars['JSON']>;
  actionQueuesUsingId?: Maybe<ActionQueueTriggerEventFkeyInverseInput>;
};

/** Input for the nested mutation of `actionQueue` in the `TriggerQueueInput` mutation. */
export type ActionQueueTriggerEventFkeyInverseInput = {
  /** Flag indicating whether all other `actionQueue` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectById?: Maybe<Array<ActionQueueActionQueuePkeyConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ActionQueueNodeIdConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteById?: Maybe<Array<ActionQueueActionQueuePkeyDelete>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ActionQueueNodeIdDelete>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateById?: Maybe<Array<ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate>>;
  /** A `ActionQueueInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ActionQueueTriggerEventFkeyActionQueueCreateInput>>;
};

/** The fields on `actionQueue` to look up the row to connect. */
export type ActionQueueActionQueuePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ActionQueueNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `actionQueue` to look up the row to delete. */
export type ActionQueueActionQueuePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ActionQueueNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `actionQueue` to look up the row to update. */
export type ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate = {
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `actionQueue` being updated. */
export type UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  templateId?: Maybe<Scalars['Int']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `ActionQueueInput` mutation. */
export type ActionQueueTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<ActionQueueTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to connect. */
export type TemplateTemplatePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `template` to look up the row to delete. */
export type TemplateTemplatePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `template` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateCategory` in the `TemplateInput` mutation. */
export type TemplateTemplateCategoryIdFkeyInput = {
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectById?: Maybe<TemplateCategoryTemplateCategoryPkeyConnect>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectByCode?: Maybe<TemplateCategoryTemplateCategoryCodeKeyConnect>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateCategoryNodeIdConnect>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteById?: Maybe<TemplateCategoryTemplateCategoryPkeyDelete>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteByCode?: Maybe<TemplateCategoryTemplateCategoryCodeKeyDelete>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateCategoryNodeIdDelete>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateById?: Maybe<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateByCode?: Maybe<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate>;
  /** A `TemplateCategoryInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput>;
};

/** The fields on `templateCategory` to look up the row to connect. */
export type TemplateCategoryTemplateCategoryPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `templateCategory` to look up the row to connect. */
export type TemplateCategoryTemplateCategoryCodeKeyConnect = {
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateCategoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateCategory` to look up the row to delete. */
export type TemplateCategoryTemplateCategoryPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `templateCategory` to look up the row to delete. */
export type TemplateCategoryTemplateCategoryCodeKeyDelete = {
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateCategoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateCategory` to look up the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateCategory` being updated. */
export type UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
  templatesUsingId?: Maybe<TemplateTemplateCategoryIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `TemplateCategoryInput` mutation. */
export type TemplateTemplateCategoryIdFkeyInverseInput = {
  /** Flag indicating whether all other `template` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateTemplatePkeyConnect>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateNodeIdConnect>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateTemplatePkeyDelete>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateNodeIdDelete>>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate>>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate>>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateTemplateCategoryIdFkeyTemplateCreateInput>>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `TemplateInput` mutation. */
export type ApplicationTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<Array<ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationTemplateIdFkeyApplicationCreateInput>>;
};

/** The fields on `application` to look up the row to connect. */
export type ApplicationApplicationPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `application` to look up the row to connect. */
export type ApplicationApplicationSerialKeyConnect = {
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `application` to look up the row to delete. */
export type ApplicationApplicationPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `application` to look up the row to delete. */
export type ApplicationApplicationSerialKeyDelete = {
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `application` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `ApplicationInput` mutation. */
export type ApplicationTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateAction` in the `TemplateInput` mutation. */
export type TemplateActionTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateAction` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateActionTemplateActionPkeyConnect>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateActionNodeIdConnect>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateActionTemplateActionPkeyDelete>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateActionNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateAction` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateAction` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate>>;
  /** A `TemplateActionInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateActionTemplateIdFkeyTemplateActionCreateInput>>;
};

/** The fields on `templateAction` to look up the row to connect. */
export type TemplateActionTemplateActionPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateActionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateAction` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateAction` to look up the row to delete. */
export type TemplateActionTemplateActionPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateActionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateAction` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateAction` to look up the row to update. */
export type TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateAction` being updated. */
  patch: UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateAction` being updated. */
export type UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  actionCode?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  trigger?: Maybe<Trigger>;
  condition?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  description?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateActionTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `TemplateActionInput` mutation. */
export type TemplateActionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateActionTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `actionQueue` in the `TemplateInput` mutation. */
export type ActionQueueTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `actionQueue` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectById?: Maybe<Array<ActionQueueActionQueuePkeyConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ActionQueueNodeIdConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteById?: Maybe<Array<ActionQueueActionQueuePkeyDelete>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ActionQueueNodeIdDelete>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateById?: Maybe<Array<ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate>>;
  /** A `ActionQueueInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ActionQueueTemplateIdFkeyActionQueueCreateInput>>;
};

/** The fields on `actionQueue` to look up the row to update. */
export type ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate = {
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `actionQueue` being updated. */
export type UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  triggerEvent?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** Represents an update to a `ActionQueue`. Fields that are set will be updated. */
export type ActionQueuePatch = {
  id?: Maybe<Scalars['Int']>;
  triggerEvent?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  templateId?: Maybe<Scalars['Int']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** The `actionQueue` to be created by this mutation. */
export type ActionQueueTemplateIdFkeyActionQueueCreateInput = {
  id?: Maybe<Scalars['Int']>;
  triggerEvent?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `templateStage` in the `TemplateInput` mutation. */
export type TemplateStageTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateStage` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateStageTemplateStagePkeyConnect>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateStageNodeIdConnect>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateStageTemplateStagePkeyDelete>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateStageNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate>>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate>>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateStageTemplateIdFkeyTemplateStageCreateInput>>;
};

/** The fields on `templateStage` to look up the row to connect. */
export type TemplateStageTemplateStagePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateStageNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateStage` to look up the row to delete. */
export type TemplateStageTemplateStagePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateStageNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateStage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `TemplateStageInput` mutation. */
export type TemplateStageTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateStageTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `file` in the `TemplateInput` mutation. */
export type FileTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: Maybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<FileFileUniqueIdKeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: Maybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<FileFileUniqueIdKeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: Maybe<Array<FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: Maybe<Array<FileTemplateIdFkeyFileCreateInput>>;
};

/** The fields on `file` to look up the row to connect. */
export type FileFilePkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `file` to look up the row to connect. */
export type FileFileUniqueIdKeyConnect = {
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type FileNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `file` to look up the row to delete. */
export type FileFilePkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `file` to look up the row to delete. */
export type FileFileUniqueIdKeyDelete = {
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type FileNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `file` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** Input for the nested mutation of `user` in the `FileInput` mutation. */
export type FileUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnFileForFileUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnFileForFileUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<FileOnFileForFileUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<FileUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to connect. */
export type UserUserPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `user` to look up the row to connect. */
export type UserUserUsernameKeyConnect = {
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type UserNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `user` to look up the row to delete. */
export type UserUserPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `user` to look up the row to delete. */
export type UserUserUsernameKeyDelete = {
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type UserNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `user` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `user` to look up the row to update. */
export type UserOnFileForFileUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnFileForFileUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnFileForFileUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `UserInput` mutation. */
export type ApplicationUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<Array<ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationSerialKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnApplicationForApplicationUserIdFkeyNodeIdUpdate>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationUserIdFkeyApplicationCreateInput>>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForApplicationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `ApplicationInput` mutation. */
export type ApplicationUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnApplicationForApplicationUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnApplicationForApplicationUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationOnApplicationForApplicationUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnApplicationForApplicationUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnApplicationForApplicationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnApplicationForApplicationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `review` in the `UserInput` mutation. */
export type ReviewReviewerIdFkeyInverseInput = {
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewReviewPkeyConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewNodeIdConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewReviewPkeyDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewNodeIdDelete>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewOnReviewForReviewReviewerIdFkeyUsingReviewPkeyUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnReviewForReviewReviewerIdFkeyNodeIdUpdate>>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewReviewerIdFkeyReviewCreateInput>>;
};

/** The fields on `review` to look up the row to connect. */
export type ReviewReviewPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `review` to look up the row to delete. */
export type ReviewReviewPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `review` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewReviewerIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewReviewerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForReviewReviewerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `ReviewInput` mutation. */
export type ReviewReviewAssignmentIdFkeyInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<ReviewAssignmentReviewAssignmentPkeyConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewAssignmentNodeIdConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<ReviewAssignmentReviewAssignmentPkeyDelete>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewAssignmentNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput>;
};

/** The fields on `reviewAssignment` to look up the row to connect. */
export type ReviewAssignmentReviewAssignmentPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewAssignmentNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewAssignment` to look up the row to delete. */
export type ReviewAssignmentReviewAssignmentPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewAssignmentNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentAssignerIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentAssignerIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationNote` in the `UserInput` mutation. */
export type ApplicationNoteUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNoteNodeIdConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNoteNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyUsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnApplicationNoteForApplicationNoteUserIdFkeyNodeIdUpdate>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationNoteUserIdFkeyApplicationNoteCreateInput>>;
};

/** The fields on `applicationNote` to look up the row to connect. */
export type ApplicationNoteApplicationNotePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationNoteNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationNote` to look up the row to delete. */
export type ApplicationNoteApplicationNotePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationNoteNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyUsingApplicationNotePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment?: Maybe<Scalars['String']>;
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ApplicationNoteInput` mutation. */
export type ApplicationNoteApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationNoteApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisation` in the `ApplicationInput` mutation. */
export type ApplicationOrgIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationOrgIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationNameKeyConnect = {
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationRegistrationKeyConnect = {
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type OrganisationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationNameKeyDelete = {
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationRegistrationKeyDelete = {
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type OrganisationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `organisation` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `OrganisationInput` mutation. */
export type ApplicationOrgIdFkeyInverseInput = {
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<Array<ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationOrgIdFkeyApplicationCreateInput>>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `review` in the `ApplicationInput` mutation. */
export type ReviewApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewReviewPkeyConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewNodeIdConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewReviewPkeyDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewNodeIdDelete>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate>>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewApplicationIdFkeyReviewCreateInput>>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForReviewApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ReviewInput` mutation. */
export type ReviewApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `activityLog` in the `ApplicationInput` mutation. */
export type ActivityLogApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `activityLog` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  connectById?: Maybe<Array<ActivityLogActivityLogPkeyConnect>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ActivityLogNodeIdConnect>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  deleteById?: Maybe<Array<ActivityLogActivityLogPkeyDelete>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ActivityLogNodeIdDelete>>;
  /** The primary key(s) and patch data for `activityLog` for the far side of the relationship. */
  updateById?: Maybe<Array<ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate>>;
  /** The primary key(s) and patch data for `activityLog` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate>>;
  /** A `ActivityLogInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ActivityLogApplicationIdFkeyActivityLogCreateInput>>;
};

/** The fields on `activityLog` to look up the row to connect. */
export type ActivityLogActivityLogPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ActivityLogNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `activityLog` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `activityLog` to look up the row to delete. */
export type ActivityLogActivityLogPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ActivityLogNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `activityLog` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `activityLog` to look up the row to update. */
export type ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate = {
  /** An object where the defined keys will be set on the `activityLog` being updated. */
  patch: UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `activityLog` being updated. */
export type UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  type?: Maybe<EventType>;
  value?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['JSON']>;
  applicationToApplicationId?: Maybe<ActivityLogApplicationIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `ActivityLogInput` mutation. */
export type ActivityLogApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ActivityLogApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationNote` in the `ApplicationInput` mutation. */
export type ApplicationNoteApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNoteNodeIdConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNoteNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput>>;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment?: Maybe<Scalars['String']>;
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `ApplicationNoteInput` mutation. */
export type ApplicationNoteUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnApplicationNoteForApplicationNoteUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnApplicationNoteForApplicationNoteUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationNoteUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnApplicationNoteForApplicationNoteUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnApplicationNoteForApplicationNoteUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnApplicationNoteForApplicationNoteUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `file` in the `UserInput` mutation. */
export type FileUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: Maybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<FileFileUniqueIdKeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: Maybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<FileFileUniqueIdKeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: Maybe<Array<FileOnFileForFileUserIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<FileOnFileForFileUserIdFkeyUsingFileUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnFileForFileUserIdFkeyNodeIdUpdate>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: Maybe<Array<FileUserIdFkeyFileCreateInput>>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileUserIdFkeyUsingFilePkeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `FileInput` mutation. */
export type FileTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<FileOnFileForFileTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<FileTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnFileForFileTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnFileForFileTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templatePermission` in the `TemplateInput` mutation. */
export type TemplatePermissionTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `templatePermission` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplatePermissionTemplatePermissionPkeyConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplatePermissionNodeIdConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplatePermissionTemplatePermissionPkeyDelete>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplatePermissionNodeIdDelete>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate>>;
  /** A `TemplatePermissionInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput>>;
};

/** The fields on `templatePermission` to look up the row to connect. */
export type TemplatePermissionTemplatePermissionPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplatePermissionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templatePermission` to look up the row to delete. */
export type TemplatePermissionTemplatePermissionPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplatePermissionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templatePermission` to look up the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate = {
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templatePermission` being updated. */
export type UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `permissionName` in the `TemplatePermissionInput` mutation. */
export type TemplatePermissionPermissionNameIdFkeyInput = {
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: Maybe<PermissionNamePermissionNamePkeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: Maybe<PermissionNamePermissionNameNameKeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: Maybe<PermissionNameNodeIdConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: Maybe<PermissionNamePermissionNamePkeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: Maybe<PermissionNamePermissionNameNameKeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: Maybe<PermissionNameNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: Maybe<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: Maybe<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: Maybe<TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput>;
};

/** The fields on `permissionName` to look up the row to connect. */
export type PermissionNamePermissionNamePkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `permissionName` to look up the row to connect. */
export type PermissionNamePermissionNameNameKeyConnect = {
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionNameNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionName` to look up the row to delete. */
export type PermissionNamePermissionNamePkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `permissionName` to look up the row to delete. */
export type PermissionNamePermissionNameNameKeyDelete = {
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionNameNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionName` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** Input for the nested mutation of `permissionPolicy` in the `PermissionNameInput` mutation. */
export type PermissionNamePermissionPolicyIdFkeyInput = {
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectById?: Maybe<PermissionPolicyPermissionPolicyPkeyConnect>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectByName?: Maybe<PermissionPolicyPermissionPolicyNameKeyConnect>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectByNodeId?: Maybe<PermissionPolicyNodeIdConnect>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteById?: Maybe<PermissionPolicyPermissionPolicyPkeyDelete>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteByName?: Maybe<PermissionPolicyPermissionPolicyNameKeyDelete>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteByNodeId?: Maybe<PermissionPolicyNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateById?: Maybe<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateByName?: Maybe<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateByNodeId?: Maybe<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate>;
  /** A `PermissionPolicyInput` object that will be created and connected to this object. */
  create?: Maybe<PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput>;
};

/** The fields on `permissionPolicy` to look up the row to connect. */
export type PermissionPolicyPermissionPolicyPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `permissionPolicy` to look up the row to connect. */
export type PermissionPolicyPermissionPolicyNameKeyConnect = {
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionPolicyNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionPolicy` to look up the row to delete. */
export type PermissionPolicyPermissionPolicyPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `permissionPolicy` to look up the row to delete. */
export type PermissionPolicyPermissionPolicyNameKeyDelete = {
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionPolicyNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionPolicy` to look up the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionPolicy` being updated. */
export type UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
  type?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  defaultRestrictions?: Maybe<Scalars['JSON']>;
  permissionNamesUsingId?: Maybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
};

/** Input for the nested mutation of `permissionName` in the `PermissionPolicyInput` mutation. */
export type PermissionNamePermissionPolicyIdFkeyInverseInput = {
  /** Flag indicating whether all other `permissionName` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: Maybe<Array<PermissionNamePermissionNamePkeyConnect>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: Maybe<Array<PermissionNamePermissionNameNameKeyConnect>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<PermissionNameNodeIdConnect>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: Maybe<Array<PermissionNamePermissionNamePkeyDelete>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: Maybe<Array<PermissionNamePermissionNameNameKeyDelete>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<PermissionNameNodeIdDelete>>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: Maybe<Array<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: Maybe<Array<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate>>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate>>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: Maybe<Array<PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput>>;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** Input for the nested mutation of `permissionJoin` in the `PermissionNameInput` mutation. */
export type PermissionJoinPermissionNameIdFkeyInverseInput = {
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<PermissionJoinNodeIdConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<PermissionJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput>>;
};

/** The fields on `permissionJoin` to look up the row to connect. */
export type PermissionJoinPermissionJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionJoin` to look up the row to delete. */
export type PermissionJoinPermissionJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** Input for the nested mutation of `user` in the `PermissionJoinInput` mutation. */
export type PermissionJoinUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<PermissionJoinUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnPermissionJoinForPermissionJoinUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnPermissionJoinForPermissionJoinUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `notification` in the `UserInput` mutation. */
export type NotificationUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `notification` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectById?: Maybe<Array<NotificationNotificationPkeyConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<NotificationNodeIdConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteById?: Maybe<Array<NotificationNotificationPkeyDelete>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<NotificationNodeIdDelete>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateById?: Maybe<Array<NotificationOnNotificationForNotificationUserIdFkeyUsingNotificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnNotificationForNotificationUserIdFkeyNodeIdUpdate>>;
  /** A `NotificationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<NotificationUserIdFkeyNotificationCreateInput>>;
};

/** The fields on `notification` to look up the row to connect. */
export type NotificationNotificationPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type NotificationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `notification` to look up the row to delete. */
export type NotificationNotificationPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type NotificationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `notification` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `notification` to look up the row to update. */
export type NotificationOnNotificationForNotificationUserIdFkeyUsingNotificationPkeyUpdate = {
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: UpdateNotificationOnNotificationForNotificationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `notification` being updated. */
export type UpdateNotificationOnNotificationForNotificationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** Input for the nested mutation of `user` in the `NotificationInput` mutation. */
export type NotificationUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnNotificationForNotificationUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnNotificationForNotificationUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<NotificationOnNotificationForNotificationUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<NotificationUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnNotificationForNotificationUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnNotificationForNotificationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnNotificationForNotificationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `permissionJoin` in the `UserInput` mutation. */
export type PermissionJoinUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<PermissionJoinNodeIdConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<PermissionJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyUsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<PermissionJoinUserIdFkeyPermissionJoinCreateInput>>;
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyUsingPermissionJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** Input for the nested mutation of `organisation` in the `PermissionJoinInput` mutation. */
export type PermissionJoinOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<PermissionJoinOrganisationIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationNote` in the `OrganisationInput` mutation. */
export type ApplicationNoteOrgIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationNoteNodeIdConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationNoteNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationNoteOrgIdFkeyApplicationNoteCreateInput>>;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment?: Maybe<Scalars['String']>;
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisation` in the `ApplicationNoteInput` mutation. */
export type ApplicationNoteOrgIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationNoteOrgIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisationApplicationJoin` in the `OrganisationInput` mutation. */
export type OrganisationApplicationJoinOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `organisationApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<OrganisationApplicationJoinOrganisationApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<OrganisationApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<OrganisationApplicationJoinOrganisationApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<OrganisationApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `organisationApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `organisationApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyNodeIdUpdate>>;
  /** A `OrganisationApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<OrganisationApplicationJoinOrganisationIdFkeyOrganisationApplicationJoinCreateInput>>;
};

/** The fields on `organisationApplicationJoin` to look up the row to connect. */
export type OrganisationApplicationJoinOrganisationApplicationJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type OrganisationApplicationJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `organisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `organisationApplicationJoin` to look up the row to delete. */
export type OrganisationApplicationJoinOrganisationApplicationJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type OrganisationApplicationJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `organisationApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `organisationApplicationJoin` to look up the row to update. */
export type OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
  patch: UpdateOrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
export type UpdateOrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `OrganisationApplicationJoinInput` mutation. */
export type OrganisationApplicationJoinApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<OrganisationApplicationJoinApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationResponse` in the `ApplicationInput` mutation. */
export type ApplicationResponseApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationResponse` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationResponseApplicationResponsePkeyConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationResponseNodeIdConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationResponseApplicationResponsePkeyDelete>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationResponseNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate>>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput>>;
};

/** The fields on `applicationResponse` to look up the row to connect. */
export type ApplicationResponseApplicationResponsePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationResponseNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationResponse` to look up the row to delete. */
export type ApplicationResponseApplicationResponsePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationResponseNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateElement` in the `ApplicationResponseInput` mutation. */
export type ApplicationResponseTemplateElementIdFkeyInput = {
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: Maybe<TemplateElementTemplateElementPkeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateElementNodeIdConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: Maybe<TemplateElementTemplateElementPkeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateElementNodeIdDelete>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: Maybe<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput>;
};

/** The fields on `templateElement` to look up the row to connect. */
export type TemplateElementTemplateElementPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `templateElement` to look up the row to connect. */
export type TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect = {
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateElementNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateElement` to look up the row to delete. */
export type TemplateElementTemplateElementPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `templateElement` to look up the row to delete. */
export type TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete = {
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateElementNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateElement` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateSection` in the `TemplateElementInput` mutation. */
export type TemplateElementSectionIdFkeyInput = {
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectById?: Maybe<TemplateSectionTemplateSectionPkeyConnect>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByTemplateIdAndCode?: Maybe<TemplateSectionTemplateSectionTemplateIdCodeKeyConnect>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateSectionNodeIdConnect>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteById?: Maybe<TemplateSectionTemplateSectionPkeyDelete>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByTemplateIdAndCode?: Maybe<TemplateSectionTemplateSectionTemplateIdCodeKeyDelete>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateSectionNodeIdDelete>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateById?: Maybe<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByTemplateIdAndCode?: Maybe<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate>;
  /** A `TemplateSectionInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateElementSectionIdFkeyTemplateSectionCreateInput>;
};

/** The fields on `templateSection` to look up the row to connect. */
export type TemplateSectionTemplateSectionPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `templateSection` to look up the row to connect. */
export type TemplateSectionTemplateSectionTemplateIdCodeKeyConnect = {
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateSectionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateSection` to look up the row to delete. */
export type TemplateSectionTemplateSectionPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `templateSection` to look up the row to delete. */
export type TemplateSectionTemplateSectionTemplateIdCodeKeyDelete = {
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateSectionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateSection` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateSection` being updated. */
export type UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `TemplateSectionInput` mutation. */
export type TemplateSectionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateSectionTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateInput` mutation. */
export type ReviewAssignmentTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentReviewerIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentReviewerIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `UserInput` mutation. */
export type ReviewAssignmentAssignerIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentAssignerIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisation` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `permissionJoin` in the `OrganisationInput` mutation. */
export type PermissionJoinOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<PermissionJoinNodeIdConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<PermissionJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput>>;
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** Input for the nested mutation of `permissionName` in the `PermissionJoinInput` mutation. */
export type PermissionJoinPermissionNameIdFkeyInput = {
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: Maybe<PermissionNamePermissionNamePkeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: Maybe<PermissionNamePermissionNameNameKeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: Maybe<PermissionNameNodeIdConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: Maybe<PermissionNamePermissionNamePkeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: Maybe<PermissionNamePermissionNameNameKeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: Maybe<PermissionNameNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: Maybe<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: Maybe<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: Maybe<PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: Maybe<PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput>;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templatePermission` in the `PermissionNameInput` mutation. */
export type TemplatePermissionPermissionNameIdFkeyInverseInput = {
  /** Flag indicating whether all other `templatePermission` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplatePermissionTemplatePermissionPkeyConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplatePermissionNodeIdConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplatePermissionTemplatePermissionPkeyDelete>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplatePermissionNodeIdDelete>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate>>;
  /** A `TemplatePermissionInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput>>;
};

/** The fields on `templatePermission` to look up the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate = {
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templatePermission` being updated. */
export type UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `TemplatePermissionInput` mutation. */
export type TemplatePermissionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TemplatePermissionTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateFilterJoin` in the `TemplateInput` mutation. */
export type TemplateFilterJoinTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateFilterJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateFilterJoinNodeIdConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyDelete>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateFilterJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate>>;
  /** A `TemplateFilterJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput>>;
};

/** The fields on `templateFilterJoin` to look up the row to connect. */
export type TemplateFilterJoinTemplateFilterJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateFilterJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateFilterJoin` to look up the row to delete. */
export type TemplateFilterJoinTemplateFilterJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateFilterJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateFilterJoin` to look up the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
export type UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  filterId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `TemplateFilterJoinInput` mutation. */
export type TemplateFilterJoinTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateFilterJoinTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateSection` in the `TemplateInput` mutation. */
export type TemplateSectionTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateSection` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateSectionTemplateSectionPkeyConnect>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByTemplateIdAndCode?: Maybe<Array<TemplateSectionTemplateSectionTemplateIdCodeKeyConnect>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateSectionNodeIdConnect>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateSectionTemplateSectionPkeyDelete>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByTemplateIdAndCode?: Maybe<Array<TemplateSectionTemplateSectionTemplateIdCodeKeyDelete>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateSectionNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByTemplateIdAndCode?: Maybe<Array<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate>>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate>>;
  /** A `TemplateSectionInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateSectionTemplateIdFkeyTemplateSectionCreateInput>>;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateSection` being updated. */
export type UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateElement` in the `TemplateSectionInput` mutation. */
export type TemplateElementSectionIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateElement` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateElementTemplateElementPkeyConnect>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: Maybe<Array<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateElementNodeIdConnect>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateElementTemplateElementPkeyDelete>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: Maybe<Array<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateElementNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: Maybe<Array<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate>>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateElementSectionIdFkeyTemplateElementCreateInput>>;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationResponse` in the `TemplateElementInput` mutation. */
export type ApplicationResponseTemplateElementIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationResponse` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationResponseApplicationResponsePkeyConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationResponseNodeIdConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationResponseApplicationResponsePkeyDelete>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationResponseNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate>>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput>>;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ApplicationResponseInput` mutation. */
export type ApplicationResponseApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationResponseApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `ApplicationInput` mutation. */
export type ApplicationStageHistoryApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationStageHistory` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationStageHistoryNodeIdConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationStageHistoryNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate>>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput>>;
};

/** The fields on `applicationStageHistory` to look up the row to connect. */
export type ApplicationStageHistoryApplicationStageHistoryPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationStageHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationStageHistory` to look up the row to delete. */
export type ApplicationStageHistoryApplicationStageHistoryPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationStageHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStageHistoryApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `dataTableProductApplicationJoin` in the `ApplicationInput` mutation. */
export type DataTableProductApplicationJoinApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `dataTableProductApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<DataTableProductApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<DataTableProductApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `dataTableProductApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingDataTableProductApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `dataTableProductApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyNodeIdUpdate>>;
  /** A `DataTableProductApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<DataTableProductApplicationJoinApplicationIdFkeyDataTableProductApplicationJoinCreateInput>>;
};

/** The fields on `dataTableProductApplicationJoin` to look up the row to connect. */
export type DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type DataTableProductApplicationJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `dataTableProductApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `dataTableProductApplicationJoin` to look up the row to delete. */
export type DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type DataTableProductApplicationJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `dataTableProductApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `dataTableProductApplicationJoin` to look up the row to update. */
export type DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingDataTableProductApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
  patch: UpdateDataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
export type UpdateDataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  dataTableProductId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `DataTableProductApplicationJoinInput` mutation. */
export type DataTableProductApplicationJoinApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `file` in the `ApplicationInput` mutation. */
export type FileApplicationSerialFkeyInverseInput = {
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: Maybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<FileFileUniqueIdKeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: Maybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<FileFileUniqueIdKeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: Maybe<Array<FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: Maybe<Array<FileApplicationSerialFkeyFileCreateInput>>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationSerialFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `FileInput` mutation. */
export type FileApplicationSerialFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<FileOnFileForFileApplicationSerialFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<FileApplicationSerialFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnFileForFileApplicationSerialFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `notification` in the `ApplicationInput` mutation. */
export type NotificationApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `notification` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectById?: Maybe<Array<NotificationNotificationPkeyConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<NotificationNodeIdConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteById?: Maybe<Array<NotificationNotificationPkeyDelete>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<NotificationNodeIdDelete>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateById?: Maybe<Array<NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate>>;
  /** A `NotificationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<NotificationApplicationIdFkeyNotificationCreateInput>>;
};

/** The fields on `notification` to look up the row to update. */
export type NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate = {
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `notification` being updated. */
export type UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `NotificationInput` mutation. */
export type NotificationApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<NotificationApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisationApplicationJoin` in the `ApplicationInput` mutation. */
export type OrganisationApplicationJoinApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `organisationApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<OrganisationApplicationJoinOrganisationApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<OrganisationApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<OrganisationApplicationJoinOrganisationApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `organisationApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<OrganisationApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `organisationApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingOrganisationApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `organisationApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate>>;
  /** A `OrganisationApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<OrganisationApplicationJoinApplicationIdFkeyOrganisationApplicationJoinCreateInput>>;
};

/** The fields on `organisationApplicationJoin` to look up the row to update. */
export type OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingOrganisationApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
  patch: UpdateOrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
export type UpdateOrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** Input for the nested mutation of `organisation` in the `OrganisationApplicationJoinInput` mutation. */
export type OrganisationApplicationJoinOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `OrganisationInput` mutation. */
export type ReviewAssignmentOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateStage` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: Maybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateStageNodeIdConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: Maybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: Maybe<TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentStageIdFkeyTemplateStageCreateInput>;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `TemplateStageInput` mutation. */
export type ApplicationStageHistoryStageIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationStageHistory` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationStageHistoryNodeIdConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationStageHistoryNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate>>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput>>;
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateStage` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStageHistoryStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: Maybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateStageNodeIdConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: Maybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: Maybe<TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput>;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateStageInput` mutation. */
export type ReviewAssignmentStageIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `productApplicationJoin` in the `ApplicationInput` mutation. */
export type ProductApplicationJoinApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `productApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `productApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<ProductApplicationJoinProductApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `productApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ProductApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `productApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<ProductApplicationJoinProductApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `productApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ProductApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `productApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<ProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingProductApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `productApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyNodeIdUpdate>>;
  /** A `ProductApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ProductApplicationJoinApplicationIdFkeyProductApplicationJoinCreateInput>>;
};

/** The fields on `productApplicationJoin` to look up the row to connect. */
export type ProductApplicationJoinProductApplicationJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ProductApplicationJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `productApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `productApplicationJoin` to look up the row to delete. */
export type ProductApplicationJoinProductApplicationJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ProductApplicationJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `productApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `productApplicationJoin` to look up the row to update. */
export type ProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingProductApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `productApplicationJoin` being updated. */
  patch: UpdateProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `productApplicationJoin` being updated. */
export type UpdateProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  productId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<ProductApplicationJoinApplicationIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `ProductApplicationJoinInput` mutation. */
export type ProductApplicationJoinApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<ProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<ProductApplicationJoinApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `ApplicationInput` mutation. */
export type ReviewAssignmentApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `triggerSchedule` in the `TemplateInput` mutation. */
export type TriggerScheduleTemplateIdFkeyInverseInput = {
  /** Flag indicating whether all other `triggerSchedule` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TriggerScheduleNodeIdConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyDelete>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TriggerScheduleNodeIdDelete>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateById?: Maybe<Array<TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate>>;
  /** A `TriggerScheduleInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput>>;
};

/** The fields on `triggerSchedule` to look up the row to connect. */
export type TriggerScheduleTriggerSchedulePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TriggerScheduleNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `triggerSchedule` to look up the row to delete. */
export type TriggerScheduleTriggerSchedulePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TriggerScheduleNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `triggerSchedule` to look up the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate = {
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `triggerSchedule` being updated. */
export type UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled?: Maybe<Scalars['Datetime']>;
  applicationId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `TriggerScheduleInput` mutation. */
export type TriggerScheduleApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<TriggerScheduleApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `triggerSchedule` in the `ApplicationInput` mutation. */
export type TriggerScheduleApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `triggerSchedule` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TriggerScheduleNodeIdConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyDelete>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TriggerScheduleNodeIdDelete>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateById?: Maybe<Array<TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate>>;
  /** A `TriggerScheduleInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput>>;
};

/** The fields on `triggerSchedule` to look up the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate = {
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `triggerSchedule` being updated. */
export type UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled?: Maybe<Scalars['Datetime']>;
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `TriggerScheduleInput` mutation. */
export type TriggerScheduleTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: Maybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateNodeIdConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: Maybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: Maybe<TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: Maybe<TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: Maybe<TriggerScheduleTemplateIdFkeyTemplateCreateInput>;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate = {
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** Represents an update to a `Template`. Fields that are set will be updated. */
export type TemplatePatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The `template` to be created by this mutation. */
export type TriggerScheduleTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `TriggerScheduleInput` mutation. */
export type TriggerScheduleEditorUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<TriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<TriggerScheduleEditorUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `UserInput` mutation. */
export type ReviewAssignmentReviewerIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentReviewerIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateStageReviewLevel` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentLevelIdFkeyInput = {
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectById?: Maybe<TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateStageReviewLevelNodeIdConnect>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteById?: Maybe<TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateStageReviewLevelNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateById?: Maybe<TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate>;
  /** A `TemplateStageReviewLevelInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput>;
};

/** The fields on `templateStageReviewLevel` to look up the row to connect. */
export type TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateStageReviewLevelNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateStageReviewLevel` to look up the row to delete. */
export type TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateStageReviewLevelNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `templateStageReviewLevel` to look up the row to update. */
export type TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
export type UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateStage` in the `TemplateStageReviewLevelInput` mutation. */
export type TemplateStageReviewLevelStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: Maybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateStageNodeIdConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: Maybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: Maybe<TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput>;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateStageReviewLevel` in the `TemplateStageInput` mutation. */
export type TemplateStageReviewLevelStageIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateStageReviewLevel` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateStageReviewLevelNodeIdConnect>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateStageReviewLevelNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate>>;
  /** A `TemplateStageReviewLevelInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput>>;
};

/** The fields on `templateStageReviewLevel` to look up the row to update. */
export type TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
export type UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateStageReviewLevelInput` mutation. */
export type ReviewAssignmentLevelIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput>>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `review` in the `ReviewAssignmentInput` mutation. */
export type ReviewReviewAssignmentIdFkeyInverseInput = {
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewReviewPkeyConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewNodeIdConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewReviewPkeyDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewNodeIdDelete>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate>>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewReviewAssignmentIdFkeyReviewCreateInput>>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `ReviewInput` mutation. */
export type ReviewReviewerIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnReviewForReviewReviewerIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnReviewForReviewReviewerIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewOnReviewForReviewReviewerIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewReviewerIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewForReviewReviewerIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewForReviewReviewerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnReviewForReviewReviewerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `UserInput` mutation. */
export type ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentAssignerJoinAssignerIdFkeyReviewAssignmentAssignerJoinCreateInput>>;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to connect. */
export type ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewAssignmentAssignerJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to delete. */
export type ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewAssignmentAssignerJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** Input for the nested mutation of `user` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type ReviewAssignmentAssignerJoinAssignerIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `triggerSchedule` in the `UserInput` mutation. */
export type TriggerScheduleEditorUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `triggerSchedule` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TriggerScheduleNodeIdConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteById?: Maybe<Array<TriggerScheduleTriggerSchedulePkeyDelete>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TriggerScheduleNodeIdDelete>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateById?: Maybe<Array<TriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingTriggerSchedulePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyNodeIdUpdate>>;
  /** A `TriggerScheduleInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TriggerScheduleEditorUserIdFkeyTriggerScheduleCreateInput>>;
};

/** The fields on `triggerSchedule` to look up the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingTriggerSchedulePkeyUpdate = {
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `triggerSchedule` being updated. */
export type UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled?: Maybe<Scalars['Datetime']>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** Represents an update to a `TriggerSchedule`. Fields that are set will be updated. */
export type TriggerSchedulePatch = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled?: Maybe<Scalars['Datetime']>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** The `triggerSchedule` to be created by this mutation. */
export type TriggerScheduleEditorUserIdFkeyTriggerScheduleCreateInput = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled: Scalars['Datetime'];
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** Input for the nested mutation of `userApplicationJoin` in the `UserInput` mutation. */
export type UserApplicationJoinUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `userApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<UserApplicationJoinUserApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserApplicationJoinUserApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `userApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `userApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyNodeIdUpdate>>;
  /** A `UserApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserApplicationJoinUserIdFkeyUserApplicationJoinCreateInput>>;
};

/** The fields on `userApplicationJoin` to look up the row to connect. */
export type UserApplicationJoinUserApplicationJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type UserApplicationJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `userApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `userApplicationJoin` to look up the row to delete. */
export type UserApplicationJoinUserApplicationJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type UserApplicationJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `userApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `userApplicationJoin` to look up the row to update. */
export type UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
  patch: UpdateUserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
export type UpdateUserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `UserApplicationJoinInput` mutation. */
export type UserApplicationJoinApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<UserApplicationJoinApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userApplicationJoin` in the `ApplicationInput` mutation. */
export type UserApplicationJoinApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `userApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<UserApplicationJoinUserApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserApplicationJoinUserApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `userApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `userApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingUserApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `userApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyNodeIdUpdate>>;
  /** A `UserApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserApplicationJoinApplicationIdFkeyUserApplicationJoinCreateInput>>;
};

/** The fields on `userApplicationJoin` to look up the row to update. */
export type UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingUserApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
  patch: UpdateUserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
export type UpdateUserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** Input for the nested mutation of `user` in the `UserApplicationJoinInput` mutation. */
export type UserApplicationJoinUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<UserApplicationJoinUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userOrganisation` in the `UserInput` mutation. */
export type UserOrganisationUserIdFkeyInverseInput = {
  /** Flag indicating whether all other `userOrganisation` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectById?: Maybe<Array<UserOrganisationUserOrganisationPkeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserOrganisationNodeIdConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserOrganisationUserOrganisationPkeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserOrganisationNodeIdDelete>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateById?: Maybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate>>;
  /** A `UserOrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserOrganisationUserIdFkeyUserOrganisationCreateInput>>;
};

/** The fields on `userOrganisation` to look up the row to connect. */
export type UserOrganisationUserOrganisationPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `userOrganisation` to look up the row to connect. */
export type UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect = {
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type UserOrganisationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `userOrganisation` to look up the row to delete. */
export type UserOrganisationUserOrganisationPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `userOrganisation` to look up the row to delete. */
export type UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete = {
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type UserOrganisationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userOrganisation` being updated. */
export type UpdateUserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `user` in the `UserOrganisationInput` mutation. */
export type UserOrganisationUserIdFkeyInput = {
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectById?: Maybe<UserUserPkeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByUsername?: Maybe<UserUserUsernameKeyConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserNodeIdConnect>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteById?: Maybe<UserUserPkeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByUsername?: Maybe<UserUserUsernameKeyDelete>;
  /** The primary key(s) for `user` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserNodeIdDelete>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateById?: Maybe<UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserPkeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByUsername?: Maybe<UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserUsernameKeyUpdate>;
  /** The primary key(s) and patch data for `user` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate>;
  /** A `UserInput` object that will be created and connected to this object. */
  create?: Maybe<UserOrganisationUserIdFkeyUserCreateInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserPkeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnUserOrganisationForUserOrganisationUserIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `user` being updated. */
export type UpdateUserOnUserOrganisationForUserOrganisationUserIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnUserOrganisationForUserOrganisationUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** Represents an update to a `User`. Fields that are set will be updated. */
export type UserPatch = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The `user` to be created by this mutation. */
export type UserOrganisationUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisation` in the `UserOrganisationInput` mutation. */
export type UserOrganisationOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<UserOrganisationOrganisationIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `OrganisationInput` mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput>>;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** Input for the nested mutation of `organisation` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: Maybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: Maybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: Maybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: Maybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: Maybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<OrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: Maybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: Maybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: Maybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userOrganisation` in the `OrganisationInput` mutation. */
export type UserOrganisationOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `userOrganisation` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectById?: Maybe<Array<UserOrganisationUserOrganisationPkeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserOrganisationNodeIdConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserOrganisationUserOrganisationPkeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserOrganisationNodeIdDelete>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateById?: Maybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByUserIdAndOrganisationId?: Maybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate>>;
  /** A `UserOrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput>>;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userOrganisation` being updated. */
export type UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userOrganisationApplicationJoin` in the `UserOrganisationInput` mutation. */
export type UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput = {
  /** Flag indicating whether all other `userOrganisationApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserOrganisationApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserOrganisationApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `userOrganisationApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisationApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyNodeIdUpdate>>;
  /** A `UserOrganisationApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserOrganisationApplicationJoinUserOrganisationIdFkeyUserOrganisationApplicationJoinCreateInput>>;
};

/** The fields on `userOrganisationApplicationJoin` to look up the row to connect. */
export type UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type UserOrganisationApplicationJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `userOrganisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `userOrganisationApplicationJoin` to look up the row to delete. */
export type UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type UserOrganisationApplicationJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `userOrganisationApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `userOrganisationApplicationJoin` to look up the row to update. */
export type UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
  patch: UpdateUserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
export type UpdateUserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `UserOrganisationApplicationJoinInput` mutation. */
export type UserOrganisationApplicationJoinApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userOrganisationApplicationJoin` in the `ApplicationInput` mutation. */
export type UserOrganisationApplicationJoinApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `userOrganisationApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<UserOrganisationApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<UserOrganisationApplicationJoinUserOrganisationApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `userOrganisationApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<UserOrganisationApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `userOrganisationApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingUserOrganisationApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisationApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate>>;
  /** A `UserOrganisationApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<UserOrganisationApplicationJoinApplicationIdFkeyUserOrganisationApplicationJoinCreateInput>>;
};

/** The fields on `userOrganisationApplicationJoin` to look up the row to update. */
export type UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingUserOrganisationApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
  patch: UpdateUserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
export type UpdateUserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userOrganisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** Input for the nested mutation of `userOrganisation` in the `UserOrganisationApplicationJoinInput` mutation. */
export type UserOrganisationApplicationJoinUserOrganisationIdFkeyInput = {
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectById?: Maybe<UserOrganisationUserOrganisationPkeyConnect>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByUserIdAndOrganisationId?: Maybe<UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByNodeId?: Maybe<UserOrganisationNodeIdConnect>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteById?: Maybe<UserOrganisationUserOrganisationPkeyDelete>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByUserIdAndOrganisationId?: Maybe<UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByNodeId?: Maybe<UserOrganisationNodeIdDelete>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateById?: Maybe<UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByUserIdAndOrganisationId?: Maybe<UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByNodeId?: Maybe<UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyNodeIdUpdate>;
  /** A `UserOrganisationInput` object that will be created and connected to this object. */
  create?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyUserOrganisationCreateInput>;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationPkeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `userOrganisation` being updated. */
export type UpdateUserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyPatch;
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** Represents an update to a `UserOrganisation`. Fields that are set will be updated. */
export type UserOrganisationPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The `userOrganisation` to be created by this mutation. */
export type UserOrganisationApplicationJoinUserOrganisationIdFkeyUserOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
  patch: UserOrganisationApplicationJoinPatch;
};

/** Represents an update to a `UserOrganisationApplicationJoin`. Fields that are set will be updated. */
export type UserOrganisationApplicationJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userOrganisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** The `userOrganisationApplicationJoin` to be created by this mutation. */
export type UserOrganisationApplicationJoinApplicationIdFkeyUserOrganisationApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userOrganisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** Input for the nested mutation of `verification` in the `ApplicationInput` mutation. */
export type VerificationApplicationIdFkeyInverseInput = {
  /** Flag indicating whether all other `verification` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectById?: Maybe<Array<VerificationVerificationPkeyConnect>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<VerificationVerificationUniqueIdKeyConnect>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<VerificationNodeIdConnect>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteById?: Maybe<Array<VerificationVerificationPkeyDelete>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<VerificationVerificationUniqueIdKeyDelete>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<VerificationNodeIdDelete>>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateById?: Maybe<Array<VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate>>;
  /** A `VerificationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<VerificationApplicationIdFkeyVerificationCreateInput>>;
};

/** The fields on `verification` to look up the row to connect. */
export type VerificationVerificationPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `verification` to look up the row to connect. */
export type VerificationVerificationUniqueIdKeyConnect = {
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type VerificationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `verification` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `verification` to look up the row to delete. */
export type VerificationVerificationPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `verification` to look up the row to delete. */
export type VerificationVerificationUniqueIdKeyDelete = {
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type VerificationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `verification` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `verification` to look up the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate = {
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `verification` being updated. */
export type UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeExpired?: Maybe<Scalars['Datetime']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<VerificationApplicationIdFkeyInput>;
};

/** Input for the nested mutation of `application` in the `VerificationInput` mutation. */
export type VerificationApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: Maybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: Maybe<ApplicationApplicationSerialKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: Maybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNodeIdDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: Maybe<ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: Maybe<ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: Maybe<VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: Maybe<VerificationApplicationIdFkeyApplicationCreateInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** Represents an update to a `Application`. Fields that are set will be updated. */
export type ApplicationPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `application` to be created by this mutation. */
export type VerificationApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The fields on `verification` to look up the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `verification` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: VerificationPatch;
};

/** Represents an update to a `Verification`. Fields that are set will be updated. */
export type VerificationPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  applicationId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeExpired?: Maybe<Scalars['Datetime']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<VerificationApplicationIdFkeyInput>;
};

/** The `verification` to be created by this mutation. */
export type VerificationApplicationIdFkeyVerificationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  eventCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeExpired?: Maybe<Scalars['Datetime']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<VerificationApplicationIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationApplicationJoinOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type UserOrganisationApplicationJoinApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationOnUserOrganisationApplicationJoinForUserOrganisationApplicationJoinUserOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userOrganisationApplicationJoin` being updated. */
  patch: UserOrganisationApplicationJoinPatch;
};

/** The `userOrganisationApplicationJoin` to be created by this mutation. */
export type UserOrganisationApplicationJoinUserOrganisationIdFkeyUserOrganisationApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** The `userOrganisation` to be created by this mutation. */
export type UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** Represents an update to a `Organisation`. Fields that are set will be updated. */
export type OrganisationPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The `organisation` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: Maybe<ReviewAssignmentReviewAssignmentPkeyConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewAssignmentNodeIdConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: Maybe<ReviewAssignmentReviewAssignmentPkeyDelete>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewAssignmentNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: Maybe<ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput>;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput>>;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** Represents an update to a `ReviewAssignmentAssignerJoin`. Fields that are set will be updated. */
export type ReviewAssignmentAssignerJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** Represents an update to a `ReviewAssignment`. Fields that are set will be updated. */
export type ReviewAssignmentPatch = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status?: Maybe<ReviewAssignmentStatus>;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type UserOrganisationOrganisationIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate = {
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyPatch;
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** The `userOrganisation` to be created by this mutation. */
export type UserOrganisationUserIdFkeyUserOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type UserApplicationJoinUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
  patch: UserApplicationJoinPatch;
};

/** Represents an update to a `UserApplicationJoin`. Fields that are set will be updated. */
export type UserApplicationJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** The `userApplicationJoin` to be created by this mutation. */
export type UserApplicationJoinApplicationIdFkeyUserApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserApplicationJoinOnUserApplicationJoinForUserApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type UserApplicationJoinApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnUserApplicationJoinForUserApplicationJoinUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `userApplicationJoin` being updated. */
  patch: UserApplicationJoinPatch;
};

/** The `userApplicationJoin` to be created by this mutation. */
export type UserApplicationJoinUserIdFkeyUserApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinAssignerIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinAssignerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinAssignerIdFkeyReviewAssignmentAssignerJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewForReviewReviewerIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewForReviewReviewerIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewForReviewReviewerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ReviewReviewerIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewDecision` in the `ReviewInput` mutation. */
export type ReviewDecisionReviewIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewDecision` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewDecisionReviewDecisionPkeyConnect>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewDecisionNodeIdConnect>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewDecisionReviewDecisionPkeyDelete>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewDecisionNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewDecision` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewDecision` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate>>;
  /** A `ReviewDecisionInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewDecisionReviewIdFkeyReviewDecisionCreateInput>>;
};

/** The fields on `reviewDecision` to look up the row to connect. */
export type ReviewDecisionReviewDecisionPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewDecisionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewDecision` to look up the row to delete. */
export type ReviewDecisionReviewDecisionPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewDecisionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewDecision` to look up the row to update. */
export type ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewDecision` being updated. */
  patch: UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewDecision` being updated. */
export type UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  decision?: Maybe<Decision>;
  comment?: Maybe<Scalars['String']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  reviewToReviewId?: Maybe<ReviewDecisionReviewIdFkeyInput>;
};

/** Input for the nested mutation of `review` in the `ReviewDecisionInput` mutation. */
export type ReviewDecisionReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewNodeIdDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewDecisionReviewIdFkeyReviewCreateInput>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `notification` in the `ReviewInput` mutation. */
export type NotificationReviewIdFkeyInverseInput = {
  /** Flag indicating whether all other `notification` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectById?: Maybe<Array<NotificationNotificationPkeyConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<NotificationNodeIdConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteById?: Maybe<Array<NotificationNotificationPkeyDelete>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<NotificationNodeIdDelete>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateById?: Maybe<Array<NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate>>;
  /** A `NotificationInput` object that will be created and connected to this object. */
  create?: Maybe<Array<NotificationReviewIdFkeyNotificationCreateInput>>;
};

/** The fields on `notification` to look up the row to update. */
export type NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate = {
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `notification` being updated. */
export type UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** Input for the nested mutation of `review` in the `NotificationInput` mutation. */
export type NotificationReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewNodeIdDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<NotificationReviewIdFkeyReviewCreateInput>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewInput` mutation. */
export type ReviewResponseReviewIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewResponseNodeIdConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewResponseNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewResponseReviewIdFkeyReviewResponseCreateInput>>;
};

/** The fields on `reviewResponse` to look up the row to connect. */
export type ReviewResponseReviewResponsePkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewResponseNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewResponse` to look up the row to delete. */
export type ReviewResponseReviewResponsePkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewResponseNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** Input for the nested mutation of `applicationResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseApplicationResponseIdFkeyInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: Maybe<ApplicationResponseApplicationResponsePkeyConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationResponseNodeIdConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationResponseApplicationResponsePkeyDelete>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: Maybe<ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput>;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** Input for the nested mutation of `file` in the `ApplicationResponseInput` mutation. */
export type FileApplicationResponseIdFkeyInverseInput = {
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: Maybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<FileFileUniqueIdKeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: Maybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<FileFileUniqueIdKeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: Maybe<Array<FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: Maybe<Array<FileApplicationResponseIdFkeyFileCreateInput>>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationResponseIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** Input for the nested mutation of `applicationResponse` in the `FileInput` mutation. */
export type FileApplicationResponseIdFkeyInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: Maybe<ApplicationResponseApplicationResponsePkeyConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationResponseNodeIdConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationResponseApplicationResponsePkeyDelete>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: Maybe<ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: Maybe<FileApplicationResponseIdFkeyApplicationResponseCreateInput>;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewResponse` in the `ApplicationResponseInput` mutation. */
export type ReviewResponseApplicationResponseIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewResponseNodeIdConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewResponseNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput>>;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseReviewResponseLinkIdFkeyInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: Maybe<ReviewResponseReviewResponsePkeyConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewResponseNodeIdConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: Maybe<ReviewResponseReviewResponsePkeyDelete>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: Maybe<ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput>;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseOriginalReviewResponseIdFkeyInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: Maybe<ReviewResponseReviewResponsePkeyConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewResponseNodeIdConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: Maybe<ReviewResponseReviewResponsePkeyDelete>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: Maybe<ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput>;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** Input for the nested mutation of `review` in the `ReviewResponseInput` mutation. */
export type ReviewResponseReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewNodeIdDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewResponseReviewIdFkeyReviewCreateInput>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewStatusHistory` in the `ReviewInput` mutation. */
export type ReviewStatusHistoryReviewIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewStatusHistory` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewStatusHistoryReviewStatusHistoryPkeyConnect>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewStatusHistoryNodeIdConnect>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewStatusHistoryReviewStatusHistoryPkeyDelete>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewStatusHistoryNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewStatusHistory` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewStatusHistory` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate>>;
  /** A `ReviewStatusHistoryInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput>>;
};

/** The fields on `reviewStatusHistory` to look up the row to connect. */
export type ReviewStatusHistoryReviewStatusHistoryPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewStatusHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewStatusHistory` to look up the row to delete. */
export type ReviewStatusHistoryReviewStatusHistoryPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewStatusHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `reviewStatusHistory` to look up the row to update. */
export type ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
  patch: UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
export type UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  reviewToReviewId?: Maybe<ReviewStatusHistoryReviewIdFkeyInput>;
};

/** Input for the nested mutation of `review` in the `ReviewStatusHistoryInput` mutation. */
export type ReviewStatusHistoryReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: Maybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: Maybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: Maybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ReviewNodeIdDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: Maybe<ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewStatusHistoryReviewIdFkeyReviewCreateInput>;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** Represents an update to a `Review`. Fields that are set will be updated. */
export type ReviewPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The `review` to be created by this mutation. */
export type ReviewStatusHistoryReviewIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
};

/** Represents an update to a `ReviewStatusHistory`. Fields that are set will be updated. */
export type ReviewStatusHistoryPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  reviewToReviewId?: Maybe<ReviewStatusHistoryReviewIdFkeyInput>;
};

/** The `reviewStatusHistory` to be created by this mutation. */
export type ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  reviewToReviewId?: Maybe<ReviewStatusHistoryReviewIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type ReviewResponseReviewIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateElement` in the `ReviewResponseInput` mutation. */
export type ReviewResponseTemplateElementIdFkeyInput = {
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: Maybe<TemplateElementTemplateElementPkeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: Maybe<TemplateElementNodeIdConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: Maybe<TemplateElementTemplateElementPkeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: Maybe<TemplateElementNodeIdDelete>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: Maybe<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: Maybe<ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: Maybe<ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput>;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** Input for the nested mutation of `reviewResponse` in the `TemplateElementInput` mutation. */
export type ReviewResponseTemplateElementIdFkeyInverseInput = {
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: Maybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ReviewResponseNodeIdConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: Maybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ReviewResponseNodeIdDelete>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: Maybe<Array<ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput>>;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate = {
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** Represents an update to a `ReviewResponse`. Fields that are set will be updated. */
export type ReviewResponsePatch = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** Represents an update to a `TemplateElement`. Fields that are set will be updated. */
export type TemplateElementPatch = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** The `templateElement` to be created by this mutation. */
export type ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** Represents an update to a `ApplicationResponse`. Fields that are set will be updated. */
export type ApplicationResponsePatch = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** The `applicationResponse` to be created by this mutation. */
export type FileApplicationResponseIdFkeyApplicationResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationNote` in the `FileInput` mutation. */
export type FileApplicationNoteIdFkeyInput = {
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: Maybe<ApplicationNoteApplicationNotePkeyConnect>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationNoteNodeIdConnect>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationNoteApplicationNotePkeyDelete>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationNoteNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: Maybe<ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: Maybe<FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: Maybe<FileApplicationNoteIdFkeyApplicationNoteCreateInput>;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment?: Maybe<Scalars['String']>;
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** Input for the nested mutation of `file` in the `ApplicationNoteInput` mutation. */
export type FileApplicationNoteIdFkeyInverseInput = {
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: Maybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: Maybe<Array<FileFileUniqueIdKeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: Maybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: Maybe<Array<FileFileUniqueIdKeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: Maybe<Array<FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: Maybe<Array<FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: Maybe<Array<FileApplicationNoteIdFkeyFileCreateInput>>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationNoteIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** Represents an update to a `File`. Fields that are set will be updated. */
export type FilePatch = {
  id?: Maybe<Scalars['Int']>;
  uniqueId?: Maybe<Scalars['String']>;
  originalFilename?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath?: Maybe<Scalars['String']>;
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The `file` to be created by this mutation. */
export type FileApplicationNoteIdFkeyFileCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** Represents an update to a `ApplicationNote`. Fields that are set will be updated. */
export type ApplicationNotePatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment?: Maybe<Scalars['String']>;
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The `applicationNote` to be created by this mutation. */
export type FileApplicationNoteIdFkeyApplicationNoteCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The `file` to be created by this mutation. */
export type FileApplicationResponseIdFkeyFileCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The `applicationResponse` to be created by this mutation. */
export type ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseReviewIdFkeyReviewResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type NotificationReviewIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: NotificationPatch;
};

/** Represents an update to a `Notification`. Fields that are set will be updated. */
export type NotificationPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** The `notification` to be created by this mutation. */
export type NotificationReviewIdFkeyNotificationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type ReviewDecisionReviewIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewDecision` being updated. */
  patch: ReviewDecisionPatch;
};

/** Represents an update to a `ReviewDecision`. Fields that are set will be updated. */
export type ReviewDecisionPatch = {
  id?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  decision?: Maybe<Decision>;
  comment?: Maybe<Scalars['String']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  reviewToReviewId?: Maybe<ReviewDecisionReviewIdFkeyInput>;
};

/** The `reviewDecision` to be created by this mutation. */
export type ReviewDecisionReviewIdFkeyReviewDecisionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  decision?: Maybe<Decision>;
  comment?: Maybe<Scalars['String']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  reviewToReviewId?: Maybe<ReviewDecisionReviewIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type ReviewReviewAssignmentIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** Represents an update to a `TemplateStageReviewLevel`. Fields that are set will be updated. */
export type TemplateStageReviewLevelPatch = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** The `templateStageReviewLevel` to be created by this mutation. */
export type TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput = {
  id?: Maybe<Scalars['Int']>;
  number: Scalars['Int'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** Represents an update to a `TemplateStage`. Fields that are set will be updated. */
export type TemplateStagePatch = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** The `templateStage` to be created by this mutation. */
export type TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** The `templateStageReviewLevel` to be created by this mutation. */
export type ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  number: Scalars['Int'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentReviewerIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleEditorUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type TriggerScheduleEditorUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The `triggerSchedule` to be created by this mutation. */
export type TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled: Scalars['Datetime'];
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type TriggerScheduleApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The `triggerSchedule` to be created by this mutation. */
export type TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled: Scalars['Datetime'];
  applicationId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type ReviewAssignmentTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ProductApplicationJoinOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ProductApplicationJoinApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnProductApplicationJoinForProductApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `productApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `productApplicationJoin` being updated. */
  patch: ProductApplicationJoinPatch;
};

/** Represents an update to a `ProductApplicationJoin`. Fields that are set will be updated. */
export type ProductApplicationJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  productId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<ProductApplicationJoinApplicationIdFkeyInput>;
};

/** The `productApplicationJoin` to be created by this mutation. */
export type ProductApplicationJoinApplicationIdFkeyProductApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  productId: Scalars['Int'];
  applicationToApplicationId?: Maybe<ProductApplicationJoinApplicationIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ReviewAssignmentApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The `templateStage` to be created by this mutation. */
export type ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** Input for the nested mutation of `applicationStatusHistory` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput = {
  /** Flag indicating whether all other `applicationStatusHistory` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  connectById?: Maybe<Array<ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<ApplicationStatusHistoryNodeIdConnect>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  deleteById?: Maybe<Array<ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<ApplicationStatusHistoryNodeIdDelete>>;
  /** The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship. */
  updateById?: Maybe<Array<ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate>>;
  /** A `ApplicationStatusHistoryInput` object that will be created and connected to this object. */
  create?: Maybe<Array<ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput>>;
};

/** The fields on `applicationStatusHistory` to look up the row to connect. */
export type ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationStatusHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationStatusHistory` to look up the row to delete. */
export type ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationStatusHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `applicationStatusHistory` to look up the row to update. */
export type ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
  patch: UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
export type UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationStageHistoryToApplicationStageHistoryId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `ApplicationStatusHistoryInput` mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput = {
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: Maybe<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: Maybe<ApplicationStageHistoryNodeIdConnect>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: Maybe<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: Maybe<ApplicationStageHistoryNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: Maybe<ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: Maybe<ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput>;
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** Represents an update to a `ApplicationStageHistory`. Fields that are set will be updated. */
export type ApplicationStageHistoryPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
};

/** Represents an update to a `ApplicationStatusHistory`. Fields that are set will be updated. */
export type ApplicationStatusHistoryPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationStageHistoryId?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationStageHistoryToApplicationStageHistoryId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
};

/** The `applicationStatusHistory` to be created by this mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationStageHistoryToApplicationStageHistoryId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The `templateStage` to be created by this mutation. */
export type ReviewAssignmentStageIdFkeyTemplateStageCreateInput = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type OrganisationApplicationJoinOrganisationIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
  patch: OrganisationApplicationJoinPatch;
};

/** Represents an update to a `OrganisationApplicationJoin`. Fields that are set will be updated. */
export type OrganisationApplicationJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** The `organisationApplicationJoin` to be created by this mutation. */
export type OrganisationApplicationJoinApplicationIdFkeyOrganisationApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type NotificationApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: NotificationPatch;
};

/** The `notification` to be created by this mutation. */
export type NotificationApplicationIdFkeyNotificationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationSerialFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type FileApplicationSerialFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The `file` to be created by this mutation. */
export type FileApplicationSerialFkeyFileCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type DataTableProductApplicationJoinApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `dataTableProduct` in the `DataTableProductApplicationJoinInput` mutation. */
export type DataTableProductApplicationJoinDataTableProductIdFkeyInput = {
  /** The primary key(s) for `dataTableProduct` for the far side of the relationship. */
  connectById?: Maybe<DataTableProductDataTableProductPkeyConnect>;
  /** The primary key(s) for `dataTableProduct` for the far side of the relationship. */
  connectByNodeId?: Maybe<DataTableProductNodeIdConnect>;
  /** The primary key(s) for `dataTableProduct` for the far side of the relationship. */
  deleteById?: Maybe<DataTableProductDataTableProductPkeyDelete>;
  /** The primary key(s) for `dataTableProduct` for the far side of the relationship. */
  deleteByNodeId?: Maybe<DataTableProductNodeIdDelete>;
  /** The primary key(s) and patch data for `dataTableProduct` for the far side of the relationship. */
  updateById?: Maybe<DataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyUsingDataTableProductPkeyUpdate>;
  /** The primary key(s) and patch data for `dataTableProduct` for the far side of the relationship. */
  updateByNodeId?: Maybe<DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyNodeIdUpdate>;
  /** A `DataTableProductInput` object that will be created and connected to this object. */
  create?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyDataTableProductCreateInput>;
};

/** The fields on `dataTableProduct` to look up the row to connect. */
export type DataTableProductDataTableProductPkeyConnect = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to connect. */
export type DataTableProductNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `dataTableProduct` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `dataTableProduct` to look up the row to delete. */
export type DataTableProductDataTableProductPkeyDelete = {
  id: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to delete. */
export type DataTableProductNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `dataTableProduct` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `dataTableProduct` to look up the row to update. */
export type DataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyUsingDataTableProductPkeyUpdate = {
  /** An object where the defined keys will be set on the `dataTableProduct` being updated. */
  patch: UpdateDataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `dataTableProduct` being updated. */
export type UpdateDataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  origin?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  registration?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  responsiblePerson?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  atcClass?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['Int']>;
  dimensions?: Maybe<Scalars['JSON']>;
  dosageForm?: Maybe<Scalars['String']>;
  applicantId?: Maybe<Scalars['Int']>;
  companyName?: Maybe<Scalars['String']>;
  formulations?: Maybe<Scalars['JSON']>;
  prescription?: Maybe<Scalars['String']>;
  genericNames?: Maybe<Scalars['JSON']>;
  medicineType?: Maybe<Scalars['String']>;
  applicationType?: Maybe<Scalars['String']>;
  primaryContainer?: Maybe<Scalars['String']>;
  shelfLifeOpened?: Maybe<Scalars['String']>;
  manufacturersList?: Maybe<Scalars['JSON']>;
  shelfLifeProposed?: Maybe<Scalars['String']>;
  administrationRoute?: Maybe<Scalars['String']>;
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  storageConditionsOpened?: Maybe<Scalars['String']>;
  storageConditionsProposed?: Maybe<Scalars['String']>;
  genericNamesFilterData?: Maybe<Scalars['String']>;
  manufacturersListFilterData?: Maybe<Scalars['String']>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInverseInput>;
};

/** Input for the nested mutation of `dataTableProductApplicationJoin` in the `DataTableProductInput` mutation. */
export type DataTableProductApplicationJoinDataTableProductIdFkeyInverseInput = {
  /** Flag indicating whether all other `dataTableProductApplicationJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyConnect>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<DataTableProductApplicationJoinNodeIdConnect>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<DataTableProductApplicationJoinDataTableProductApplicationJoinPkeyDelete>>;
  /** The primary key(s) for `dataTableProductApplicationJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<DataTableProductApplicationJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `dataTableProductApplicationJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyUsingDataTableProductApplicationJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `dataTableProductApplicationJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<DataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyNodeIdUpdate>>;
  /** A `DataTableProductApplicationJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<DataTableProductApplicationJoinDataTableProductIdFkeyDataTableProductApplicationJoinCreateInput>>;
};

/** The fields on `dataTableProductApplicationJoin` to look up the row to update. */
export type DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyUsingDataTableProductApplicationJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
  patch: UpdateDataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
export type UpdateDataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type DataTableProductOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `dataTableProductApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
  patch: DataTableProductApplicationJoinPatch;
};

/** Represents an update to a `DataTableProductApplicationJoin`. Fields that are set will be updated. */
export type DataTableProductApplicationJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  dataTableProductId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** The `dataTableProductApplicationJoin` to be created by this mutation. */
export type DataTableProductApplicationJoinDataTableProductIdFkeyDataTableProductApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type DataTableProductApplicationJoinOnDataTableProductApplicationJoinForDataTableProductApplicationJoinDataTableProductIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `dataTableProduct` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `dataTableProduct` being updated. */
  patch: DataTableProductPatch;
};

/** Represents an update to a `DataTableProduct`. Fields that are set will be updated. */
export type DataTableProductPatch = {
  id?: Maybe<Scalars['Int']>;
  origin?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  registration?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  responsiblePerson?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  atcClass?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['Int']>;
  dimensions?: Maybe<Scalars['JSON']>;
  dosageForm?: Maybe<Scalars['String']>;
  applicantId?: Maybe<Scalars['Int']>;
  companyName?: Maybe<Scalars['String']>;
  formulations?: Maybe<Scalars['JSON']>;
  prescription?: Maybe<Scalars['String']>;
  genericNames?: Maybe<Scalars['JSON']>;
  medicineType?: Maybe<Scalars['String']>;
  applicationType?: Maybe<Scalars['String']>;
  primaryContainer?: Maybe<Scalars['String']>;
  shelfLifeOpened?: Maybe<Scalars['String']>;
  manufacturersList?: Maybe<Scalars['JSON']>;
  shelfLifeProposed?: Maybe<Scalars['String']>;
  administrationRoute?: Maybe<Scalars['String']>;
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  storageConditionsOpened?: Maybe<Scalars['String']>;
  storageConditionsProposed?: Maybe<Scalars['String']>;
  genericNamesFilterData?: Maybe<Scalars['String']>;
  manufacturersListFilterData?: Maybe<Scalars['String']>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInverseInput>;
};

/** The `dataTableProduct` to be created by this mutation. */
export type DataTableProductApplicationJoinDataTableProductIdFkeyDataTableProductCreateInput = {
  id?: Maybe<Scalars['Int']>;
  origin?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  registration?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  responsiblePerson?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  atcClass?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['Int']>;
  dimensions?: Maybe<Scalars['JSON']>;
  dosageForm?: Maybe<Scalars['String']>;
  applicantId?: Maybe<Scalars['Int']>;
  companyName?: Maybe<Scalars['String']>;
  formulations?: Maybe<Scalars['JSON']>;
  prescription?: Maybe<Scalars['String']>;
  genericNames?: Maybe<Scalars['JSON']>;
  medicineType?: Maybe<Scalars['String']>;
  applicationType?: Maybe<Scalars['String']>;
  primaryContainer?: Maybe<Scalars['String']>;
  shelfLifeOpened?: Maybe<Scalars['String']>;
  manufacturersList?: Maybe<Scalars['JSON']>;
  shelfLifeProposed?: Maybe<Scalars['String']>;
  administrationRoute?: Maybe<Scalars['String']>;
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  storageConditionsOpened?: Maybe<Scalars['String']>;
  storageConditionsProposed?: Maybe<Scalars['String']>;
  genericNamesFilterData?: Maybe<Scalars['String']>;
  manufacturersListFilterData?: Maybe<Scalars['String']>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnDataTableProductApplicationJoinForDataTableProductApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `dataTableProductApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `dataTableProductApplicationJoin` being updated. */
  patch: DataTableProductApplicationJoinPatch;
};

/** The `dataTableProductApplicationJoin` to be created by this mutation. */
export type DataTableProductApplicationJoinApplicationIdFkeyDataTableProductApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  dataTableProductId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationResponseApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The `applicationResponse` to be created by this mutation. */
export type ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The `templateElement` to be created by this mutation. */
export type TemplateElementSectionIdFkeyTemplateElementCreateInput = {
  id?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate = {
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** Represents an update to a `TemplateSection`. Fields that are set will be updated. */
export type TemplateSectionPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** The `templateSection` to be created by this mutation. */
export type TemplateSectionTemplateIdFkeyTemplateSectionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplateFilterJoinTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** Input for the nested mutation of `filter` in the `TemplateFilterJoinInput` mutation. */
export type TemplateFilterJoinFilterIdFkeyInput = {
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectById?: Maybe<FilterFilterPkeyConnect>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectByCode?: Maybe<FilterFilterCodeKeyConnect>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectByNodeId?: Maybe<FilterNodeIdConnect>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteById?: Maybe<FilterFilterPkeyDelete>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteByCode?: Maybe<FilterFilterCodeKeyDelete>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteByNodeId?: Maybe<FilterNodeIdDelete>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateById?: Maybe<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateByCode?: Maybe<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateByNodeId?: Maybe<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate>;
  /** A `FilterInput` object that will be created and connected to this object. */
  create?: Maybe<TemplateFilterJoinFilterIdFkeyFilterCreateInput>;
};

/** The fields on `filter` to look up the row to connect. */
export type FilterFilterPkeyConnect = {
  id: Scalars['Int'];
};

/** The fields on `filter` to look up the row to connect. */
export type FilterFilterCodeKeyConnect = {
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to connect. */
export type FilterNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `filter` to be connected. */
  nodeId: Scalars['ID'];
};

/** The fields on `filter` to look up the row to delete. */
export type FilterFilterPkeyDelete = {
  id: Scalars['Int'];
};

/** The fields on `filter` to look up the row to delete. */
export type FilterFilterCodeKeyDelete = {
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to delete. */
export type FilterNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `filter` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The fields on `filter` to look up the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate = {
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `filter` being updated. */
export type UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['JSON']>;
  userRole?: Maybe<PermissionPolicyType>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
};

/** Input for the nested mutation of `templateFilterJoin` in the `FilterInput` mutation. */
export type TemplateFilterJoinFilterIdFkeyInverseInput = {
  /** Flag indicating whether all other `templateFilterJoin` records that match this relationship should be removed. */
  deleteOthers?: Maybe<Scalars['Boolean']>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectById?: Maybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectByNodeId?: Maybe<Array<TemplateFilterJoinNodeIdConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteById?: Maybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyDelete>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteByNodeId?: Maybe<Array<TemplateFilterJoinNodeIdDelete>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateById?: Maybe<Array<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateByNodeId?: Maybe<Array<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate>>;
  /** A `TemplateFilterJoinInput` object that will be created and connected to this object. */
  create?: Maybe<Array<TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput>>;
};

/** The fields on `templateFilterJoin` to look up the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate = {
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  id: Scalars['Int'];
};

/** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
export type UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** Represents an update to a `TemplateFilterJoin`. Fields that are set will be updated. */
export type TemplateFilterJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  filterId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** The `templateFilterJoin` to be created by this mutation. */
export type TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** The fields on `filter` to look up the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate = {
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `filter` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: FilterPatch;
};

/** Represents an update to a `Filter`. Fields that are set will be updated. */
export type FilterPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['JSON']>;
  userRole?: Maybe<PermissionPolicyType>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
};

/** The `filter` to be created by this mutation. */
export type TemplateFilterJoinFilterIdFkeyFilterCreateInput = {
  id?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['JSON']>;
  userRole?: Maybe<PermissionPolicyType>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** The `templateFilterJoin` to be created by this mutation. */
export type TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  filterId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplatePermissionTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** Represents an update to a `TemplatePermission`. Fields that are set will be updated. */
export type TemplatePermissionPatch = {
  id?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The `templatePermission` to be created by this mutation. */
export type TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** Represents an update to a `PermissionName`. Fields that are set will be updated. */
export type PermissionNamePatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The `permissionName` to be created by this mutation. */
export type PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** Represents an update to a `PermissionJoin`. Fields that are set will be updated. */
export type PermissionJoinPatch = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** The `permissionJoin` to be created by this mutation. */
export type PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentAssignerIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentForReviewAssignmentReviewerIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentReviewerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ReviewAssignmentReviewerIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplateSectionTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate = {
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** The `templateSection` to be created by this mutation. */
export type TemplateElementSectionIdFkeyTemplateSectionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The `templateElement` to be created by this mutation. */
export type ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The `applicationResponse` to be created by this mutation. */
export type ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationApplicationJoinOnOrganisationApplicationJoinForOrganisationApplicationJoinApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type OrganisationApplicationJoinApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnOrganisationApplicationJoinForOrganisationApplicationJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisationApplicationJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisationApplicationJoin` being updated. */
  patch: OrganisationApplicationJoinPatch;
};

/** The `organisationApplicationJoin` to be created by this mutation. */
export type OrganisationApplicationJoinOrganisationIdFkeyOrganisationApplicationJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type ApplicationNoteOrgIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The `applicationNote` to be created by this mutation. */
export type ApplicationNoteOrgIdFkeyApplicationNoteCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type PermissionJoinOrganisationIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The `permissionJoin` to be created by this mutation. */
export type PermissionJoinUserIdFkeyPermissionJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnNotificationForNotificationUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnNotificationForNotificationUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type NotificationOnNotificationForNotificationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type NotificationUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnNotificationForNotificationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: NotificationPatch;
};

/** The `notification` to be created by this mutation. */
export type NotificationUserIdFkeyNotificationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnPermissionJoinForPermissionJoinUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type PermissionJoinUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The `permissionJoin` to be created by this mutation. */
export type PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The `permissionName` to be created by this mutation. */
export type PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The fields on `permissionPolicy` to look up the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate = {
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** Represents an update to a `PermissionPolicy`. Fields that are set will be updated. */
export type PermissionPolicyPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
  type?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  defaultRestrictions?: Maybe<Scalars['JSON']>;
  permissionNamesUsingId?: Maybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
};

/** The `permissionPolicy` to be created by this mutation. */
export type PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
  type?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  defaultRestrictions?: Maybe<Scalars['JSON']>;
  permissionNamesUsingId?: Maybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate = {
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  name: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The `permissionName` to be created by this mutation. */
export type TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** The `templatePermission` to be created by this mutation. */
export type TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type FileTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileUserIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileUserIdFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnFileForFileUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The `file` to be created by this mutation. */
export type FileUserIdFkeyFileCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnApplicationNoteForApplicationNoteUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnApplicationNoteForApplicationNoteUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ApplicationNoteUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The `applicationNote` to be created by this mutation. */
export type ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ActivityLogApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `activityLog` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `activityLog` being updated. */
  patch: ActivityLogPatch;
};

/** Represents an update to a `ActivityLog`. Fields that are set will be updated. */
export type ActivityLogPatch = {
  id?: Maybe<Scalars['Int']>;
  type?: Maybe<EventType>;
  value?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  applicationId?: Maybe<Scalars['Int']>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['JSON']>;
  applicationToApplicationId?: Maybe<ActivityLogApplicationIdFkeyInput>;
};

/** The `activityLog` to be created by this mutation. */
export type ActivityLogApplicationIdFkeyActivityLogCreateInput = {
  id?: Maybe<Scalars['Int']>;
  type: EventType;
  value: Scalars['String'];
  timestamp?: Maybe<Scalars['Datetime']>;
  table: Scalars['String'];
  recordId?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['JSON']>;
  applicationToApplicationId?: Maybe<ActivityLogApplicationIdFkeyInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ReviewApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type ReviewApplicationIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationOrgIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  name: Scalars['String'];
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  registration: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The `organisation` to be created by this mutation. */
export type ApplicationOrgIdFkeyOrganisationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationNoteApplicationIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnApplicationNoteForApplicationNoteUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The `applicationNote` to be created by this mutation. */
export type ApplicationNoteUserIdFkeyApplicationNoteCreateInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnReviewAssignmentForReviewAssignmentAssignerIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentAssignerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ReviewAssignmentAssignerIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnReviewForReviewReviewerIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The `review` to be created by this mutation. */
export type ReviewReviewerIdFkeyReviewCreateInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnApplicationForApplicationUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnApplicationForApplicationUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationForApplicationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type ApplicationUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationUserIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOnApplicationForApplicationUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationUserIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The fields on `user` to look up the row to update. */
export type UserOnFileForFileUserIdFkeyUsingUserUsernameKeyUpdate = {
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UpdateUserOnFileForFileUserIdFkeyPatch;
  username: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileUserIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `user` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `user` being updated. */
  patch: UserPatch;
};

/** The `user` to be created by this mutation. */
export type FileUserIdFkeyUserCreateInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
  uniqueId: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The `file` to be created by this mutation. */
export type FileTemplateIdFkeyFileCreateInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplateStageTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The `templateStage` to be created by this mutation. */
export type TemplateStageTemplateIdFkeyTemplateStageCreateInput = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplateActionTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateAction` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateAction` being updated. */
  patch: TemplateActionPatch;
};

/** Represents an update to a `TemplateAction`. Fields that are set will be updated. */
export type TemplateActionPatch = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  actionCode?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  trigger?: Maybe<Trigger>;
  condition?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  description?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateActionTemplateIdFkeyInput>;
};

/** The `templateAction` to be created by this mutation. */
export type TemplateActionTemplateIdFkeyTemplateActionCreateInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  actionCode?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  trigger?: Maybe<Trigger>;
  condition?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  description?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateActionTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type ApplicationTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
  serial: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The `application` to be created by this mutation. */
export type ApplicationTemplateIdFkeyApplicationCreateInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type TemplateTemplateCategoryIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The fields on `templateCategory` to look up the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate = {
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  code: Scalars['String'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** Represents an update to a `TemplateCategory`. Fields that are set will be updated. */
export type TemplateCategoryPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
  templatesUsingId?: Maybe<TemplateTemplateCategoryIdFkeyInverseInput>;
};

/** The `templateCategory` to be created by this mutation. */
export type TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput = {
  id?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
  templatesUsingId?: Maybe<TemplateTemplateCategoryIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The `template` to be created by this mutation. */
export type ActionQueueTemplateIdFkeyTemplateCreateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The `actionQueue` to be created by this mutation. */
export type ActionQueueTriggerEventFkeyActionQueueCreateInput = {
  id?: Maybe<Scalars['Int']>;
  triggerPayload?: Maybe<Scalars['JSON']>;
  templateId?: Maybe<Scalars['Int']>;
  sequence?: Maybe<Scalars['Int']>;
  actionCode?: Maybe<Scalars['String']>;
  conditionExpression?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  parametersEvaluated?: Maybe<Scalars['JSON']>;
  status?: Maybe<ActionQueueStatus>;
  output?: Maybe<Scalars['JSON']>;
  timeQueued?: Maybe<Scalars['Datetime']>;
  timeCompleted?: Maybe<Scalars['Datetime']>;
  errorLog?: Maybe<Scalars['String']>;
  triggerQueueToTriggerEvent?: Maybe<ActionQueueTriggerEventFkeyInput>;
  templateToTemplateId?: Maybe<ActionQueueTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to update. */
export type ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be connected. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** Represents an update to a `TriggerQueue`. Fields that are set will be updated. */
export type TriggerQueuePatch = {
  id?: Maybe<Scalars['Int']>;
  triggerType?: Maybe<Trigger>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  status?: Maybe<TriggerQueueStatus>;
  log?: Maybe<Scalars['JSON']>;
  actionQueuesUsingId?: Maybe<ActionQueueTriggerEventFkeyInverseInput>;
};

/** The `triggerQueue` to be created by this mutation. */
export type ActionQueueTriggerEventFkeyTriggerQueueCreateInput = {
  id?: Maybe<Scalars['Int']>;
  triggerType?: Maybe<Trigger>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  status?: Maybe<TriggerQueueStatus>;
  log?: Maybe<Scalars['JSON']>;
  actionQueuesUsingId?: Maybe<ActionQueueTriggerEventFkeyInverseInput>;
};

/** The output of our create `ActionQueue` mutation. */
export type CreateActionQueuePayload = {
  __typename?: 'CreateActionQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionQueue` that was created by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
};


/** The output of our create `ActionQueue` mutation. */
export type CreateActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the create `ActivityLog` mutation. */
export type CreateActivityLogInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActivityLog` to be created by this mutation. */
  activityLog: ActivityLogInput;
};

/** An input for mutations affecting `ActivityLog` */
export type ActivityLogInput = {
  id?: Maybe<Scalars['Int']>;
  type: EventType;
  value: Scalars['String'];
  timestamp?: Maybe<Scalars['Datetime']>;
  applicationId?: Maybe<Scalars['Int']>;
  table: Scalars['String'];
  recordId?: Maybe<Scalars['Int']>;
  details?: Maybe<Scalars['JSON']>;
  applicationToApplicationId?: Maybe<ActivityLogApplicationIdFkeyInput>;
};

/** The output of our create `ActivityLog` mutation. */
export type CreateActivityLogPayload = {
  __typename?: 'CreateActivityLogPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActivityLog` that was created by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
};


/** The output of our create `ActivityLog` mutation. */
export type CreateActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: Maybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the create `Application` mutation. */
export type CreateApplicationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Application` to be created by this mutation. */
  application: ApplicationInput;
};

/** An input for mutations affecting `Application` */
export type ApplicationInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  outcome?: Maybe<ApplicationOutcome>;
  isActive?: Maybe<Scalars['Boolean']>;
  isConfig?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  templateToTemplateId?: Maybe<ApplicationTemplateIdFkeyInput>;
  userToUserId?: Maybe<ApplicationUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationOrgIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: Maybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInverseInput>;
  filesUsingSerial?: Maybe<FileApplicationSerialFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationApplicationIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  productApplicationJoinsUsingId?: Maybe<ProductApplicationJoinApplicationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinApplicationIdFkeyInverseInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInverseInput>;
  verificationsUsingId?: Maybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The output of our create `Application` mutation. */
export type CreateApplicationPayload = {
  __typename?: 'CreateApplicationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Application` that was created by this mutation. */
  application?: Maybe<Application>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `Application`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
};


/** The output of our create `Application` mutation. */
export type CreateApplicationPayloadApplicationEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
};

/** All input for the create `ApplicationListShape` mutation. */
export type CreateApplicationListShapeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationListShape` to be created by this mutation. */
  applicationListShape: ApplicationListShapeInput;
};

/** An input for mutations affecting `ApplicationListShape` */
export type ApplicationListShapeInput = {
  id?: Maybe<Scalars['Int']>;
  serial?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  templateCode?: Maybe<Scalars['String']>;
  templateName?: Maybe<Scalars['String']>;
  applicant?: Maybe<Scalars['String']>;
  orgName?: Maybe<Scalars['String']>;
  stage?: Maybe<Scalars['String']>;
  stageColour?: Maybe<Scalars['String']>;
  status?: Maybe<ApplicationStatus>;
  outcome?: Maybe<ApplicationOutcome>;
  lastActiveDate?: Maybe<Scalars['Datetime']>;
  applicantDeadline?: Maybe<Scalars['Datetime']>;
  assigners?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']>>>;
  reviewerAction?: Maybe<ReviewerAction>;
  assignerAction?: Maybe<AssignerAction>;
};

/** The output of our create `ApplicationListShape` mutation. */
export type CreateApplicationListShapePayload = {
  __typename?: 'CreateApplicationListShapePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationListShape` that was created by this mutation. */
  applicationListShape?: Maybe<ApplicationListShape>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ApplicationListShape`. May be used by Relay 1. */
  applicationListShapeEdge?: Maybe<ApplicationListShapesEdge>;
};


/** The output of our create `ApplicationListShape` mutation. */
export type CreateApplicationListShapePayloadApplicationListShapeEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationListShapesOrderBy>>;
};

/** All input for the create `ApplicationNote` mutation. */
export type CreateApplicationNoteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationNote` to be created by this mutation. */
  applicationNote: ApplicationNoteInput;
};

/** An input for mutations affecting `ApplicationNote` */
export type ApplicationNoteInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  comment: Scalars['String'];
  applicationToApplicationId?: Maybe<ApplicationNoteApplicationIdFkeyInput>;
  userToUserId?: Maybe<ApplicationNoteUserIdFkeyInput>;
  organisationToOrgId?: Maybe<ApplicationNoteOrgIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationNoteIdFkeyInverseInput>;
};

/** The output of our create `ApplicationNote` mutation. */
export type CreateApplicationNotePayload = {
  __typename?: 'CreateApplicationNotePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationNote` that was created by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `ApplicationNote`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
};


/** The output of our create `ApplicationNote` mutation. */
export type CreateApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
};

/** All input for the create `ApplicationResponse` mutation. */
export type CreateApplicationResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationResponse` to be created by this mutation. */
  applicationResponse: ApplicationResponseInput;
};

/** An input for mutations affecting `ApplicationResponse` */
export type ApplicationResponseInput = {
  id?: Maybe<Scalars['Int']>;
  templateElementId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationResponseStatus>;
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
  templateElementToTemplateElementId?: Maybe<ApplicationResponseTemplateElementIdFkeyInput>;
  applicationToApplicationId?: Maybe<ApplicationResponseApplicationIdFkeyInput>;
  filesUsingId?: Maybe<FileApplicationResponseIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
};

/** The output of our create `ApplicationResponse` mutation. */
export type CreateApplicationResponsePayload = {
  __typename?: 'CreateApplicationResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationResponse` that was created by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
};


/** The output of our create `ApplicationResponse` mutation. */
export type CreateApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStageHistory` to be created by this mutation. */
  applicationStageHistory: ApplicationStageHistoryInput;
};

/** An input for mutations affecting `ApplicationStageHistory` */
export type ApplicationStageHistoryInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationToApplicationId?: Maybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  templateStageToStageId?: Maybe<ApplicationStageHistoryStageIdFkeyInput>;
  applicationStatusHistoriesUsingId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
};

/** The output of our create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryPayload = {
  __typename?: 'CreateApplicationStageHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStageHistory` that was created by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
};


/** The output of our create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStatusHistory` to be created by this mutation. */
  applicationStatusHistory: ApplicationStatusHistoryInput;
};

/** An input for mutations affecting `ApplicationStatusHistory` */
export type ApplicationStatusHistoryInput = {
  id?: Maybe<Scalars['Int']>;
  applicationStageHistoryId?: Maybe<Scalars['Int']>;
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  applicationId?: Maybe<Scalars['Int']>;
  applicationStageHistoryToApplicationStageHistoryId?: Maybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
};

/** The output of our create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryPayload = {
  __typename?: 'CreateApplicationStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStatusHistory` that was created by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
};


/** The output of our create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the create `Counter` mutation. */
export type CreateCounterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Counter` to be created by this mutation. */
  counter: CounterInput;
};

/** An input for mutations affecting `Counter` */
export type CounterInput = {
  id?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  value?: Maybe<Scalars['Int']>;
};

/** The output of our create `Counter` mutation. */
export type CreateCounterPayload = {
  __typename?: 'CreateCounterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Counter` that was created by this mutation. */
  counter?: Maybe<Counter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
};


/** The output of our create `Counter` mutation. */
export type CreateCounterPayloadCounterEdgeArgs = {
  orderBy?: Maybe<Array<CountersOrderBy>>;
};

/** All input for the create `DataTable` mutation. */
export type CreateDataTableInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTable` to be created by this mutation. */
  dataTable: DataTableInput;
};

/** An input for mutations affecting `DataTable` */
export type DataTableInput = {
  id?: Maybe<Scalars['Int']>;
  tableName: Scalars['String'];
  displayName?: Maybe<Scalars['String']>;
  fieldMap?: Maybe<Scalars['JSON']>;
  isLookupTable?: Maybe<Scalars['Boolean']>;
  dataViewCode?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTable` mutation. */
export type CreateDataTablePayload = {
  __typename?: 'CreateDataTablePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTable` that was created by this mutation. */
  dataTable?: Maybe<DataTable>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
};


/** The output of our create `DataTable` mutation. */
export type CreateDataTablePayloadDataTableEdgeArgs = {
  orderBy?: Maybe<Array<DataTablesOrderBy>>;
};

/** All input for the create `DataTableManufacturingStep` mutation. */
export type CreateDataTableManufacturingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableManufacturingStep` to be created by this mutation. */
  dataTableManufacturingStep: DataTableManufacturingStepInput;
};

/** An input for mutations affecting `DataTableManufacturingStep` */
export type DataTableManufacturingStepInput = {
  id?: Maybe<Scalars['Int']>;
  tipoDeFabricante?: Maybe<Scalars['String']>;
  manufacturingOperation?: Maybe<Scalars['String']>;
  definition?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableManufacturingStep` mutation. */
export type CreateDataTableManufacturingStepPayload = {
  __typename?: 'CreateDataTableManufacturingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableManufacturingStep` that was created by this mutation. */
  dataTableManufacturingStep?: Maybe<DataTableManufacturingStep>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableManufacturingStep`. May be used by Relay 1. */
  dataTableManufacturingStepEdge?: Maybe<DataTableManufacturingStepsEdge>;
};


/** The output of our create `DataTableManufacturingStep` mutation. */
export type CreateDataTableManufacturingStepPayloadDataTableManufacturingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableManufacturingStepsOrderBy>>;
};

/** All input for the create `DataTableActiveIngredient` mutation. */
export type CreateDataTableActiveIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableActiveIngredient` to be created by this mutation. */
  dataTableActiveIngredient: DataTableActiveIngredientInput;
};

/** An input for mutations affecting `DataTableActiveIngredient` */
export type DataTableActiveIngredientInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  latina?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableActiveIngredient` mutation. */
export type CreateDataTableActiveIngredientPayload = {
  __typename?: 'CreateDataTableActiveIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableActiveIngredient` that was created by this mutation. */
  dataTableActiveIngredient?: Maybe<DataTableActiveIngredient>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableActiveIngredient`. May be used by Relay 1. */
  dataTableActiveIngredientEdge?: Maybe<DataTableActiveIngredientsEdge>;
};


/** The output of our create `DataTableActiveIngredient` mutation. */
export type CreateDataTableActiveIngredientPayloadDataTableActiveIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableActiveIngredientsOrderBy>>;
};

/** All input for the create `DataTableAdministrationRoute` mutation. */
export type CreateDataTableAdministrationRouteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAdministrationRoute` to be created by this mutation. */
  dataTableAdministrationRoute: DataTableAdministrationRouteInput;
};

/** An input for mutations affecting `DataTableAdministrationRoute` */
export type DataTableAdministrationRouteInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableAdministrationRoute` mutation. */
export type CreateDataTableAdministrationRoutePayload = {
  __typename?: 'CreateDataTableAdministrationRoutePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAdministrationRoute` that was created by this mutation. */
  dataTableAdministrationRoute?: Maybe<DataTableAdministrationRoute>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAdministrationRoute`. May be used by Relay 1. */
  dataTableAdministrationRouteEdge?: Maybe<DataTableAdministrationRoutesEdge>;
};


/** The output of our create `DataTableAdministrationRoute` mutation. */
export type CreateDataTableAdministrationRoutePayloadDataTableAdministrationRouteEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAdministrationRoutesOrderBy>>;
};

/** All input for the create `DataTableAnnex` mutation. */
export type CreateDataTableAnnexInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex` to be created by this mutation. */
  dataTableAnnex: DataTableAnnexInput;
};

/** An input for mutations affecting `DataTableAnnex` */
export type DataTableAnnexInput = {
  id?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableAnnex` mutation. */
export type CreateDataTableAnnexPayload = {
  __typename?: 'CreateDataTableAnnexPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex` that was created by this mutation. */
  dataTableAnnex?: Maybe<DataTableAnnex>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex`. May be used by Relay 1. */
  dataTableAnnexEdge?: Maybe<DataTableAnnexesEdge>;
};


/** The output of our create `DataTableAnnex` mutation. */
export type CreateDataTableAnnexPayloadDataTableAnnexEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnexesOrderBy>>;
};

/** All input for the create `DataTableAnnex2` mutation. */
export type CreateDataTableAnnex2Input = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex2` to be created by this mutation. */
  dataTableAnnex2: DataTableAnnex2Input;
};

/** An input for mutations affecting `DataTableAnnex2` */
export type DataTableAnnex2Input = {
  id?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableAnnex2` mutation. */
export type CreateDataTableAnnex2Payload = {
  __typename?: 'CreateDataTableAnnex2Payload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex2` that was created by this mutation. */
  dataTableAnnex2?: Maybe<DataTableAnnex2>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex2`. May be used by Relay 1. */
  dataTableAnnex2Edge?: Maybe<DataTableAnnex2sEdge>;
};


/** The output of our create `DataTableAnnex2` mutation. */
export type CreateDataTableAnnex2PayloadDataTableAnnex2EdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnex2sOrderBy>>;
};

/** All input for the create `DataTableAtcCode` mutation. */
export type CreateDataTableAtcCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcCode` to be created by this mutation. */
  dataTableAtcCode: DataTableAtcCodeInput;
};

/** An input for mutations affecting `DataTableAtcCode` */
export type DataTableAtcCodeInput = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableAtcCode` mutation. */
export type CreateDataTableAtcCodePayload = {
  __typename?: 'CreateDataTableAtcCodePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcCode` that was created by this mutation. */
  dataTableAtcCode?: Maybe<DataTableAtcCode>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcCode`. May be used by Relay 1. */
  dataTableAtcCodeEdge?: Maybe<DataTableAtcCodesEdge>;
};


/** The output of our create `DataTableAtcCode` mutation. */
export type CreateDataTableAtcCodePayloadDataTableAtcCodeEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcCodesOrderBy>>;
};

/** All input for the create `DataTableAtcTherapeuticCategory` mutation. */
export type CreateDataTableAtcTherapeuticCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcTherapeuticCategory` to be created by this mutation. */
  dataTableAtcTherapeuticCategory: DataTableAtcTherapeuticCategoryInput;
};

/** An input for mutations affecting `DataTableAtcTherapeuticCategory` */
export type DataTableAtcTherapeuticCategoryInput = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableAtcTherapeuticCategory` mutation. */
export type CreateDataTableAtcTherapeuticCategoryPayload = {
  __typename?: 'CreateDataTableAtcTherapeuticCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcTherapeuticCategory` that was created by this mutation. */
  dataTableAtcTherapeuticCategory?: Maybe<DataTableAtcTherapeuticCategory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcTherapeuticCategory`. May be used by Relay 1. */
  dataTableAtcTherapeuticCategoryEdge?: Maybe<DataTableAtcTherapeuticCategoriesEdge>;
};


/** The output of our create `DataTableAtcTherapeuticCategory` mutation. */
export type CreateDataTableAtcTherapeuticCategoryPayloadDataTableAtcTherapeuticCategoryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcTherapeuticCategoriesOrderBy>>;
};

/** All input for the create `DataTableContainer` mutation. */
export type CreateDataTableContainerInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableContainer` to be created by this mutation. */
  dataTableContainer: DataTableContainerInput;
};

/** An input for mutations affecting `DataTableContainer` */
export type DataTableContainerInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableContainer` mutation. */
export type CreateDataTableContainerPayload = {
  __typename?: 'CreateDataTableContainerPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableContainer` that was created by this mutation. */
  dataTableContainer?: Maybe<DataTableContainer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableContainer`. May be used by Relay 1. */
  dataTableContainerEdge?: Maybe<DataTableContainersEdge>;
};


/** The output of our create `DataTableContainer` mutation. */
export type CreateDataTableContainerPayloadDataTableContainerEdgeArgs = {
  orderBy?: Maybe<Array<DataTableContainersOrderBy>>;
};

/** All input for the create `DataTableCountry` mutation. */
export type CreateDataTableCountryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableCountry` to be created by this mutation. */
  dataTableCountry: DataTableCountryInput;
};

/** An input for mutations affecting `DataTableCountry` */
export type DataTableCountryInput = {
  id?: Maybe<Scalars['Int']>;
  nameCommon?: Maybe<Scalars['String']>;
  nameOfficial?: Maybe<Scalars['String']>;
  translationsPorOfficial?: Maybe<Scalars['String']>;
  translationsPorCommon?: Maybe<Scalars['String']>;
  translationCommonNoAccent?: Maybe<Scalars['String']>;
  flag?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableCountry` mutation. */
export type CreateDataTableCountryPayload = {
  __typename?: 'CreateDataTableCountryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableCountry` that was created by this mutation. */
  dataTableCountry?: Maybe<DataTableCountry>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableCountry`. May be used by Relay 1. */
  dataTableCountryEdge?: Maybe<DataTableCountriesEdge>;
};


/** The output of our create `DataTableCountry` mutation. */
export type CreateDataTableCountryPayloadDataTableCountryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableCountriesOrderBy>>;
};

/** All input for the create `DataTableDosageForm` mutation. */
export type CreateDataTableDosageFormInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableDosageForm` to be created by this mutation. */
  dataTableDosageForm: DataTableDosageFormInput;
};

/** An input for mutations affecting `DataTableDosageForm` */
export type DataTableDosageFormInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableDosageForm` mutation. */
export type CreateDataTableDosageFormPayload = {
  __typename?: 'CreateDataTableDosageFormPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableDosageForm` that was created by this mutation. */
  dataTableDosageForm?: Maybe<DataTableDosageForm>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableDosageForm`. May be used by Relay 1. */
  dataTableDosageFormEdge?: Maybe<DataTableDosageFormsEdge>;
};


/** The output of our create `DataTableDosageForm` mutation. */
export type CreateDataTableDosageFormPayloadDataTableDosageFormEdgeArgs = {
  orderBy?: Maybe<Array<DataTableDosageFormsOrderBy>>;
};

/** All input for the create `DataTableGenericIngredient` mutation. */
export type CreateDataTableGenericIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableGenericIngredient` to be created by this mutation. */
  dataTableGenericIngredient: DataTableGenericIngredientInput;
};

/** An input for mutations affecting `DataTableGenericIngredient` */
export type DataTableGenericIngredientInput = {
  id?: Maybe<Scalars['Int']>;
  productEn?: Maybe<Scalars['String']>;
  productFr?: Maybe<Scalars['String']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableGenericIngredient` mutation. */
export type CreateDataTableGenericIngredientPayload = {
  __typename?: 'CreateDataTableGenericIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableGenericIngredient` that was created by this mutation. */
  dataTableGenericIngredient?: Maybe<DataTableGenericIngredient>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableGenericIngredient`. May be used by Relay 1. */
  dataTableGenericIngredientEdge?: Maybe<DataTableGenericIngredientsEdge>;
};


/** The output of our create `DataTableGenericIngredient` mutation. */
export type CreateDataTableGenericIngredientPayloadDataTableGenericIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableGenericIngredientsOrderBy>>;
};

/** All input for the create `DataTableIngredientsList` mutation. */
export type CreateDataTableIngredientsListInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableIngredientsList` to be created by this mutation. */
  dataTableIngredientsList: DataTableIngredientsListInput;
};

/** An input for mutations affecting `DataTableIngredientsList` */
export type DataTableIngredientsListInput = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableIngredientsList` mutation. */
export type CreateDataTableIngredientsListPayload = {
  __typename?: 'CreateDataTableIngredientsListPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableIngredientsList` that was created by this mutation. */
  dataTableIngredientsList?: Maybe<DataTableIngredientsList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableIngredientsList`. May be used by Relay 1. */
  dataTableIngredientsListEdge?: Maybe<DataTableIngredientsListsEdge>;
};


/** The output of our create `DataTableIngredientsList` mutation. */
export type CreateDataTableIngredientsListPayloadDataTableIngredientsListEdgeArgs = {
  orderBy?: Maybe<Array<DataTableIngredientsListsOrderBy>>;
};

/** All input for the create `DataTableListOfSra` mutation. */
export type CreateDataTableListOfSraInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableListOfSra` to be created by this mutation. */
  dataTableListOfSra: DataTableListOfSraInput;
};

/** An input for mutations affecting `DataTableListOfSra` */
export type DataTableListOfSraInput = {
  id?: Maybe<Scalars['Int']>;
  sra?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableListOfSra` mutation. */
export type CreateDataTableListOfSraPayload = {
  __typename?: 'CreateDataTableListOfSraPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableListOfSra` that was created by this mutation. */
  dataTableListOfSra?: Maybe<DataTableListOfSra>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableListOfSra`. May be used by Relay 1. */
  dataTableListOfSraEdge?: Maybe<DataTableListOfSrasEdge>;
};


/** The output of our create `DataTableListOfSra` mutation. */
export type CreateDataTableListOfSraPayloadDataTableListOfSraEdgeArgs = {
  orderBy?: Maybe<Array<DataTableListOfSrasOrderBy>>;
};

/** All input for the create `DataTableProcessingStep` mutation. */
export type CreateDataTableProcessingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProcessingStep` to be created by this mutation. */
  dataTableProcessingStep: DataTableProcessingStepInput;
};

/** An input for mutations affecting `DataTableProcessingStep` */
export type DataTableProcessingStepInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableProcessingStep` mutation. */
export type CreateDataTableProcessingStepPayload = {
  __typename?: 'CreateDataTableProcessingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProcessingStep` that was created by this mutation. */
  dataTableProcessingStep?: Maybe<DataTableProcessingStep>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProcessingStep`. May be used by Relay 1. */
  dataTableProcessingStepEdge?: Maybe<DataTableProcessingStepsEdge>;
};


/** The output of our create `DataTableProcessingStep` mutation. */
export type CreateDataTableProcessingStepPayloadDataTableProcessingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProcessingStepsOrderBy>>;
};

/** All input for the create `DataTableProduct` mutation. */
export type CreateDataTableProductInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProduct` to be created by this mutation. */
  dataTableProduct: DataTableProductInput;
};

/** An input for mutations affecting `DataTableProduct` */
export type DataTableProductInput = {
  id?: Maybe<Scalars['Int']>;
  origin?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  expiryDate?: Maybe<Scalars['Datetime']>;
  registration?: Maybe<Scalars['String']>;
  applicantName?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  responsiblePerson?: Maybe<Scalars['JSON']>;
  name?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  atcClass?: Maybe<Scalars['String']>;
  companyId?: Maybe<Scalars['Int']>;
  dimensions?: Maybe<Scalars['JSON']>;
  dosageForm?: Maybe<Scalars['String']>;
  applicantId?: Maybe<Scalars['Int']>;
  companyName?: Maybe<Scalars['String']>;
  formulations?: Maybe<Scalars['JSON']>;
  prescription?: Maybe<Scalars['String']>;
  genericNames?: Maybe<Scalars['JSON']>;
  medicineType?: Maybe<Scalars['String']>;
  applicationType?: Maybe<Scalars['String']>;
  primaryContainer?: Maybe<Scalars['String']>;
  shelfLifeOpened?: Maybe<Scalars['String']>;
  manufacturersList?: Maybe<Scalars['JSON']>;
  shelfLifeProposed?: Maybe<Scalars['String']>;
  administrationRoute?: Maybe<Scalars['String']>;
  isLocallyManufactured?: Maybe<Scalars['Boolean']>;
  shelfLifeReconstructed?: Maybe<Scalars['String']>;
  storageConditionsOpened?: Maybe<Scalars['String']>;
  storageConditionsProposed?: Maybe<Scalars['String']>;
  genericNamesFilterData?: Maybe<Scalars['String']>;
  manufacturersListFilterData?: Maybe<Scalars['String']>;
  dataTableProductApplicationJoinsUsingId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInverseInput>;
};

/** The output of our create `DataTableProduct` mutation. */
export type CreateDataTableProductPayload = {
  __typename?: 'CreateDataTableProductPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProduct` that was created by this mutation. */
  dataTableProduct?: Maybe<DataTableProduct>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProduct`. May be used by Relay 1. */
  dataTableProductEdge?: Maybe<DataTableProductsEdge>;
};


/** The output of our create `DataTableProduct` mutation. */
export type CreateDataTableProductPayloadDataTableProductEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductsOrderBy>>;
};

/** All input for the create `DataTableProductApplicationJoin` mutation. */
export type CreateDataTableProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProductApplicationJoin` to be created by this mutation. */
  dataTableProductApplicationJoin: DataTableProductApplicationJoinInput;
};

/** An input for mutations affecting `DataTableProductApplicationJoin` */
export type DataTableProductApplicationJoinInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  dataTableProductId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<DataTableProductApplicationJoinApplicationIdFkeyInput>;
  dataTableProductToDataTableProductId?: Maybe<DataTableProductApplicationJoinDataTableProductIdFkeyInput>;
};

/** The output of our create `DataTableProductApplicationJoin` mutation. */
export type CreateDataTableProductApplicationJoinPayload = {
  __typename?: 'CreateDataTableProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProductApplicationJoin` that was created by this mutation. */
  dataTableProductApplicationJoin?: Maybe<DataTableProductApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `DataTableProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `DataTableProduct` that is related to this `DataTableProductApplicationJoin`. */
  dataTableProduct?: Maybe<DataTableProduct>;
  /** An edge for our `DataTableProductApplicationJoin`. May be used by Relay 1. */
  dataTableProductApplicationJoinEdge?: Maybe<DataTableProductApplicationJoinsEdge>;
};


/** The output of our create `DataTableProductApplicationJoin` mutation. */
export type CreateDataTableProductApplicationJoinPayloadDataTableProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
};

/** All input for the create `DataTableProvince` mutation. */
export type CreateDataTableProvinceInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProvince` to be created by this mutation. */
  dataTableProvince: DataTableProvinceInput;
};

/** An input for mutations affecting `DataTableProvince` */
export type DataTableProvinceInput = {
  id?: Maybe<Scalars['Int']>;
  area?: Maybe<Scalars['String']>;
  nome?: Maybe<Scalars['String']>;
  codigo?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  comunas?: Maybe<Scalars['String']>;
  populacao?: Maybe<Scalars['String']>;
  municipios?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableProvince` mutation. */
export type CreateDataTableProvincePayload = {
  __typename?: 'CreateDataTableProvincePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProvince` that was created by this mutation. */
  dataTableProvince?: Maybe<DataTableProvince>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProvince`. May be used by Relay 1. */
  dataTableProvinceEdge?: Maybe<DataTableProvincesEdge>;
};


/** The output of our create `DataTableProvince` mutation. */
export type CreateDataTableProvincePayloadDataTableProvinceEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProvincesOrderBy>>;
};

/** All input for the create `DataTableStorageCondition` mutation. */
export type CreateDataTableStorageConditionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableStorageCondition` to be created by this mutation. */
  dataTableStorageCondition: DataTableStorageConditionInput;
};

/** An input for mutations affecting `DataTableStorageCondition` */
export type DataTableStorageConditionInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableStorageCondition` mutation. */
export type CreateDataTableStorageConditionPayload = {
  __typename?: 'CreateDataTableStorageConditionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableStorageCondition` that was created by this mutation. */
  dataTableStorageCondition?: Maybe<DataTableStorageCondition>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableStorageCondition`. May be used by Relay 1. */
  dataTableStorageConditionEdge?: Maybe<DataTableStorageConditionsEdge>;
};


/** The output of our create `DataTableStorageCondition` mutation. */
export type CreateDataTableStorageConditionPayloadDataTableStorageConditionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableStorageConditionsOrderBy>>;
};

/** All input for the create `DataTableUnitsOfProportion` mutation. */
export type CreateDataTableUnitsOfProportionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableUnitsOfProportion` to be created by this mutation. */
  dataTableUnitsOfProportion: DataTableUnitsOfProportionInput;
};

/** An input for mutations affecting `DataTableUnitsOfProportion` */
export type DataTableUnitsOfProportionInput = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
};

/** The output of our create `DataTableUnitsOfProportion` mutation. */
export type CreateDataTableUnitsOfProportionPayload = {
  __typename?: 'CreateDataTableUnitsOfProportionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableUnitsOfProportion` that was created by this mutation. */
  dataTableUnitsOfProportion?: Maybe<DataTableUnitsOfProportion>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableUnitsOfProportion`. May be used by Relay 1. */
  dataTableUnitsOfProportionEdge?: Maybe<DataTableUnitsOfProportionsEdge>;
};


/** The output of our create `DataTableUnitsOfProportion` mutation. */
export type CreateDataTableUnitsOfProportionPayloadDataTableUnitsOfProportionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableUnitsOfProportionsOrderBy>>;
};

/** All input for the create `DataView` mutation. */
export type CreateDataViewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataView` to be created by this mutation. */
  dataView: DataViewInput;
};

/** An input for mutations affecting `DataView` */
export type DataViewInput = {
  id?: Maybe<Scalars['Int']>;
  tableName: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  permissionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  rowRestrictions?: Maybe<Scalars['JSON']>;
  tableViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableSearchColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewHeaderColumn: Scalars['String'];
  filterIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  filterExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  showLinkedApplications?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  defaultSortColumn?: Maybe<Scalars['String']>;
};

/** The output of our create `DataView` mutation. */
export type CreateDataViewPayload = {
  __typename?: 'CreateDataViewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataView` that was created by this mutation. */
  dataView?: Maybe<DataView>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
};


/** The output of our create `DataView` mutation. */
export type CreateDataViewPayloadDataViewEdgeArgs = {
  orderBy?: Maybe<Array<DataViewsOrderBy>>;
};

/** All input for the create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataViewColumnDefinition` to be created by this mutation. */
  dataViewColumnDefinition: DataViewColumnDefinitionInput;
};

/** An input for mutations affecting `DataViewColumnDefinition` */
export type DataViewColumnDefinitionInput = {
  id?: Maybe<Scalars['Int']>;
  tableName?: Maybe<Scalars['String']>;
  columnName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  elementParameters?: Maybe<Scalars['JSON']>;
  additionalFormatting?: Maybe<Scalars['JSON']>;
  valueExpression?: Maybe<Scalars['JSON']>;
  sortColumn?: Maybe<Scalars['String']>;
  filterParameters?: Maybe<Scalars['JSON']>;
  filterExpression?: Maybe<Scalars['JSON']>;
  filterDataType?: Maybe<Scalars['String']>;
};

/** The output of our create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionPayload = {
  __typename?: 'CreateDataViewColumnDefinitionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataViewColumnDefinition` that was created by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
};


/** The output of our create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: Maybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ElementTypePlugin` to be created by this mutation. */
  elementTypePlugin: ElementTypePluginInput;
};

/** An input for mutations affecting `ElementTypePlugin` */
export type ElementTypePluginInput = {
  code: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  path?: Maybe<Scalars['String']>;
  displayComponentName?: Maybe<Scalars['String']>;
  configComponentName?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The output of our create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginPayload = {
  __typename?: 'CreateElementTypePluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ElementTypePlugin` that was created by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
};


/** The output of our create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: Maybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the create `File` mutation. */
export type CreateFileInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `File` to be created by this mutation. */
  file: FileInput;
};

/** An input for mutations affecting `File` */
export type FileInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  originalFilename: Scalars['String'];
  userId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  applicationSerial?: Maybe<Scalars['String']>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  applicationNoteId?: Maybe<Scalars['Int']>;
  isOutputDoc?: Maybe<Scalars['Boolean']>;
  isInternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  isExternalReferenceDoc?: Maybe<Scalars['Boolean']>;
  toBeDeleted?: Maybe<Scalars['Boolean']>;
  filePath: Scalars['String'];
  thumbnailPath?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  submitted?: Maybe<Scalars['Boolean']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  userToUserId?: Maybe<FileUserIdFkeyInput>;
  templateToTemplateId?: Maybe<FileTemplateIdFkeyInput>;
  applicationToApplicationSerial?: Maybe<FileApplicationSerialFkeyInput>;
  applicationResponseToApplicationResponseId?: Maybe<FileApplicationResponseIdFkeyInput>;
  applicationNoteToApplicationNoteId?: Maybe<FileApplicationNoteIdFkeyInput>;
};

/** The output of our create `File` mutation. */
export type CreateFilePayload = {
  __typename?: 'CreateFilePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `File` that was created by this mutation. */
  file?: Maybe<File>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `File`. */
  user?: Maybe<User>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
};


/** The output of our create `File` mutation. */
export type CreateFilePayloadFileEdgeArgs = {
  orderBy?: Maybe<Array<FilesOrderBy>>;
};

/** All input for the create `Filter` mutation. */
export type CreateFilterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Filter` to be created by this mutation. */
  filter: FilterInput;
};

/** An input for mutations affecting `Filter` */
export type FilterInput = {
  id?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['JSON']>;
  userRole?: Maybe<PermissionPolicyType>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
};

/** The output of our create `Filter` mutation. */
export type CreateFilterPayload = {
  __typename?: 'CreateFilterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Filter` that was created by this mutation. */
  filter?: Maybe<Filter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
};


/** The output of our create `Filter` mutation. */
export type CreateFilterPayloadFilterEdgeArgs = {
  orderBy?: Maybe<Array<FiltersOrderBy>>;
};

/** All input for the create `Notification` mutation. */
export type CreateNotificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Notification` to be created by this mutation. */
  notification: NotificationInput;
};

/** An input for mutations affecting `Notification` */
export type NotificationInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  emailRecipients?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']>>>;
  timestamp?: Maybe<Scalars['Datetime']>;
  isRead?: Maybe<Scalars['Boolean']>;
  emailSent?: Maybe<Scalars['Boolean']>;
  emailServerLog?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<NotificationUserIdFkeyInput>;
  applicationToApplicationId?: Maybe<NotificationApplicationIdFkeyInput>;
  reviewToReviewId?: Maybe<NotificationReviewIdFkeyInput>;
};

/** The output of our create `Notification` mutation. */
export type CreateNotificationPayload = {
  __typename?: 'CreateNotificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Notification` that was created by this mutation. */
  notification?: Maybe<Notification>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `Notification`. */
  user?: Maybe<User>;
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
};


/** The output of our create `Notification` mutation. */
export type CreateNotificationPayloadNotificationEdgeArgs = {
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
};

/** All input for the create `Organisation` mutation. */
export type CreateOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Organisation` to be created by this mutation. */
  organisation: OrganisationInput;
};

/** An input for mutations affecting `Organisation` */
export type OrganisationInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  registration?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  isSystemOrg?: Maybe<Scalars['Boolean']>;
  registrationDocumentation?: Maybe<Scalars['JSON']>;
  agent?: Maybe<Scalars['JSON']>;
  contact?: Maybe<Scalars['JSON']>;
  authorisation?: Maybe<Scalars['JSON']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  postalAddress?: Maybe<Scalars['String']>;
  postalCountry?: Maybe<Scalars['String']>;
  postalProvince?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  agentId?: Maybe<Scalars['Int']>;
  typeFilterData?: Maybe<Scalars['String']>;
  applicationsUsingId?: Maybe<ApplicationOrgIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteOrgIdFkeyInverseInput>;
  organisationApplicationJoinsUsingId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The output of our create `Organisation` mutation. */
export type CreateOrganisationPayload = {
  __typename?: 'CreateOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Organisation` that was created by this mutation. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
};


/** The output of our create `Organisation` mutation. */
export type CreateOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationsOrderBy>>;
};

/** All input for the create `OrganisationApplicationJoin` mutation. */
export type CreateOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganisationApplicationJoin` to be created by this mutation. */
  organisationApplicationJoin: OrganisationApplicationJoinInput;
};

/** An input for mutations affecting `OrganisationApplicationJoin` */
export type OrganisationApplicationJoinInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<OrganisationApplicationJoinApplicationIdFkeyInput>;
  organisationToOrganisationId?: Maybe<OrganisationApplicationJoinOrganisationIdFkeyInput>;
};

/** The output of our create `OrganisationApplicationJoin` mutation. */
export type CreateOrganisationApplicationJoinPayload = {
  __typename?: 'CreateOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganisationApplicationJoin` that was created by this mutation. */
  organisationApplicationJoin?: Maybe<OrganisationApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `OrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `Organisation` that is related to this `OrganisationApplicationJoin`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `OrganisationApplicationJoin`. May be used by Relay 1. */
  organisationApplicationJoinEdge?: Maybe<OrganisationApplicationJoinsEdge>;
};


/** The output of our create `OrganisationApplicationJoin` mutation. */
export type CreateOrganisationApplicationJoinPayloadOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
};

/** All input for the create `PermissionJoin` mutation. */
export type CreatePermissionJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionJoin` to be created by this mutation. */
  permissionJoin: PermissionJoinInput;
};

/** An input for mutations affecting `PermissionJoin` */
export type PermissionJoinInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  userToUserId?: Maybe<PermissionJoinUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: Maybe<PermissionJoinPermissionNameIdFkeyInput>;
};

/** The output of our create `PermissionJoin` mutation. */
export type CreatePermissionJoinPayload = {
  __typename?: 'CreatePermissionJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionJoin` that was created by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `PermissionJoin`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
};


/** The output of our create `PermissionJoin` mutation. */
export type CreatePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the create `PermissionName` mutation. */
export type CreatePermissionNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionName` to be created by this mutation. */
  permissionName: PermissionNameInput;
};

/** An input for mutations affecting `PermissionName` */
export type PermissionNameInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  permissionPolicyId?: Maybe<Scalars['Int']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']>;
  permissionPolicyToPermissionPolicyId?: Maybe<PermissionNamePermissionPolicyIdFkeyInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The output of our create `PermissionName` mutation. */
export type CreatePermissionNamePayload = {
  __typename?: 'CreatePermissionNamePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionName` that was created by this mutation. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
};


/** The output of our create `PermissionName` mutation. */
export type CreatePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: Maybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionPolicy` to be created by this mutation. */
  permissionPolicy: PermissionPolicyInput;
};

/** An input for mutations affecting `PermissionPolicy` */
export type PermissionPolicyInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  rules?: Maybe<Scalars['JSON']>;
  type?: Maybe<PermissionPolicyType>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  defaultRestrictions?: Maybe<Scalars['JSON']>;
  permissionNamesUsingId?: Maybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
};

/** The output of our create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyPayload = {
  __typename?: 'CreatePermissionPolicyPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionPolicy` that was created by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
};


/** The output of our create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: Maybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the create `ProductApplicationJoin` mutation. */
export type CreateProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ProductApplicationJoin` to be created by this mutation. */
  productApplicationJoin: ProductApplicationJoinInput;
};

/** An input for mutations affecting `ProductApplicationJoin` */
export type ProductApplicationJoinInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  productId: Scalars['Int'];
  applicationToApplicationId?: Maybe<ProductApplicationJoinApplicationIdFkeyInput>;
};

/** The output of our create `ProductApplicationJoin` mutation. */
export type CreateProductApplicationJoinPayload = {
  __typename?: 'CreateProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ProductApplicationJoin` that was created by this mutation. */
  productApplicationJoin?: Maybe<ProductApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** An edge for our `ProductApplicationJoin`. May be used by Relay 1. */
  productApplicationJoinEdge?: Maybe<ProductApplicationJoinsEdge>;
};


/** The output of our create `ProductApplicationJoin` mutation. */
export type CreateProductApplicationJoinPayloadProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<ProductApplicationJoinsOrderBy>>;
};

/** All input for the create `Review` mutation. */
export type CreateReviewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Review` to be created by this mutation. */
  review: ReviewInput;
};

/** An input for mutations affecting `Review` */
export type ReviewInput = {
  id?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewReviewAssignmentIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewApplicationIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewReviewerIdFkeyInput>;
  reviewDecisionsUsingId?: Maybe<ReviewDecisionReviewIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: Maybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
};

/** The output of our create `Review` mutation. */
export type CreateReviewPayload = {
  __typename?: 'CreateReviewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Review` that was created by this mutation. */
  review?: Maybe<Review>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `Review`. */
  reviewer?: Maybe<User>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
};


/** The output of our create `Review` mutation. */
export type CreateReviewPayloadReviewEdgeArgs = {
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
};

/** All input for the create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignment` to be created by this mutation. */
  reviewAssignment: ReviewAssignmentInput;
};

/** An input for mutations affecting `ReviewAssignment` */
export type ReviewAssignmentInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  reviewerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeStageCreated?: Maybe<Scalars['Datetime']>;
  status: ReviewAssignmentStatus;
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  assignedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  trigger?: Maybe<Trigger>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  levelNumber?: Maybe<Scalars['Int']>;
  levelId?: Maybe<Scalars['Int']>;
  isLastLevel?: Maybe<Scalars['Boolean']>;
  isLastStage?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isFinalDecision?: Maybe<Scalars['Boolean']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerIdFkeyInput>;
  userToReviewerId?: Maybe<ReviewAssignmentReviewerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentOrganisationIdFkeyInput>;
  templateStageToStageId?: Maybe<ReviewAssignmentStageIdFkeyInput>;
  applicationToApplicationId?: Maybe<ReviewAssignmentApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<ReviewAssignmentTemplateIdFkeyInput>;
  templateStageReviewLevelToLevelId?: Maybe<ReviewAssignmentLevelIdFkeyInput>;
  reviewsUsingId?: Maybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
};

/** The output of our create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentPayload = {
  __typename?: 'CreateReviewAssignmentPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignment` that was created by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<User>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
};


/** The output of our create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignmentAssignerJoin` to be created by this mutation. */
  reviewAssignmentAssignerJoin: ReviewAssignmentAssignerJoinInput;
};

/** An input for mutations affecting `ReviewAssignmentAssignerJoin` */
export type ReviewAssignmentAssignerJoinInput = {
  id?: Maybe<Scalars['Int']>;
  assignerId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  reviewAssignmentId?: Maybe<Scalars['Int']>;
  userToAssignerId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInput>;
  organisationToOrganisationId?: Maybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: Maybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
};

/** The output of our create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinPayload = {
  __typename?: 'CreateReviewAssignmentAssignerJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignmentAssignerJoin` that was created by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the create `ReviewDecision` mutation. */
export type CreateReviewDecisionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewDecision` to be created by this mutation. */
  reviewDecision: ReviewDecisionInput;
};

/** An input for mutations affecting `ReviewDecision` */
export type ReviewDecisionInput = {
  id?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  decision?: Maybe<Decision>;
  comment?: Maybe<Scalars['String']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  reviewToReviewId?: Maybe<ReviewDecisionReviewIdFkeyInput>;
};

/** The output of our create `ReviewDecision` mutation. */
export type CreateReviewDecisionPayload = {
  __typename?: 'CreateReviewDecisionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewDecision` that was created by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our create `ReviewDecision` mutation. */
export type CreateReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: Maybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the create `ReviewResponse` mutation. */
export type CreateReviewResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewResponse` to be created by this mutation. */
  reviewResponse: ReviewResponseInput;
};

/** An input for mutations affecting `ReviewResponse` */
export type ReviewResponseInput = {
  id?: Maybe<Scalars['Int']>;
  comment?: Maybe<Scalars['String']>;
  decision?: Maybe<ReviewResponseDecision>;
  applicationResponseId?: Maybe<Scalars['Int']>;
  reviewResponseLinkId?: Maybe<Scalars['Int']>;
  originalReviewResponseId?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  stageNumber?: Maybe<Scalars['Int']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeUpdated?: Maybe<Scalars['Datetime']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']>;
  isLatestReview?: Maybe<Scalars['Boolean']>;
  templateElementId?: Maybe<Scalars['Int']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  status?: Maybe<ReviewResponseStatus>;
  applicationResponseToApplicationResponseId?: Maybe<ReviewResponseApplicationResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: Maybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewResponseToOriginalReviewResponseId?: Maybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewToReviewId?: Maybe<ReviewResponseReviewIdFkeyInput>;
  templateElementToTemplateElementId?: Maybe<ReviewResponseTemplateElementIdFkeyInput>;
};

/** The output of our create `ReviewResponse` mutation. */
export type CreateReviewResponsePayload = {
  __typename?: 'CreateReviewResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewResponse` that was created by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
};


/** The output of our create `ReviewResponse` mutation. */
export type CreateReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewStatusHistory` to be created by this mutation. */
  reviewStatusHistory: ReviewStatusHistoryInput;
};

/** An input for mutations affecting `ReviewStatusHistory` */
export type ReviewStatusHistoryInput = {
  id?: Maybe<Scalars['Int']>;
  reviewId?: Maybe<Scalars['Int']>;
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  isCurrent?: Maybe<Scalars['Boolean']>;
  reviewToReviewId?: Maybe<ReviewStatusHistoryReviewIdFkeyInput>;
};

/** The output of our create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryPayload = {
  __typename?: 'CreateReviewStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewStatusHistory` that was created by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the create `SystemInfo` mutation. */
export type CreateSystemInfoInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SystemInfo` to be created by this mutation. */
  systemInfo: SystemInfoInput;
};

/** An input for mutations affecting `SystemInfo` */
export type SystemInfoInput = {
  id?: Maybe<Scalars['Int']>;
  name: Scalars['String'];
  value?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
};

/** The output of our create `SystemInfo` mutation. */
export type CreateSystemInfoPayload = {
  __typename?: 'CreateSystemInfoPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SystemInfo` that was created by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our create `SystemInfo` mutation. */
export type CreateSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: Maybe<Array<SystemInfosOrderBy>>;
};

/** All input for the create `Template` mutation. */
export type CreateTemplateInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Template` to be created by this mutation. */
  template: TemplateInput;
};

/** An input for mutations affecting `Template` */
export type TemplateInput = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  namePlural?: Maybe<Scalars['String']>;
  code: Scalars['String'];
  isLinear?: Maybe<Scalars['Boolean']>;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']>;
  startMessage?: Maybe<Scalars['JSON']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']>;
  icon?: Maybe<Scalars['String']>;
  templateCategoryId?: Maybe<Scalars['Int']>;
  versionTimestamp?: Maybe<Scalars['Datetime']>;
  version?: Maybe<Scalars['Int']>;
  templateCategoryToTemplateCategoryId?: Maybe<TemplateTemplateCategoryIdFkeyInput>;
  applicationsUsingId?: Maybe<ApplicationTemplateIdFkeyInverseInput>;
  templateActionsUsingId?: Maybe<TemplateActionTemplateIdFkeyInverseInput>;
  actionQueuesUsingId?: Maybe<ActionQueueTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: Maybe<TemplateStageTemplateIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: Maybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  templateFilterJoinsUsingId?: Maybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: Maybe<TemplateSectionTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleTemplateIdFkeyInverseInput>;
};

/** The output of our create `Template` mutation. */
export type CreateTemplatePayload = {
  __typename?: 'CreateTemplatePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Template` that was created by this mutation. */
  template?: Maybe<Template>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our create `Template` mutation. */
export type CreateTemplatePayloadTemplateEdgeArgs = {
  orderBy?: Maybe<Array<TemplatesOrderBy>>;
};

/** All input for the create `TemplateAction` mutation. */
export type CreateTemplateActionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateAction` to be created by this mutation. */
  templateAction: TemplateActionInput;
};

/** An input for mutations affecting `TemplateAction` */
export type TemplateActionInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  actionCode?: Maybe<Scalars['String']>;
  eventCode?: Maybe<Scalars['String']>;
  trigger?: Maybe<Trigger>;
  condition?: Maybe<Scalars['JSON']>;
  parameterQueries?: Maybe<Scalars['JSON']>;
  description?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateActionTemplateIdFkeyInput>;
};

/** The output of our create `TemplateAction` mutation. */
export type CreateTemplateActionPayload = {
  __typename?: 'CreateTemplateActionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateAction` that was created by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our create `TemplateAction` mutation. */
export type CreateTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the create `TemplateCategory` mutation. */
export type CreateTemplateCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateCategory` to be created by this mutation. */
  templateCategory: TemplateCategoryInput;
};

/** An input for mutations affecting `TemplateCategory` */
export type TemplateCategoryInput = {
  id?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  icon?: Maybe<Scalars['String']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
  templatesUsingId?: Maybe<TemplateTemplateCategoryIdFkeyInverseInput>;
};

/** The output of our create `TemplateCategory` mutation. */
export type CreateTemplateCategoryPayload = {
  __typename?: 'CreateTemplateCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateCategory` that was created by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our create `TemplateCategory` mutation. */
export type CreateTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: Maybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the create `TemplateElement` mutation. */
export type CreateTemplateElementInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateElement` to be created by this mutation. */
  templateElement: TemplateElementInput;
};

/** An input for mutations affecting `TemplateElement` */
export type TemplateElementInput = {
  id?: Maybe<Scalars['Int']>;
  sectionId?: Maybe<Scalars['Int']>;
  code: Scalars['String'];
  index?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  visibilityCondition?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['JSON']>;
  isEditable?: Maybe<Scalars['JSON']>;
  validation?: Maybe<Scalars['JSON']>;
  defaultValue?: Maybe<Scalars['JSON']>;
  validationMessage?: Maybe<Scalars['String']>;
  helpText?: Maybe<Scalars['String']>;
  parameters?: Maybe<Scalars['JSON']>;
  reviewability?: Maybe<Reviewability>;
  templateCode?: Maybe<Scalars['String']>;
  templateVersion?: Maybe<Scalars['Int']>;
  templateSectionToSectionId?: Maybe<TemplateElementSectionIdFkeyInput>;
  applicationResponsesUsingId?: Maybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  reviewResponsesUsingId?: Maybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
};

/** The output of our create `TemplateElement` mutation. */
export type CreateTemplateElementPayload = {
  __typename?: 'CreateTemplateElementPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateElement` that was created by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our create `TemplateElement` mutation. */
export type CreateTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: Maybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateFilterJoin` to be created by this mutation. */
  templateFilterJoin: TemplateFilterJoinInput;
};

/** An input for mutations affecting `TemplateFilterJoin` */
export type TemplateFilterJoinInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  filterId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateFilterJoinTemplateIdFkeyInput>;
  filterToFilterId?: Maybe<TemplateFilterJoinFilterIdFkeyInput>;
};

/** The output of our create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinPayload = {
  __typename?: 'CreateTemplateFilterJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateFilterJoin` that was created by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the create `TemplatePermission` mutation. */
export type CreateTemplatePermissionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplatePermission` to be created by this mutation. */
  templatePermission: TemplatePermissionInput;
};

/** An input for mutations affecting `TemplatePermission` */
export type TemplatePermissionInput = {
  id?: Maybe<Scalars['Int']>;
  permissionNameId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  allowedSections?: Maybe<Array<Maybe<Scalars['String']>>>;
  canSelfAssign?: Maybe<Scalars['Boolean']>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  levelNumber?: Maybe<Scalars['Int']>;
  restrictions?: Maybe<Scalars['JSON']>;
  permissionNameToPermissionNameId?: Maybe<TemplatePermissionPermissionNameIdFkeyInput>;
  templateToTemplateId?: Maybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The output of our create `TemplatePermission` mutation. */
export type CreateTemplatePermissionPayload = {
  __typename?: 'CreateTemplatePermissionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplatePermission` that was created by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our create `TemplatePermission` mutation. */
export type CreateTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the create `TemplateSection` mutation. */
export type CreateTemplateSectionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateSection` to be created by this mutation. */
  templateSection: TemplateSectionInput;
};

/** An input for mutations affecting `TemplateSection` */
export type TemplateSectionInput = {
  id?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateSectionTemplateIdFkeyInput>;
  templateElementsUsingId?: Maybe<TemplateElementSectionIdFkeyInverseInput>;
};

/** The output of our create `TemplateSection` mutation. */
export type CreateTemplateSectionPayload = {
  __typename?: 'CreateTemplateSectionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateSection` that was created by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our create `TemplateSection` mutation. */
export type CreateTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the create `TemplateStage` mutation. */
export type CreateTemplateStageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStage` to be created by this mutation. */
  templateStage: TemplateStageInput;
};

/** An input for mutations affecting `TemplateStage` */
export type TemplateStageInput = {
  id?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['Int']>;
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  colour?: Maybe<Scalars['String']>;
  templateId?: Maybe<Scalars['Int']>;
  templateToTemplateId?: Maybe<TemplateStageTemplateIdFkeyInput>;
  applicationStageHistoriesUsingId?: Maybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: Maybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
};

/** The output of our create `TemplateStage` mutation. */
export type CreateTemplateStagePayload = {
  __typename?: 'CreateTemplateStagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStage` that was created by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our create `TemplateStage` mutation. */
export type CreateTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStageReviewLevel` to be created by this mutation. */
  templateStageReviewLevel: TemplateStageReviewLevelInput;
};

/** An input for mutations affecting `TemplateStageReviewLevel` */
export type TemplateStageReviewLevelInput = {
  id?: Maybe<Scalars['Int']>;
  stageId?: Maybe<Scalars['Int']>;
  number: Scalars['Int'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  templateStageToStageId?: Maybe<TemplateStageReviewLevelStageIdFkeyInput>;
  reviewAssignmentsUsingId?: Maybe<ReviewAssignmentLevelIdFkeyInverseInput>;
};

/** The output of our create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelPayload = {
  __typename?: 'CreateTemplateStageReviewLevelPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStageReviewLevel` that was created by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the create `TriggerQueue` mutation. */
export type CreateTriggerQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerQueue` to be created by this mutation. */
  triggerQueue: TriggerQueueInput;
};

/** An input for mutations affecting `TriggerQueue` */
export type TriggerQueueInput = {
  id?: Maybe<Scalars['Int']>;
  triggerType?: Maybe<Trigger>;
  table?: Maybe<Scalars['String']>;
  recordId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
  status?: Maybe<TriggerQueueStatus>;
  log?: Maybe<Scalars['JSON']>;
  actionQueuesUsingId?: Maybe<ActionQueueTriggerEventFkeyInverseInput>;
};

/** The output of our create `TriggerQueue` mutation. */
export type CreateTriggerQueuePayload = {
  __typename?: 'CreateTriggerQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerQueue` that was created by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our create `TriggerQueue` mutation. */
export type CreateTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: Maybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the create `TriggerSchedule` mutation. */
export type CreateTriggerScheduleInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerSchedule` to be created by this mutation. */
  triggerSchedule: TriggerScheduleInput;
};

/** An input for mutations affecting `TriggerSchedule` */
export type TriggerScheduleInput = {
  id?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  timeScheduled: Scalars['Datetime'];
  applicationId?: Maybe<Scalars['Int']>;
  templateId?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['JSON']>;
  isActive?: Maybe<Scalars['Boolean']>;
  editorUserId?: Maybe<Scalars['Int']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<TriggerScheduleApplicationIdFkeyInput>;
  templateToTemplateId?: Maybe<TriggerScheduleTemplateIdFkeyInput>;
  userToEditorUserId?: Maybe<TriggerScheduleEditorUserIdFkeyInput>;
};

/** The output of our create `TriggerSchedule` mutation. */
export type CreateTriggerSchedulePayload = {
  __typename?: 'CreateTriggerSchedulePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerSchedule` that was created by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `TriggerSchedule`. */
  editorUser?: Maybe<User>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our create `TriggerSchedule` mutation. */
export type CreateTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the create `User` mutation. */
export type CreateUserInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` to be created by this mutation. */
  user: UserInput;
};

/** An input for mutations affecting `User` */
export type UserInput = {
  id?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  dateOfBirth?: Maybe<Scalars['Date']>;
  passwordHash?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  province?: Maybe<Scalars['String']>;
  registrationDate?: Maybe<Scalars['Datetime']>;
  applicationsUsingId?: Maybe<ApplicationUserIdFkeyInverseInput>;
  reviewsUsingId?: Maybe<ReviewReviewerIdFkeyInverseInput>;
  applicationNotesUsingId?: Maybe<ApplicationNoteUserIdFkeyInverseInput>;
  filesUsingId?: Maybe<FileUserIdFkeyInverseInput>;
  notificationsUsingId?: Maybe<NotificationUserIdFkeyInverseInput>;
  permissionJoinsUsingId?: Maybe<PermissionJoinUserIdFkeyInverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: Maybe<ReviewAssignmentAssignerIdFkeyInverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: Maybe<ReviewAssignmentReviewerIdFkeyInverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: Maybe<ReviewAssignmentAssignerJoinAssignerIdFkeyInverseInput>;
  triggerSchedulesUsingId?: Maybe<TriggerScheduleEditorUserIdFkeyInverseInput>;
  userApplicationJoinsUsingId?: Maybe<UserApplicationJoinUserIdFkeyInverseInput>;
  userOrganisationsUsingId?: Maybe<UserOrganisationUserIdFkeyInverseInput>;
};

/** The output of our create `User` mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` that was created by this mutation. */
  user?: Maybe<User>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our create `User` mutation. */
export type CreateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the create `UserApplicationJoin` mutation. */
export type CreateUserApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserApplicationJoin` to be created by this mutation. */
  userApplicationJoin: UserApplicationJoinInput;
};

/** An input for mutations affecting `UserApplicationJoin` */
export type UserApplicationJoinInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserApplicationJoinApplicationIdFkeyInput>;
  userToUserId?: Maybe<UserApplicationJoinUserIdFkeyInput>;
};

/** The output of our create `UserApplicationJoin` mutation. */
export type CreateUserApplicationJoinPayload = {
  __typename?: 'CreateUserApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserApplicationJoin` that was created by this mutation. */
  userApplicationJoin?: Maybe<UserApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `UserApplicationJoin`. */
  user?: Maybe<User>;
  /** An edge for our `UserApplicationJoin`. May be used by Relay 1. */
  userApplicationJoinEdge?: Maybe<UserApplicationJoinsEdge>;
};


/** The output of our create `UserApplicationJoin` mutation. */
export type CreateUserApplicationJoinPayloadUserApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
};

/** All input for the create `UserOrganisation` mutation. */
export type CreateUserOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisation` to be created by this mutation. */
  userOrganisation: UserOrganisationInput;
};

/** An input for mutations affecting `UserOrganisation` */
export type UserOrganisationInput = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  organisationId?: Maybe<Scalars['Int']>;
  userRole?: Maybe<Scalars['String']>;
  userToUserId?: Maybe<UserOrganisationUserIdFkeyInput>;
  organisationToOrganisationId?: Maybe<UserOrganisationOrganisationIdFkeyInput>;
  userOrganisationApplicationJoinsUsingId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInverseInput>;
};

/** The output of our create `UserOrganisation` mutation. */
export type CreateUserOrganisationPayload = {
  __typename?: 'CreateUserOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisation` that was created by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our create `UserOrganisation` mutation. */
export type CreateUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
};

/** All input for the create `UserOrganisationApplicationJoin` mutation. */
export type CreateUserOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisationApplicationJoin` to be created by this mutation. */
  userOrganisationApplicationJoin: UserOrganisationApplicationJoinInput;
};

/** An input for mutations affecting `UserOrganisationApplicationJoin` */
export type UserOrganisationApplicationJoinInput = {
  id?: Maybe<Scalars['Int']>;
  applicationId?: Maybe<Scalars['Int']>;
  userOrganisationId?: Maybe<Scalars['Int']>;
  applicationToApplicationId?: Maybe<UserOrganisationApplicationJoinApplicationIdFkeyInput>;
  userOrganisationToUserOrganisationId?: Maybe<UserOrganisationApplicationJoinUserOrganisationIdFkeyInput>;
};

/** The output of our create `UserOrganisationApplicationJoin` mutation. */
export type CreateUserOrganisationApplicationJoinPayload = {
  __typename?: 'CreateUserOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisationApplicationJoin` that was created by this mutation. */
  userOrganisationApplicationJoin?: Maybe<UserOrganisationApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserOrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `UserOrganisation` that is related to this `UserOrganisationApplicationJoin`. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisationApplicationJoin`. May be used by Relay 1. */
  userOrganisationApplicationJoinEdge?: Maybe<UserOrganisationApplicationJoinsEdge>;
};


/** The output of our create `UserOrganisationApplicationJoin` mutation. */
export type CreateUserOrganisationApplicationJoinPayloadUserOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
};

/** All input for the create `Verification` mutation. */
export type CreateVerificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Verification` to be created by this mutation. */
  verification: VerificationInput;
};

/** An input for mutations affecting `Verification` */
export type VerificationInput = {
  id?: Maybe<Scalars['Int']>;
  uniqueId: Scalars['String'];
  applicationId?: Maybe<Scalars['Int']>;
  eventCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  data?: Maybe<Scalars['JSON']>;
  timeCreated?: Maybe<Scalars['Datetime']>;
  timeExpired?: Maybe<Scalars['Datetime']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  trigger?: Maybe<Trigger>;
  applicationToApplicationId?: Maybe<VerificationApplicationIdFkeyInput>;
};

/** The output of our create `Verification` mutation. */
export type CreateVerificationPayload = {
  __typename?: 'CreateVerificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Verification` that was created by this mutation. */
  verification?: Maybe<Verification>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our create `Verification` mutation. */
export type CreateVerificationPayloadVerificationEdgeArgs = {
  orderBy?: Maybe<Array<VerificationsOrderBy>>;
};

/** All input for the `updateActionPluginByNodeId` mutation. */
export type UpdateActionPluginByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActionPlugin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
};

/** Represents an update to a `ActionPlugin`. Fields that are set will be updated. */
export type ActionPluginPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  optionalParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
  outputProperties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The output of our update `ActionPlugin` mutation. */
export type UpdateActionPluginPayload = {
  __typename?: 'UpdateActionPluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionPlugin` that was updated by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
};


/** The output of our update `ActionPlugin` mutation. */
export type UpdateActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: Maybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the `updateActionPlugin` mutation. */
export type UpdateActionPluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
  id: Scalars['Int'];
};

/** All input for the `updateActionPluginByCode` mutation. */
export type UpdateActionPluginByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
  code: Scalars['String'];
};

/** All input for the `updateActionQueueByNodeId` mutation. */
export type UpdateActionQueueByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActionQueue` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ActionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The output of our update `ActionQueue` mutation. */
export type UpdateActionQueuePayload = {
  __typename?: 'UpdateActionQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionQueue` that was updated by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
};


/** The output of our update `ActionQueue` mutation. */
export type UpdateActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the `updateActionQueue` mutation. */
export type UpdateActionQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ActionQueue` being updated. */
  patch: ActionQueuePatch;
  id: Scalars['Int'];
};

/** All input for the `updateActivityLogByNodeId` mutation. */
export type UpdateActivityLogByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActivityLog` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ActivityLog` being updated. */
  patch: ActivityLogPatch;
};

/** The output of our update `ActivityLog` mutation. */
export type UpdateActivityLogPayload = {
  __typename?: 'UpdateActivityLogPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActivityLog` that was updated by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
};


/** The output of our update `ActivityLog` mutation. */
export type UpdateActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: Maybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the `updateActivityLog` mutation. */
export type UpdateActivityLogInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ActivityLog` being updated. */
  patch: ActivityLogPatch;
  id: Scalars['Int'];
};

/** All input for the `updateApplicationByNodeId` mutation. */
export type UpdateApplicationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Application` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
};

/** The output of our update `Application` mutation. */
export type UpdateApplicationPayload = {
  __typename?: 'UpdateApplicationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Application` that was updated by this mutation. */
  application?: Maybe<Application>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `Application`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
};


/** The output of our update `Application` mutation. */
export type UpdateApplicationPayloadApplicationEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
};

/** All input for the `updateApplication` mutation. */
export type UpdateApplicationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
  id: Scalars['Int'];
};

/** All input for the `updateApplicationBySerial` mutation. */
export type UpdateApplicationBySerialInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
  serial: Scalars['String'];
};

/** All input for the `updateApplicationNoteByNodeId` mutation. */
export type UpdateApplicationNoteByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationNote` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ApplicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The output of our update `ApplicationNote` mutation. */
export type UpdateApplicationNotePayload = {
  __typename?: 'UpdateApplicationNotePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationNote` that was updated by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `ApplicationNote`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
};


/** The output of our update `ApplicationNote` mutation. */
export type UpdateApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
};

/** All input for the `updateApplicationNote` mutation. */
export type UpdateApplicationNoteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ApplicationNote` being updated. */
  patch: ApplicationNotePatch;
  id: Scalars['Int'];
};

/** All input for the `updateApplicationResponseByNodeId` mutation. */
export type UpdateApplicationResponseByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationResponse` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ApplicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The output of our update `ApplicationResponse` mutation. */
export type UpdateApplicationResponsePayload = {
  __typename?: 'UpdateApplicationResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationResponse` that was updated by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
};


/** The output of our update `ApplicationResponse` mutation. */
export type UpdateApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the `updateApplicationResponse` mutation. */
export type UpdateApplicationResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ApplicationResponse` being updated. */
  patch: ApplicationResponsePatch;
  id: Scalars['Int'];
};

/** All input for the `updateApplicationStageHistoryByNodeId` mutation. */
export type UpdateApplicationStageHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationStageHistory` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ApplicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The output of our update `ApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryPayload = {
  __typename?: 'UpdateApplicationStageHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStageHistory` that was updated by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
};


/** The output of our update `ApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the `updateApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ApplicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateApplicationStatusHistoryByNodeId` mutation. */
export type UpdateApplicationStatusHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ApplicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
};

/** The output of our update `ApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryPayload = {
  __typename?: 'UpdateApplicationStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStatusHistory` that was updated by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
};


/** The output of our update `ApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the `updateApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ApplicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateCounterByNodeId` mutation. */
export type UpdateCounterByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Counter` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
};

/** Represents an update to a `Counter`. Fields that are set will be updated. */
export type CounterPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Int']>;
};

/** The output of our update `Counter` mutation. */
export type UpdateCounterPayload = {
  __typename?: 'UpdateCounterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Counter` that was updated by this mutation. */
  counter?: Maybe<Counter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
};


/** The output of our update `Counter` mutation. */
export type UpdateCounterPayloadCounterEdgeArgs = {
  orderBy?: Maybe<Array<CountersOrderBy>>;
};

/** All input for the `updateCounter` mutation. */
export type UpdateCounterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
  id: Scalars['Int'];
};

/** All input for the `updateCounterByName` mutation. */
export type UpdateCounterByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
  name: Scalars['String'];
};

/** All input for the `updateDataTableByNodeId` mutation. */
export type UpdateDataTableByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTable` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
};

/** Represents an update to a `DataTable`. Fields that are set will be updated. */
export type DataTablePatch = {
  id?: Maybe<Scalars['Int']>;
  tableName?: Maybe<Scalars['String']>;
  displayName?: Maybe<Scalars['String']>;
  fieldMap?: Maybe<Scalars['JSON']>;
  isLookupTable?: Maybe<Scalars['Boolean']>;
  dataViewCode?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTable` mutation. */
export type UpdateDataTablePayload = {
  __typename?: 'UpdateDataTablePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTable` that was updated by this mutation. */
  dataTable?: Maybe<DataTable>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
};


/** The output of our update `DataTable` mutation. */
export type UpdateDataTablePayloadDataTableEdgeArgs = {
  orderBy?: Maybe<Array<DataTablesOrderBy>>;
};

/** All input for the `updateDataTable` mutation. */
export type UpdateDataTableInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableByTableName` mutation. */
export type UpdateDataTableByTableNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
  tableName: Scalars['String'];
};

/** All input for the `updateDataTableManufacturingStepByNodeId` mutation. */
export type UpdateDataTableManufacturingStepByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableManufacturingStep` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableManufacturingStep` being updated. */
  patch: DataTableManufacturingStepPatch;
};

/** Represents an update to a `DataTableManufacturingStep`. Fields that are set will be updated. */
export type DataTableManufacturingStepPatch = {
  id?: Maybe<Scalars['Int']>;
  tipoDeFabricante?: Maybe<Scalars['String']>;
  manufacturingOperation?: Maybe<Scalars['String']>;
  definition?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableManufacturingStep` mutation. */
export type UpdateDataTableManufacturingStepPayload = {
  __typename?: 'UpdateDataTableManufacturingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableManufacturingStep` that was updated by this mutation. */
  dataTableManufacturingStep?: Maybe<DataTableManufacturingStep>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableManufacturingStep`. May be used by Relay 1. */
  dataTableManufacturingStepEdge?: Maybe<DataTableManufacturingStepsEdge>;
};


/** The output of our update `DataTableManufacturingStep` mutation. */
export type UpdateDataTableManufacturingStepPayloadDataTableManufacturingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableManufacturingStepsOrderBy>>;
};

/** All input for the `updateDataTableManufacturingStep` mutation. */
export type UpdateDataTableManufacturingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableManufacturingStep` being updated. */
  patch: DataTableManufacturingStepPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableActiveIngredientByNodeId` mutation. */
export type UpdateDataTableActiveIngredientByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableActiveIngredient` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableActiveIngredient` being updated. */
  patch: DataTableActiveIngredientPatch;
};

/** Represents an update to a `DataTableActiveIngredient`. Fields that are set will be updated. */
export type DataTableActiveIngredientPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  latina?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableActiveIngredient` mutation. */
export type UpdateDataTableActiveIngredientPayload = {
  __typename?: 'UpdateDataTableActiveIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableActiveIngredient` that was updated by this mutation. */
  dataTableActiveIngredient?: Maybe<DataTableActiveIngredient>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableActiveIngredient`. May be used by Relay 1. */
  dataTableActiveIngredientEdge?: Maybe<DataTableActiveIngredientsEdge>;
};


/** The output of our update `DataTableActiveIngredient` mutation. */
export type UpdateDataTableActiveIngredientPayloadDataTableActiveIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableActiveIngredientsOrderBy>>;
};

/** All input for the `updateDataTableActiveIngredient` mutation. */
export type UpdateDataTableActiveIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableActiveIngredient` being updated. */
  patch: DataTableActiveIngredientPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableAdministrationRouteByNodeId` mutation. */
export type UpdateDataTableAdministrationRouteByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAdministrationRoute` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableAdministrationRoute` being updated. */
  patch: DataTableAdministrationRoutePatch;
};

/** Represents an update to a `DataTableAdministrationRoute`. Fields that are set will be updated. */
export type DataTableAdministrationRoutePatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableAdministrationRoute` mutation. */
export type UpdateDataTableAdministrationRoutePayload = {
  __typename?: 'UpdateDataTableAdministrationRoutePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAdministrationRoute` that was updated by this mutation. */
  dataTableAdministrationRoute?: Maybe<DataTableAdministrationRoute>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAdministrationRoute`. May be used by Relay 1. */
  dataTableAdministrationRouteEdge?: Maybe<DataTableAdministrationRoutesEdge>;
};


/** The output of our update `DataTableAdministrationRoute` mutation. */
export type UpdateDataTableAdministrationRoutePayloadDataTableAdministrationRouteEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAdministrationRoutesOrderBy>>;
};

/** All input for the `updateDataTableAdministrationRoute` mutation. */
export type UpdateDataTableAdministrationRouteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableAdministrationRoute` being updated. */
  patch: DataTableAdministrationRoutePatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableAnnexByNodeId` mutation. */
export type UpdateDataTableAnnexByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAnnex` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableAnnex` being updated. */
  patch: DataTableAnnexPatch;
};

/** Represents an update to a `DataTableAnnex`. Fields that are set will be updated. */
export type DataTableAnnexPatch = {
  id?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableAnnex` mutation. */
export type UpdateDataTableAnnexPayload = {
  __typename?: 'UpdateDataTableAnnexPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex` that was updated by this mutation. */
  dataTableAnnex?: Maybe<DataTableAnnex>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex`. May be used by Relay 1. */
  dataTableAnnexEdge?: Maybe<DataTableAnnexesEdge>;
};


/** The output of our update `DataTableAnnex` mutation. */
export type UpdateDataTableAnnexPayloadDataTableAnnexEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnexesOrderBy>>;
};

/** All input for the `updateDataTableAnnex` mutation. */
export type UpdateDataTableAnnexInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableAnnex` being updated. */
  patch: DataTableAnnexPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableAnnex2ByNodeId` mutation. */
export type UpdateDataTableAnnex2ByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAnnex2` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableAnnex2` being updated. */
  patch: DataTableAnnex2Patch;
};

/** Represents an update to a `DataTableAnnex2`. Fields that are set will be updated. */
export type DataTableAnnex2Patch = {
  id?: Maybe<Scalars['Int']>;
  country?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableAnnex2` mutation. */
export type UpdateDataTableAnnex2Payload = {
  __typename?: 'UpdateDataTableAnnex2Payload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex2` that was updated by this mutation. */
  dataTableAnnex2?: Maybe<DataTableAnnex2>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex2`. May be used by Relay 1. */
  dataTableAnnex2Edge?: Maybe<DataTableAnnex2sEdge>;
};


/** The output of our update `DataTableAnnex2` mutation. */
export type UpdateDataTableAnnex2PayloadDataTableAnnex2EdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnex2sOrderBy>>;
};

/** All input for the `updateDataTableAnnex2` mutation. */
export type UpdateDataTableAnnex2Input = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableAnnex2` being updated. */
  patch: DataTableAnnex2Patch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableAtcCodeByNodeId` mutation. */
export type UpdateDataTableAtcCodeByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAtcCode` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableAtcCode` being updated. */
  patch: DataTableAtcCodePatch;
};

/** Represents an update to a `DataTableAtcCode`. Fields that are set will be updated. */
export type DataTableAtcCodePatch = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableAtcCode` mutation. */
export type UpdateDataTableAtcCodePayload = {
  __typename?: 'UpdateDataTableAtcCodePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcCode` that was updated by this mutation. */
  dataTableAtcCode?: Maybe<DataTableAtcCode>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcCode`. May be used by Relay 1. */
  dataTableAtcCodeEdge?: Maybe<DataTableAtcCodesEdge>;
};


/** The output of our update `DataTableAtcCode` mutation. */
export type UpdateDataTableAtcCodePayloadDataTableAtcCodeEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcCodesOrderBy>>;
};

/** All input for the `updateDataTableAtcCode` mutation. */
export type UpdateDataTableAtcCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableAtcCode` being updated. */
  patch: DataTableAtcCodePatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableAtcTherapeuticCategoryByNodeId` mutation. */
export type UpdateDataTableAtcTherapeuticCategoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAtcTherapeuticCategory` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableAtcTherapeuticCategory` being updated. */
  patch: DataTableAtcTherapeuticCategoryPatch;
};

/** Represents an update to a `DataTableAtcTherapeuticCategory`. Fields that are set will be updated. */
export type DataTableAtcTherapeuticCategoryPatch = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableAtcTherapeuticCategory` mutation. */
export type UpdateDataTableAtcTherapeuticCategoryPayload = {
  __typename?: 'UpdateDataTableAtcTherapeuticCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcTherapeuticCategory` that was updated by this mutation. */
  dataTableAtcTherapeuticCategory?: Maybe<DataTableAtcTherapeuticCategory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcTherapeuticCategory`. May be used by Relay 1. */
  dataTableAtcTherapeuticCategoryEdge?: Maybe<DataTableAtcTherapeuticCategoriesEdge>;
};


/** The output of our update `DataTableAtcTherapeuticCategory` mutation. */
export type UpdateDataTableAtcTherapeuticCategoryPayloadDataTableAtcTherapeuticCategoryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcTherapeuticCategoriesOrderBy>>;
};

/** All input for the `updateDataTableAtcTherapeuticCategory` mutation. */
export type UpdateDataTableAtcTherapeuticCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableAtcTherapeuticCategory` being updated. */
  patch: DataTableAtcTherapeuticCategoryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableContainerByNodeId` mutation. */
export type UpdateDataTableContainerByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableContainer` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableContainer` being updated. */
  patch: DataTableContainerPatch;
};

/** Represents an update to a `DataTableContainer`. Fields that are set will be updated. */
export type DataTableContainerPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableContainer` mutation. */
export type UpdateDataTableContainerPayload = {
  __typename?: 'UpdateDataTableContainerPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableContainer` that was updated by this mutation. */
  dataTableContainer?: Maybe<DataTableContainer>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableContainer`. May be used by Relay 1. */
  dataTableContainerEdge?: Maybe<DataTableContainersEdge>;
};


/** The output of our update `DataTableContainer` mutation. */
export type UpdateDataTableContainerPayloadDataTableContainerEdgeArgs = {
  orderBy?: Maybe<Array<DataTableContainersOrderBy>>;
};

/** All input for the `updateDataTableContainer` mutation. */
export type UpdateDataTableContainerInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableContainer` being updated. */
  patch: DataTableContainerPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableCountryByNodeId` mutation. */
export type UpdateDataTableCountryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableCountry` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableCountry` being updated. */
  patch: DataTableCountryPatch;
};

/** Represents an update to a `DataTableCountry`. Fields that are set will be updated. */
export type DataTableCountryPatch = {
  id?: Maybe<Scalars['Int']>;
  nameCommon?: Maybe<Scalars['String']>;
  nameOfficial?: Maybe<Scalars['String']>;
  translationsPorOfficial?: Maybe<Scalars['String']>;
  translationsPorCommon?: Maybe<Scalars['String']>;
  translationCommonNoAccent?: Maybe<Scalars['String']>;
  flag?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableCountry` mutation. */
export type UpdateDataTableCountryPayload = {
  __typename?: 'UpdateDataTableCountryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableCountry` that was updated by this mutation. */
  dataTableCountry?: Maybe<DataTableCountry>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableCountry`. May be used by Relay 1. */
  dataTableCountryEdge?: Maybe<DataTableCountriesEdge>;
};


/** The output of our update `DataTableCountry` mutation. */
export type UpdateDataTableCountryPayloadDataTableCountryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableCountriesOrderBy>>;
};

/** All input for the `updateDataTableCountry` mutation. */
export type UpdateDataTableCountryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableCountry` being updated. */
  patch: DataTableCountryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableDosageFormByNodeId` mutation. */
export type UpdateDataTableDosageFormByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableDosageForm` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableDosageForm` being updated. */
  patch: DataTableDosageFormPatch;
};

/** Represents an update to a `DataTableDosageForm`. Fields that are set will be updated. */
export type DataTableDosageFormPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableDosageForm` mutation. */
export type UpdateDataTableDosageFormPayload = {
  __typename?: 'UpdateDataTableDosageFormPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableDosageForm` that was updated by this mutation. */
  dataTableDosageForm?: Maybe<DataTableDosageForm>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableDosageForm`. May be used by Relay 1. */
  dataTableDosageFormEdge?: Maybe<DataTableDosageFormsEdge>;
};


/** The output of our update `DataTableDosageForm` mutation. */
export type UpdateDataTableDosageFormPayloadDataTableDosageFormEdgeArgs = {
  orderBy?: Maybe<Array<DataTableDosageFormsOrderBy>>;
};

/** All input for the `updateDataTableDosageForm` mutation. */
export type UpdateDataTableDosageFormInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableDosageForm` being updated. */
  patch: DataTableDosageFormPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableGenericIngredientByNodeId` mutation. */
export type UpdateDataTableGenericIngredientByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableGenericIngredient` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableGenericIngredient` being updated. */
  patch: DataTableGenericIngredientPatch;
};

/** Represents an update to a `DataTableGenericIngredient`. Fields that are set will be updated. */
export type DataTableGenericIngredientPatch = {
  id?: Maybe<Scalars['Int']>;
  productEn?: Maybe<Scalars['String']>;
  productFr?: Maybe<Scalars['String']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableGenericIngredient` mutation. */
export type UpdateDataTableGenericIngredientPayload = {
  __typename?: 'UpdateDataTableGenericIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableGenericIngredient` that was updated by this mutation. */
  dataTableGenericIngredient?: Maybe<DataTableGenericIngredient>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableGenericIngredient`. May be used by Relay 1. */
  dataTableGenericIngredientEdge?: Maybe<DataTableGenericIngredientsEdge>;
};


/** The output of our update `DataTableGenericIngredient` mutation. */
export type UpdateDataTableGenericIngredientPayloadDataTableGenericIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableGenericIngredientsOrderBy>>;
};

/** All input for the `updateDataTableGenericIngredient` mutation. */
export type UpdateDataTableGenericIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableGenericIngredient` being updated. */
  patch: DataTableGenericIngredientPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableIngredientsListByNodeId` mutation. */
export type UpdateDataTableIngredientsListByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableIngredientsList` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableIngredientsList` being updated. */
  patch: DataTableIngredientsListPatch;
};

/** Represents an update to a `DataTableIngredientsList`. Fields that are set will be updated. */
export type DataTableIngredientsListPatch = {
  id?: Maybe<Scalars['Int']>;
  whoAtcId?: Maybe<Scalars['String']>;
  atcCode?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableIngredientsList` mutation. */
export type UpdateDataTableIngredientsListPayload = {
  __typename?: 'UpdateDataTableIngredientsListPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableIngredientsList` that was updated by this mutation. */
  dataTableIngredientsList?: Maybe<DataTableIngredientsList>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableIngredientsList`. May be used by Relay 1. */
  dataTableIngredientsListEdge?: Maybe<DataTableIngredientsListsEdge>;
};


/** The output of our update `DataTableIngredientsList` mutation. */
export type UpdateDataTableIngredientsListPayloadDataTableIngredientsListEdgeArgs = {
  orderBy?: Maybe<Array<DataTableIngredientsListsOrderBy>>;
};

/** All input for the `updateDataTableIngredientsList` mutation. */
export type UpdateDataTableIngredientsListInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableIngredientsList` being updated. */
  patch: DataTableIngredientsListPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableListOfSraByNodeId` mutation. */
export type UpdateDataTableListOfSraByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableListOfSra` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableListOfSra` being updated. */
  patch: DataTableListOfSraPatch;
};

/** Represents an update to a `DataTableListOfSra`. Fields that are set will be updated. */
export type DataTableListOfSraPatch = {
  id?: Maybe<Scalars['Int']>;
  sra?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableListOfSra` mutation. */
export type UpdateDataTableListOfSraPayload = {
  __typename?: 'UpdateDataTableListOfSraPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableListOfSra` that was updated by this mutation. */
  dataTableListOfSra?: Maybe<DataTableListOfSra>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableListOfSra`. May be used by Relay 1. */
  dataTableListOfSraEdge?: Maybe<DataTableListOfSrasEdge>;
};


/** The output of our update `DataTableListOfSra` mutation. */
export type UpdateDataTableListOfSraPayloadDataTableListOfSraEdgeArgs = {
  orderBy?: Maybe<Array<DataTableListOfSrasOrderBy>>;
};

/** All input for the `updateDataTableListOfSra` mutation. */
export type UpdateDataTableListOfSraInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableListOfSra` being updated. */
  patch: DataTableListOfSraPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableProcessingStepByNodeId` mutation. */
export type UpdateDataTableProcessingStepByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProcessingStep` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableProcessingStep` being updated. */
  patch: DataTableProcessingStepPatch;
};

/** Represents an update to a `DataTableProcessingStep`. Fields that are set will be updated. */
export type DataTableProcessingStepPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableProcessingStep` mutation. */
export type UpdateDataTableProcessingStepPayload = {
  __typename?: 'UpdateDataTableProcessingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProcessingStep` that was updated by this mutation. */
  dataTableProcessingStep?: Maybe<DataTableProcessingStep>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProcessingStep`. May be used by Relay 1. */
  dataTableProcessingStepEdge?: Maybe<DataTableProcessingStepsEdge>;
};


/** The output of our update `DataTableProcessingStep` mutation. */
export type UpdateDataTableProcessingStepPayloadDataTableProcessingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProcessingStepsOrderBy>>;
};

/** All input for the `updateDataTableProcessingStep` mutation. */
export type UpdateDataTableProcessingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableProcessingStep` being updated. */
  patch: DataTableProcessingStepPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableProductByNodeId` mutation. */
export type UpdateDataTableProductByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProduct` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableProduct` being updated. */
  patch: DataTableProductPatch;
};

/** The output of our update `DataTableProduct` mutation. */
export type UpdateDataTableProductPayload = {
  __typename?: 'UpdateDataTableProductPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProduct` that was updated by this mutation. */
  dataTableProduct?: Maybe<DataTableProduct>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProduct`. May be used by Relay 1. */
  dataTableProductEdge?: Maybe<DataTableProductsEdge>;
};


/** The output of our update `DataTableProduct` mutation. */
export type UpdateDataTableProductPayloadDataTableProductEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductsOrderBy>>;
};

/** All input for the `updateDataTableProduct` mutation. */
export type UpdateDataTableProductInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableProduct` being updated. */
  patch: DataTableProductPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableProductApplicationJoinByNodeId` mutation. */
export type UpdateDataTableProductApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProductApplicationJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableProductApplicationJoin` being updated. */
  patch: DataTableProductApplicationJoinPatch;
};

/** The output of our update `DataTableProductApplicationJoin` mutation. */
export type UpdateDataTableProductApplicationJoinPayload = {
  __typename?: 'UpdateDataTableProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProductApplicationJoin` that was updated by this mutation. */
  dataTableProductApplicationJoin?: Maybe<DataTableProductApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `DataTableProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `DataTableProduct` that is related to this `DataTableProductApplicationJoin`. */
  dataTableProduct?: Maybe<DataTableProduct>;
  /** An edge for our `DataTableProductApplicationJoin`. May be used by Relay 1. */
  dataTableProductApplicationJoinEdge?: Maybe<DataTableProductApplicationJoinsEdge>;
};


/** The output of our update `DataTableProductApplicationJoin` mutation. */
export type UpdateDataTableProductApplicationJoinPayloadDataTableProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
};

/** All input for the `updateDataTableProductApplicationJoin` mutation. */
export type UpdateDataTableProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableProductApplicationJoin` being updated. */
  patch: DataTableProductApplicationJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableProvinceByNodeId` mutation. */
export type UpdateDataTableProvinceByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProvince` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableProvince` being updated. */
  patch: DataTableProvincePatch;
};

/** Represents an update to a `DataTableProvince`. Fields that are set will be updated. */
export type DataTableProvincePatch = {
  id?: Maybe<Scalars['Int']>;
  area?: Maybe<Scalars['String']>;
  nome?: Maybe<Scalars['String']>;
  codigo?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  comunas?: Maybe<Scalars['String']>;
  populacao?: Maybe<Scalars['String']>;
  municipios?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableProvince` mutation. */
export type UpdateDataTableProvincePayload = {
  __typename?: 'UpdateDataTableProvincePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProvince` that was updated by this mutation. */
  dataTableProvince?: Maybe<DataTableProvince>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProvince`. May be used by Relay 1. */
  dataTableProvinceEdge?: Maybe<DataTableProvincesEdge>;
};


/** The output of our update `DataTableProvince` mutation. */
export type UpdateDataTableProvincePayloadDataTableProvinceEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProvincesOrderBy>>;
};

/** All input for the `updateDataTableProvince` mutation. */
export type UpdateDataTableProvinceInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableProvince` being updated. */
  patch: DataTableProvincePatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableStorageConditionByNodeId` mutation. */
export type UpdateDataTableStorageConditionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableStorageCondition` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableStorageCondition` being updated. */
  patch: DataTableStorageConditionPatch;
};

/** Represents an update to a `DataTableStorageCondition`. Fields that are set will be updated. */
export type DataTableStorageConditionPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  portugueseName?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableStorageCondition` mutation. */
export type UpdateDataTableStorageConditionPayload = {
  __typename?: 'UpdateDataTableStorageConditionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableStorageCondition` that was updated by this mutation. */
  dataTableStorageCondition?: Maybe<DataTableStorageCondition>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableStorageCondition`. May be used by Relay 1. */
  dataTableStorageConditionEdge?: Maybe<DataTableStorageConditionsEdge>;
};


/** The output of our update `DataTableStorageCondition` mutation. */
export type UpdateDataTableStorageConditionPayloadDataTableStorageConditionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableStorageConditionsOrderBy>>;
};

/** All input for the `updateDataTableStorageCondition` mutation. */
export type UpdateDataTableStorageConditionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableStorageCondition` being updated. */
  patch: DataTableStorageConditionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataTableUnitsOfProportionByNodeId` mutation. */
export type UpdateDataTableUnitsOfProportionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableUnitsOfProportion` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataTableUnitsOfProportion` being updated. */
  patch: DataTableUnitsOfProportionPatch;
};

/** Represents an update to a `DataTableUnitsOfProportion`. Fields that are set will be updated. */
export type DataTableUnitsOfProportionPatch = {
  id?: Maybe<Scalars['Int']>;
  code?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
};

/** The output of our update `DataTableUnitsOfProportion` mutation. */
export type UpdateDataTableUnitsOfProportionPayload = {
  __typename?: 'UpdateDataTableUnitsOfProportionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableUnitsOfProportion` that was updated by this mutation. */
  dataTableUnitsOfProportion?: Maybe<DataTableUnitsOfProportion>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableUnitsOfProportion`. May be used by Relay 1. */
  dataTableUnitsOfProportionEdge?: Maybe<DataTableUnitsOfProportionsEdge>;
};


/** The output of our update `DataTableUnitsOfProportion` mutation. */
export type UpdateDataTableUnitsOfProportionPayloadDataTableUnitsOfProportionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableUnitsOfProportionsOrderBy>>;
};

/** All input for the `updateDataTableUnitsOfProportion` mutation. */
export type UpdateDataTableUnitsOfProportionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataTableUnitsOfProportion` being updated. */
  patch: DataTableUnitsOfProportionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataViewByNodeId` mutation. */
export type UpdateDataViewByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataView` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataView` being updated. */
  patch: DataViewPatch;
};

/** Represents an update to a `DataView`. Fields that are set will be updated. */
export type DataViewPatch = {
  id?: Maybe<Scalars['Int']>;
  tableName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  permissionNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  rowRestrictions?: Maybe<Scalars['JSON']>;
  tableViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  tableSearchColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  detailViewHeaderColumn?: Maybe<Scalars['String']>;
  filterIncludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  filterExcludeColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  showLinkedApplications?: Maybe<Scalars['Boolean']>;
  priority?: Maybe<Scalars['Int']>;
  defaultSortColumn?: Maybe<Scalars['String']>;
};

/** The output of our update `DataView` mutation. */
export type UpdateDataViewPayload = {
  __typename?: 'UpdateDataViewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataView` that was updated by this mutation. */
  dataView?: Maybe<DataView>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
};


/** The output of our update `DataView` mutation. */
export type UpdateDataViewPayloadDataViewEdgeArgs = {
  orderBy?: Maybe<Array<DataViewsOrderBy>>;
};

/** All input for the `updateDataView` mutation. */
export type UpdateDataViewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataView` being updated. */
  patch: DataViewPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataViewColumnDefinitionByNodeId` mutation. */
export type UpdateDataViewColumnDefinitionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataViewColumnDefinition` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
};

/** Represents an update to a `DataViewColumnDefinition`. Fields that are set will be updated. */
export type DataViewColumnDefinitionPatch = {
  id?: Maybe<Scalars['Int']>;
  tableName?: Maybe<Scalars['String']>;
  columnName?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  elementTypePluginCode?: Maybe<Scalars['String']>;
  elementParameters?: Maybe<Scalars['JSON']>;
  additionalFormatting?: Maybe<Scalars['JSON']>;
  valueExpression?: Maybe<Scalars['JSON']>;
  sortColumn?: Maybe<Scalars['String']>;
  filterParameters?: Maybe<Scalars['JSON']>;
  filterExpression?: Maybe<Scalars['JSON']>;
  filterDataType?: Maybe<Scalars['String']>;
};

/** The output of our update `DataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionPayload = {
  __typename?: 'UpdateDataViewColumnDefinitionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataViewColumnDefinition` that was updated by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
};


/** The output of our update `DataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: Maybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the `updateDataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateDataViewColumnDefinitionByTableNameAndColumnName` mutation. */
export type UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
  tableName: Scalars['String'];
  columnName: Scalars['String'];
};

/** All input for the `updateElementTypePluginByNodeId` mutation. */
export type UpdateElementTypePluginByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ElementTypePlugin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ElementTypePlugin` being updated. */
  patch: ElementTypePluginPatch;
};

/** Represents an update to a `ElementTypePlugin`. Fields that are set will be updated. */
export type ElementTypePluginPatch = {
  code?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  category?: Maybe<TemplateElementCategory>;
  path?: Maybe<Scalars['String']>;
  displayComponentName?: Maybe<Scalars['String']>;
  configComponentName?: Maybe<Scalars['String']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The output of our update `ElementTypePlugin` mutation. */
export type UpdateElementTypePluginPayload = {
  __typename?: 'UpdateElementTypePluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ElementTypePlugin` that was updated by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
};


/** The output of our update `ElementTypePlugin` mutation. */
export type UpdateElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: Maybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the `updateElementTypePlugin` mutation. */
export type UpdateElementTypePluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ElementTypePlugin` being updated. */
  patch: ElementTypePluginPatch;
  code: Scalars['String'];
};

/** All input for the `updateFileByNodeId` mutation. */
export type UpdateFileByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `File` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
};

/** The output of our update `File` mutation. */
export type UpdateFilePayload = {
  __typename?: 'UpdateFilePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `File` that was updated by this mutation. */
  file?: Maybe<File>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `File`. */
  user?: Maybe<User>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
};


/** The output of our update `File` mutation. */
export type UpdateFilePayloadFileEdgeArgs = {
  orderBy?: Maybe<Array<FilesOrderBy>>;
};

/** All input for the `updateFile` mutation. */
export type UpdateFileInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
  id: Scalars['Int'];
};

/** All input for the `updateFileByUniqueId` mutation. */
export type UpdateFileByUniqueIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
  uniqueId: Scalars['String'];
};

/** All input for the `updateFilterByNodeId` mutation. */
export type UpdateFilterByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Filter` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
};

/** The output of our update `Filter` mutation. */
export type UpdateFilterPayload = {
  __typename?: 'UpdateFilterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Filter` that was updated by this mutation. */
  filter?: Maybe<Filter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
};


/** The output of our update `Filter` mutation. */
export type UpdateFilterPayloadFilterEdgeArgs = {
  orderBy?: Maybe<Array<FiltersOrderBy>>;
};

/** All input for the `updateFilter` mutation. */
export type UpdateFilterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
  id: Scalars['Int'];
};

/** All input for the `updateFilterByCode` mutation. */
export type UpdateFilterByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
  code: Scalars['String'];
};

/** All input for the `updateNotificationByNodeId` mutation. */
export type UpdateNotificationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Notification` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Notification` being updated. */
  patch: NotificationPatch;
};

/** The output of our update `Notification` mutation. */
export type UpdateNotificationPayload = {
  __typename?: 'UpdateNotificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Notification` that was updated by this mutation. */
  notification?: Maybe<Notification>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `Notification`. */
  user?: Maybe<User>;
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
};


/** The output of our update `Notification` mutation. */
export type UpdateNotificationPayloadNotificationEdgeArgs = {
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
};

/** All input for the `updateNotification` mutation. */
export type UpdateNotificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Notification` being updated. */
  patch: NotificationPatch;
  id: Scalars['Int'];
};

/** All input for the `updateOrganisationByNodeId` mutation. */
export type UpdateOrganisationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Organisation` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
};

/** The output of our update `Organisation` mutation. */
export type UpdateOrganisationPayload = {
  __typename?: 'UpdateOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Organisation` that was updated by this mutation. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
};


/** The output of our update `Organisation` mutation. */
export type UpdateOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationsOrderBy>>;
};

/** All input for the `updateOrganisation` mutation. */
export type UpdateOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
  id: Scalars['Int'];
};

/** All input for the `updateOrganisationByName` mutation. */
export type UpdateOrganisationByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
  name: Scalars['String'];
};

/** All input for the `updateOrganisationByRegistration` mutation. */
export type UpdateOrganisationByRegistrationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
  registration: Scalars['String'];
};

/** All input for the `updateOrganisationApplicationJoinByNodeId` mutation. */
export type UpdateOrganisationApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `OrganisationApplicationJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `OrganisationApplicationJoin` being updated. */
  patch: OrganisationApplicationJoinPatch;
};

/** The output of our update `OrganisationApplicationJoin` mutation. */
export type UpdateOrganisationApplicationJoinPayload = {
  __typename?: 'UpdateOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganisationApplicationJoin` that was updated by this mutation. */
  organisationApplicationJoin?: Maybe<OrganisationApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `OrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `Organisation` that is related to this `OrganisationApplicationJoin`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `OrganisationApplicationJoin`. May be used by Relay 1. */
  organisationApplicationJoinEdge?: Maybe<OrganisationApplicationJoinsEdge>;
};


/** The output of our update `OrganisationApplicationJoin` mutation. */
export type UpdateOrganisationApplicationJoinPayloadOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
};

/** All input for the `updateOrganisationApplicationJoin` mutation. */
export type UpdateOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `OrganisationApplicationJoin` being updated. */
  patch: OrganisationApplicationJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updatePermissionJoinByNodeId` mutation. */
export type UpdatePermissionJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `PermissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The output of our update `PermissionJoin` mutation. */
export type UpdatePermissionJoinPayload = {
  __typename?: 'UpdatePermissionJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionJoin` that was updated by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `PermissionJoin`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
};


/** The output of our update `PermissionJoin` mutation. */
export type UpdatePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the `updatePermissionJoin` mutation. */
export type UpdatePermissionJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `PermissionJoin` being updated. */
  patch: PermissionJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updatePermissionNameByNodeId` mutation. */
export type UpdatePermissionNameByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionName` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The output of our update `PermissionName` mutation. */
export type UpdatePermissionNamePayload = {
  __typename?: 'UpdatePermissionNamePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionName` that was updated by this mutation. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
};


/** The output of our update `PermissionName` mutation. */
export type UpdatePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: Maybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the `updatePermissionName` mutation. */
export type UpdatePermissionNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
  id: Scalars['Int'];
};

/** All input for the `updatePermissionNameByName` mutation. */
export type UpdatePermissionNameByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
  name: Scalars['String'];
};

/** All input for the `updatePermissionPolicyByNodeId` mutation. */
export type UpdatePermissionPolicyByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionPolicy` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** The output of our update `PermissionPolicy` mutation. */
export type UpdatePermissionPolicyPayload = {
  __typename?: 'UpdatePermissionPolicyPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionPolicy` that was updated by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
};


/** The output of our update `PermissionPolicy` mutation. */
export type UpdatePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: Maybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the `updatePermissionPolicy` mutation. */
export type UpdatePermissionPolicyInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
  id: Scalars['Int'];
};

/** All input for the `updatePermissionPolicyByName` mutation. */
export type UpdatePermissionPolicyByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
  name: Scalars['String'];
};

/** All input for the `updateProductApplicationJoinByNodeId` mutation. */
export type UpdateProductApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ProductApplicationJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ProductApplicationJoin` being updated. */
  patch: ProductApplicationJoinPatch;
};

/** The output of our update `ProductApplicationJoin` mutation. */
export type UpdateProductApplicationJoinPayload = {
  __typename?: 'UpdateProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ProductApplicationJoin` that was updated by this mutation. */
  productApplicationJoin?: Maybe<ProductApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** An edge for our `ProductApplicationJoin`. May be used by Relay 1. */
  productApplicationJoinEdge?: Maybe<ProductApplicationJoinsEdge>;
};


/** The output of our update `ProductApplicationJoin` mutation. */
export type UpdateProductApplicationJoinPayloadProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<ProductApplicationJoinsOrderBy>>;
};

/** All input for the `updateProductApplicationJoin` mutation. */
export type UpdateProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ProductApplicationJoin` being updated. */
  patch: ProductApplicationJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewByNodeId` mutation. */
export type UpdateReviewByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Review` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Review` being updated. */
  patch: ReviewPatch;
};

/** The output of our update `Review` mutation. */
export type UpdateReviewPayload = {
  __typename?: 'UpdateReviewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Review` that was updated by this mutation. */
  review?: Maybe<Review>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `Review`. */
  reviewer?: Maybe<User>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
};


/** The output of our update `Review` mutation. */
export type UpdateReviewPayloadReviewEdgeArgs = {
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
};

/** All input for the `updateReview` mutation. */
export type UpdateReviewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Review` being updated. */
  patch: ReviewPatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewAssignmentByNodeId` mutation. */
export type UpdateReviewAssignmentByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignment` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ReviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The output of our update `ReviewAssignment` mutation. */
export type UpdateReviewAssignmentPayload = {
  __typename?: 'UpdateReviewAssignmentPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignment` that was updated by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<User>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
};


/** The output of our update `ReviewAssignment` mutation. */
export type UpdateReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the `updateReviewAssignment` mutation. */
export type UpdateReviewAssignmentInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ReviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewAssignmentAssignerJoinByNodeId` mutation. */
export type UpdateReviewAssignmentAssignerJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignmentAssignerJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ReviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The output of our update `ReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinPayload = {
  __typename?: 'UpdateReviewAssignmentAssignerJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignmentAssignerJoin` that was updated by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our update `ReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the `updateReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ReviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewDecisionByNodeId` mutation. */
export type UpdateReviewDecisionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewDecision` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ReviewDecision` being updated. */
  patch: ReviewDecisionPatch;
};

/** The output of our update `ReviewDecision` mutation. */
export type UpdateReviewDecisionPayload = {
  __typename?: 'UpdateReviewDecisionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewDecision` that was updated by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our update `ReviewDecision` mutation. */
export type UpdateReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: Maybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the `updateReviewDecision` mutation. */
export type UpdateReviewDecisionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ReviewDecision` being updated. */
  patch: ReviewDecisionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewResponseByNodeId` mutation. */
export type UpdateReviewResponseByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewResponse` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ReviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The output of our update `ReviewResponse` mutation. */
export type UpdateReviewResponsePayload = {
  __typename?: 'UpdateReviewResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewResponse` that was updated by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
};


/** The output of our update `ReviewResponse` mutation. */
export type UpdateReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the `updateReviewResponse` mutation. */
export type UpdateReviewResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ReviewResponse` being updated. */
  patch: ReviewResponsePatch;
  id: Scalars['Int'];
};

/** All input for the `updateReviewStatusHistoryByNodeId` mutation. */
export type UpdateReviewStatusHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewStatusHistory` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `ReviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
};

/** The output of our update `ReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryPayload = {
  __typename?: 'UpdateReviewStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewStatusHistory` that was updated by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our update `ReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the `updateReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `ReviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateSystemInfoByNodeId` mutation. */
export type UpdateSystemInfoByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SystemInfo` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `SystemInfo` being updated. */
  patch: SystemInfoPatch;
};

/** Represents an update to a `SystemInfo`. Fields that are set will be updated. */
export type SystemInfoPatch = {
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['JSON']>;
  timestamp?: Maybe<Scalars['Datetime']>;
};

/** The output of our update `SystemInfo` mutation. */
export type UpdateSystemInfoPayload = {
  __typename?: 'UpdateSystemInfoPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SystemInfo` that was updated by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our update `SystemInfo` mutation. */
export type UpdateSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: Maybe<Array<SystemInfosOrderBy>>;
};

/** All input for the `updateSystemInfo` mutation. */
export type UpdateSystemInfoInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `SystemInfo` being updated. */
  patch: SystemInfoPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateByNodeId` mutation. */
export type UpdateTemplateByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Template` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Template` being updated. */
  patch: TemplatePatch;
};

/** The output of our update `Template` mutation. */
export type UpdateTemplatePayload = {
  __typename?: 'UpdateTemplatePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Template` that was updated by this mutation. */
  template?: Maybe<Template>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our update `Template` mutation. */
export type UpdateTemplatePayloadTemplateEdgeArgs = {
  orderBy?: Maybe<Array<TemplatesOrderBy>>;
};

/** All input for the `updateTemplate` mutation. */
export type UpdateTemplateInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Template` being updated. */
  patch: TemplatePatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateActionByNodeId` mutation. */
export type UpdateTemplateActionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateAction` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateAction` being updated. */
  patch: TemplateActionPatch;
};

/** The output of our update `TemplateAction` mutation. */
export type UpdateTemplateActionPayload = {
  __typename?: 'UpdateTemplateActionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateAction` that was updated by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our update `TemplateAction` mutation. */
export type UpdateTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the `updateTemplateAction` mutation. */
export type UpdateTemplateActionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateAction` being updated. */
  patch: TemplateActionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateCategoryByNodeId` mutation. */
export type UpdateTemplateCategoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateCategory` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** The output of our update `TemplateCategory` mutation. */
export type UpdateTemplateCategoryPayload = {
  __typename?: 'UpdateTemplateCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateCategory` that was updated by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our update `TemplateCategory` mutation. */
export type UpdateTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: Maybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the `updateTemplateCategory` mutation. */
export type UpdateTemplateCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateCategoryByCode` mutation. */
export type UpdateTemplateCategoryByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
  code: Scalars['String'];
};

/** All input for the `updateTemplateElementByNodeId` mutation. */
export type UpdateTemplateElementByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateElement` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The output of our update `TemplateElement` mutation. */
export type UpdateTemplateElementPayload = {
  __typename?: 'UpdateTemplateElementPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateElement` that was updated by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our update `TemplateElement` mutation. */
export type UpdateTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: Maybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the `updateTemplateElement` mutation. */
export type UpdateTemplateElementInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateElementByTemplateCodeAndCodeAndTemplateVersion` mutation. */
export type UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** All input for the `updateTemplateFilterJoinByNodeId` mutation. */
export type UpdateTemplateFilterJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateFilterJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** The output of our update `TemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinPayload = {
  __typename?: 'UpdateTemplateFilterJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateFilterJoin` that was updated by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our update `TemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the `updateTemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplatePermissionByNodeId` mutation. */
export type UpdateTemplatePermissionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplatePermission` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** The output of our update `TemplatePermission` mutation. */
export type UpdateTemplatePermissionPayload = {
  __typename?: 'UpdateTemplatePermissionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplatePermission` that was updated by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our update `TemplatePermission` mutation. */
export type UpdateTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the `updateTemplatePermission` mutation. */
export type UpdateTemplatePermissionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplatePermission` being updated. */
  patch: TemplatePermissionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateSectionByNodeId` mutation. */
export type UpdateTemplateSectionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateSection` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** The output of our update `TemplateSection` mutation. */
export type UpdateTemplateSectionPayload = {
  __typename?: 'UpdateTemplateSectionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateSection` that was updated by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our update `TemplateSection` mutation. */
export type UpdateTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the `updateTemplateSection` mutation. */
export type UpdateTemplateSectionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateSectionByTemplateIdAndCode` mutation. */
export type UpdateTemplateSectionByTemplateIdAndCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** All input for the `updateTemplateStageByNodeId` mutation. */
export type UpdateTemplateStageByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateStage` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The output of our update `TemplateStage` mutation. */
export type UpdateTemplateStagePayload = {
  __typename?: 'UpdateTemplateStagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStage` that was updated by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our update `TemplateStage` mutation. */
export type UpdateTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the `updateTemplateStage` mutation. */
export type UpdateTemplateStageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateStage` being updated. */
  patch: TemplateStagePatch;
  id: Scalars['Int'];
};

/** All input for the `updateTemplateStageReviewLevelByNodeId` mutation. */
export type UpdateTemplateStageReviewLevelByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateStageReviewLevel` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TemplateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** The output of our update `TemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelPayload = {
  __typename?: 'UpdateTemplateStageReviewLevelPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStageReviewLevel` that was updated by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our update `TemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the `updateTemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TemplateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
  id: Scalars['Int'];
};

/** All input for the `updateTriggerQueueByNodeId` mutation. */
export type UpdateTriggerQueueByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TriggerQueue` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TriggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** The output of our update `TriggerQueue` mutation. */
export type UpdateTriggerQueuePayload = {
  __typename?: 'UpdateTriggerQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerQueue` that was updated by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our update `TriggerQueue` mutation. */
export type UpdateTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: Maybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the `updateTriggerQueue` mutation. */
export type UpdateTriggerQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TriggerQueue` being updated. */
  patch: TriggerQueuePatch;
  id: Scalars['Int'];
};

/** All input for the `updateTriggerScheduleByNodeId` mutation. */
export type UpdateTriggerScheduleByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TriggerSchedule` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `TriggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The output of our update `TriggerSchedule` mutation. */
export type UpdateTriggerSchedulePayload = {
  __typename?: 'UpdateTriggerSchedulePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerSchedule` that was updated by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `TriggerSchedule`. */
  editorUser?: Maybe<User>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our update `TriggerSchedule` mutation. */
export type UpdateTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the `updateTriggerSchedule` mutation. */
export type UpdateTriggerScheduleInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `TriggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
  id: Scalars['Int'];
};

/** All input for the `updateUserByNodeId` mutation. */
export type UpdateUserByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
};

/** The output of our update `User` mutation. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` that was updated by this mutation. */
  user?: Maybe<User>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our update `User` mutation. */
export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
  id: Scalars['Int'];
};

/** All input for the `updateUserByUsername` mutation. */
export type UpdateUserByUsernameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `User` being updated. */
  patch: UserPatch;
  username: Scalars['String'];
};

/** All input for the `updateUserApplicationJoinByNodeId` mutation. */
export type UpdateUserApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserApplicationJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserApplicationJoin` being updated. */
  patch: UserApplicationJoinPatch;
};

/** The output of our update `UserApplicationJoin` mutation. */
export type UpdateUserApplicationJoinPayload = {
  __typename?: 'UpdateUserApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserApplicationJoin` that was updated by this mutation. */
  userApplicationJoin?: Maybe<UserApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `UserApplicationJoin`. */
  user?: Maybe<User>;
  /** An edge for our `UserApplicationJoin`. May be used by Relay 1. */
  userApplicationJoinEdge?: Maybe<UserApplicationJoinsEdge>;
};


/** The output of our update `UserApplicationJoin` mutation. */
export type UpdateUserApplicationJoinPayloadUserApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
};

/** All input for the `updateUserApplicationJoin` mutation. */
export type UpdateUserApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserApplicationJoin` being updated. */
  patch: UserApplicationJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateUserOrganisationByNodeId` mutation. */
export type UpdateUserOrganisationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserOrganisation` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** The output of our update `UserOrganisation` mutation. */
export type UpdateUserOrganisationPayload = {
  __typename?: 'UpdateUserOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisation` that was updated by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our update `UserOrganisation` mutation. */
export type UpdateUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
};

/** All input for the `updateUserOrganisation` mutation. */
export type UpdateUserOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
  id: Scalars['Int'];
};

/** All input for the `updateUserOrganisationByUserIdAndOrganisationId` mutation. */
export type UpdateUserOrganisationByUserIdAndOrganisationIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** All input for the `updateUserOrganisationApplicationJoinByNodeId` mutation. */
export type UpdateUserOrganisationApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserOrganisationApplicationJoin` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `UserOrganisationApplicationJoin` being updated. */
  patch: UserOrganisationApplicationJoinPatch;
};

/** The output of our update `UserOrganisationApplicationJoin` mutation. */
export type UpdateUserOrganisationApplicationJoinPayload = {
  __typename?: 'UpdateUserOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisationApplicationJoin` that was updated by this mutation. */
  userOrganisationApplicationJoin?: Maybe<UserOrganisationApplicationJoin>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserOrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `UserOrganisation` that is related to this `UserOrganisationApplicationJoin`. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisationApplicationJoin`. May be used by Relay 1. */
  userOrganisationApplicationJoinEdge?: Maybe<UserOrganisationApplicationJoinsEdge>;
};


/** The output of our update `UserOrganisationApplicationJoin` mutation. */
export type UpdateUserOrganisationApplicationJoinPayloadUserOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
};

/** All input for the `updateUserOrganisationApplicationJoin` mutation. */
export type UpdateUserOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `UserOrganisationApplicationJoin` being updated. */
  patch: UserOrganisationApplicationJoinPatch;
  id: Scalars['Int'];
};

/** All input for the `updateVerificationByNodeId` mutation. */
export type UpdateVerificationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Verification` to be updated. */
  nodeId: Scalars['ID'];
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
};

/** The output of our update `Verification` mutation. */
export type UpdateVerificationPayload = {
  __typename?: 'UpdateVerificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Verification` that was updated by this mutation. */
  verification?: Maybe<Verification>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our update `Verification` mutation. */
export type UpdateVerificationPayloadVerificationEdgeArgs = {
  orderBy?: Maybe<Array<VerificationsOrderBy>>;
};

/** All input for the `updateVerification` mutation. */
export type UpdateVerificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
  id: Scalars['Int'];
};

/** All input for the `updateVerificationByUniqueId` mutation. */
export type UpdateVerificationByUniqueIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
  uniqueId: Scalars['String'];
};

/** All input for the `deleteActionPluginByNodeId` mutation. */
export type DeleteActionPluginByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActionPlugin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ActionPlugin` mutation. */
export type DeleteActionPluginPayload = {
  __typename?: 'DeleteActionPluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionPlugin` that was deleted by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  deletedActionPluginNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
};


/** The output of our delete `ActionPlugin` mutation. */
export type DeleteActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: Maybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the `deleteActionPlugin` mutation. */
export type DeleteActionPluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteActionPluginByCode` mutation. */
export type DeleteActionPluginByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  code: Scalars['String'];
};

/** All input for the `deleteActionQueueByNodeId` mutation. */
export type DeleteActionQueueByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActionQueue` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ActionQueue` mutation. */
export type DeleteActionQueuePayload = {
  __typename?: 'DeleteActionQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActionQueue` that was deleted by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  deletedActionQueueNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
};


/** The output of our delete `ActionQueue` mutation. */
export type DeleteActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: Maybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the `deleteActionQueue` mutation. */
export type DeleteActionQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteActivityLogByNodeId` mutation. */
export type DeleteActivityLogByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ActivityLog` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ActivityLog` mutation. */
export type DeleteActivityLogPayload = {
  __typename?: 'DeleteActivityLogPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ActivityLog` that was deleted by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  deletedActivityLogNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
};


/** The output of our delete `ActivityLog` mutation. */
export type DeleteActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: Maybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the `deleteActivityLog` mutation. */
export type DeleteActivityLogInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteApplicationByNodeId` mutation. */
export type DeleteApplicationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Application` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Application` mutation. */
export type DeleteApplicationPayload = {
  __typename?: 'DeleteApplicationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Application` that was deleted by this mutation. */
  application?: Maybe<Application>;
  deletedApplicationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `Application`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
};


/** The output of our delete `Application` mutation. */
export type DeleteApplicationPayloadApplicationEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationsOrderBy>>;
};

/** All input for the `deleteApplication` mutation. */
export type DeleteApplicationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteApplicationBySerial` mutation. */
export type DeleteApplicationBySerialInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  serial: Scalars['String'];
};

/** All input for the `deleteApplicationNoteByNodeId` mutation. */
export type DeleteApplicationNoteByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationNote` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ApplicationNote` mutation. */
export type DeleteApplicationNotePayload = {
  __typename?: 'DeleteApplicationNotePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationNote` that was deleted by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  deletedApplicationNoteNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `ApplicationNote`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
};


/** The output of our delete `ApplicationNote` mutation. */
export type DeleteApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationNotesOrderBy>>;
};

/** All input for the `deleteApplicationNote` mutation. */
export type DeleteApplicationNoteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteApplicationResponseByNodeId` mutation. */
export type DeleteApplicationResponseByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationResponse` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ApplicationResponse` mutation. */
export type DeleteApplicationResponsePayload = {
  __typename?: 'DeleteApplicationResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationResponse` that was deleted by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  deletedApplicationResponseNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
};


/** The output of our delete `ApplicationResponse` mutation. */
export type DeleteApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the `deleteApplicationResponse` mutation. */
export type DeleteApplicationResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteApplicationStageHistoryByNodeId` mutation. */
export type DeleteApplicationStageHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationStageHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryPayload = {
  __typename?: 'DeleteApplicationStageHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStageHistory` that was deleted by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  deletedApplicationStageHistoryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
};


/** The output of our delete `ApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the `deleteApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteApplicationStatusHistoryByNodeId` mutation. */
export type DeleteApplicationStatusHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryPayload = {
  __typename?: 'DeleteApplicationStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ApplicationStatusHistory` that was deleted by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  deletedApplicationStatusHistoryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
};


/** The output of our delete `ApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the `deleteApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteCounterByNodeId` mutation. */
export type DeleteCounterByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Counter` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Counter` mutation. */
export type DeleteCounterPayload = {
  __typename?: 'DeleteCounterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Counter` that was deleted by this mutation. */
  counter?: Maybe<Counter>;
  deletedCounterNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
};


/** The output of our delete `Counter` mutation. */
export type DeleteCounterPayloadCounterEdgeArgs = {
  orderBy?: Maybe<Array<CountersOrderBy>>;
};

/** All input for the `deleteCounter` mutation. */
export type DeleteCounterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteCounterByName` mutation. */
export type DeleteCounterByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** All input for the `deleteDataTableByNodeId` mutation. */
export type DeleteDataTableByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTable` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTable` mutation. */
export type DeleteDataTablePayload = {
  __typename?: 'DeleteDataTablePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTable` that was deleted by this mutation. */
  dataTable?: Maybe<DataTable>;
  deletedDataTableNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
};


/** The output of our delete `DataTable` mutation. */
export type DeleteDataTablePayloadDataTableEdgeArgs = {
  orderBy?: Maybe<Array<DataTablesOrderBy>>;
};

/** All input for the `deleteDataTable` mutation. */
export type DeleteDataTableInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableByTableName` mutation. */
export type DeleteDataTableByTableNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  tableName: Scalars['String'];
};

/** All input for the `deleteDataTableManufacturingStepByNodeId` mutation. */
export type DeleteDataTableManufacturingStepByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableManufacturingStep` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableManufacturingStep` mutation. */
export type DeleteDataTableManufacturingStepPayload = {
  __typename?: 'DeleteDataTableManufacturingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableManufacturingStep` that was deleted by this mutation. */
  dataTableManufacturingStep?: Maybe<DataTableManufacturingStep>;
  deletedDataTableManufacturingStepNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableManufacturingStep`. May be used by Relay 1. */
  dataTableManufacturingStepEdge?: Maybe<DataTableManufacturingStepsEdge>;
};


/** The output of our delete `DataTableManufacturingStep` mutation. */
export type DeleteDataTableManufacturingStepPayloadDataTableManufacturingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableManufacturingStepsOrderBy>>;
};

/** All input for the `deleteDataTableManufacturingStep` mutation. */
export type DeleteDataTableManufacturingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableActiveIngredientByNodeId` mutation. */
export type DeleteDataTableActiveIngredientByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableActiveIngredient` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableActiveIngredient` mutation. */
export type DeleteDataTableActiveIngredientPayload = {
  __typename?: 'DeleteDataTableActiveIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableActiveIngredient` that was deleted by this mutation. */
  dataTableActiveIngredient?: Maybe<DataTableActiveIngredient>;
  deletedDataTableActiveIngredientNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableActiveIngredient`. May be used by Relay 1. */
  dataTableActiveIngredientEdge?: Maybe<DataTableActiveIngredientsEdge>;
};


/** The output of our delete `DataTableActiveIngredient` mutation. */
export type DeleteDataTableActiveIngredientPayloadDataTableActiveIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableActiveIngredientsOrderBy>>;
};

/** All input for the `deleteDataTableActiveIngredient` mutation. */
export type DeleteDataTableActiveIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableAdministrationRouteByNodeId` mutation. */
export type DeleteDataTableAdministrationRouteByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAdministrationRoute` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableAdministrationRoute` mutation. */
export type DeleteDataTableAdministrationRoutePayload = {
  __typename?: 'DeleteDataTableAdministrationRoutePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAdministrationRoute` that was deleted by this mutation. */
  dataTableAdministrationRoute?: Maybe<DataTableAdministrationRoute>;
  deletedDataTableAdministrationRouteNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAdministrationRoute`. May be used by Relay 1. */
  dataTableAdministrationRouteEdge?: Maybe<DataTableAdministrationRoutesEdge>;
};


/** The output of our delete `DataTableAdministrationRoute` mutation. */
export type DeleteDataTableAdministrationRoutePayloadDataTableAdministrationRouteEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAdministrationRoutesOrderBy>>;
};

/** All input for the `deleteDataTableAdministrationRoute` mutation. */
export type DeleteDataTableAdministrationRouteInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableAnnexByNodeId` mutation. */
export type DeleteDataTableAnnexByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAnnex` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableAnnex` mutation. */
export type DeleteDataTableAnnexPayload = {
  __typename?: 'DeleteDataTableAnnexPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex` that was deleted by this mutation. */
  dataTableAnnex?: Maybe<DataTableAnnex>;
  deletedDataTableAnnexNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex`. May be used by Relay 1. */
  dataTableAnnexEdge?: Maybe<DataTableAnnexesEdge>;
};


/** The output of our delete `DataTableAnnex` mutation. */
export type DeleteDataTableAnnexPayloadDataTableAnnexEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnexesOrderBy>>;
};

/** All input for the `deleteDataTableAnnex` mutation. */
export type DeleteDataTableAnnexInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableAnnex2ByNodeId` mutation. */
export type DeleteDataTableAnnex2ByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAnnex2` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableAnnex2` mutation. */
export type DeleteDataTableAnnex2Payload = {
  __typename?: 'DeleteDataTableAnnex2Payload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAnnex2` that was deleted by this mutation. */
  dataTableAnnex2?: Maybe<DataTableAnnex2>;
  deletedDataTableAnnex2NodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAnnex2`. May be used by Relay 1. */
  dataTableAnnex2Edge?: Maybe<DataTableAnnex2sEdge>;
};


/** The output of our delete `DataTableAnnex2` mutation. */
export type DeleteDataTableAnnex2PayloadDataTableAnnex2EdgeArgs = {
  orderBy?: Maybe<Array<DataTableAnnex2sOrderBy>>;
};

/** All input for the `deleteDataTableAnnex2` mutation. */
export type DeleteDataTableAnnex2Input = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableAtcCodeByNodeId` mutation. */
export type DeleteDataTableAtcCodeByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAtcCode` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableAtcCode` mutation. */
export type DeleteDataTableAtcCodePayload = {
  __typename?: 'DeleteDataTableAtcCodePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcCode` that was deleted by this mutation. */
  dataTableAtcCode?: Maybe<DataTableAtcCode>;
  deletedDataTableAtcCodeNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcCode`. May be used by Relay 1. */
  dataTableAtcCodeEdge?: Maybe<DataTableAtcCodesEdge>;
};


/** The output of our delete `DataTableAtcCode` mutation. */
export type DeleteDataTableAtcCodePayloadDataTableAtcCodeEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcCodesOrderBy>>;
};

/** All input for the `deleteDataTableAtcCode` mutation. */
export type DeleteDataTableAtcCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableAtcTherapeuticCategoryByNodeId` mutation. */
export type DeleteDataTableAtcTherapeuticCategoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableAtcTherapeuticCategory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableAtcTherapeuticCategory` mutation. */
export type DeleteDataTableAtcTherapeuticCategoryPayload = {
  __typename?: 'DeleteDataTableAtcTherapeuticCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableAtcTherapeuticCategory` that was deleted by this mutation. */
  dataTableAtcTherapeuticCategory?: Maybe<DataTableAtcTherapeuticCategory>;
  deletedDataTableAtcTherapeuticCategoryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableAtcTherapeuticCategory`. May be used by Relay 1. */
  dataTableAtcTherapeuticCategoryEdge?: Maybe<DataTableAtcTherapeuticCategoriesEdge>;
};


/** The output of our delete `DataTableAtcTherapeuticCategory` mutation. */
export type DeleteDataTableAtcTherapeuticCategoryPayloadDataTableAtcTherapeuticCategoryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableAtcTherapeuticCategoriesOrderBy>>;
};

/** All input for the `deleteDataTableAtcTherapeuticCategory` mutation. */
export type DeleteDataTableAtcTherapeuticCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableContainerByNodeId` mutation. */
export type DeleteDataTableContainerByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableContainer` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableContainer` mutation. */
export type DeleteDataTableContainerPayload = {
  __typename?: 'DeleteDataTableContainerPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableContainer` that was deleted by this mutation. */
  dataTableContainer?: Maybe<DataTableContainer>;
  deletedDataTableContainerNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableContainer`. May be used by Relay 1. */
  dataTableContainerEdge?: Maybe<DataTableContainersEdge>;
};


/** The output of our delete `DataTableContainer` mutation. */
export type DeleteDataTableContainerPayloadDataTableContainerEdgeArgs = {
  orderBy?: Maybe<Array<DataTableContainersOrderBy>>;
};

/** All input for the `deleteDataTableContainer` mutation. */
export type DeleteDataTableContainerInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableCountryByNodeId` mutation. */
export type DeleteDataTableCountryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableCountry` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableCountry` mutation. */
export type DeleteDataTableCountryPayload = {
  __typename?: 'DeleteDataTableCountryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableCountry` that was deleted by this mutation. */
  dataTableCountry?: Maybe<DataTableCountry>;
  deletedDataTableCountryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableCountry`. May be used by Relay 1. */
  dataTableCountryEdge?: Maybe<DataTableCountriesEdge>;
};


/** The output of our delete `DataTableCountry` mutation. */
export type DeleteDataTableCountryPayloadDataTableCountryEdgeArgs = {
  orderBy?: Maybe<Array<DataTableCountriesOrderBy>>;
};

/** All input for the `deleteDataTableCountry` mutation. */
export type DeleteDataTableCountryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableDosageFormByNodeId` mutation. */
export type DeleteDataTableDosageFormByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableDosageForm` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableDosageForm` mutation. */
export type DeleteDataTableDosageFormPayload = {
  __typename?: 'DeleteDataTableDosageFormPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableDosageForm` that was deleted by this mutation. */
  dataTableDosageForm?: Maybe<DataTableDosageForm>;
  deletedDataTableDosageFormNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableDosageForm`. May be used by Relay 1. */
  dataTableDosageFormEdge?: Maybe<DataTableDosageFormsEdge>;
};


/** The output of our delete `DataTableDosageForm` mutation. */
export type DeleteDataTableDosageFormPayloadDataTableDosageFormEdgeArgs = {
  orderBy?: Maybe<Array<DataTableDosageFormsOrderBy>>;
};

/** All input for the `deleteDataTableDosageForm` mutation. */
export type DeleteDataTableDosageFormInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableGenericIngredientByNodeId` mutation. */
export type DeleteDataTableGenericIngredientByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableGenericIngredient` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableGenericIngredient` mutation. */
export type DeleteDataTableGenericIngredientPayload = {
  __typename?: 'DeleteDataTableGenericIngredientPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableGenericIngredient` that was deleted by this mutation. */
  dataTableGenericIngredient?: Maybe<DataTableGenericIngredient>;
  deletedDataTableGenericIngredientNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableGenericIngredient`. May be used by Relay 1. */
  dataTableGenericIngredientEdge?: Maybe<DataTableGenericIngredientsEdge>;
};


/** The output of our delete `DataTableGenericIngredient` mutation. */
export type DeleteDataTableGenericIngredientPayloadDataTableGenericIngredientEdgeArgs = {
  orderBy?: Maybe<Array<DataTableGenericIngredientsOrderBy>>;
};

/** All input for the `deleteDataTableGenericIngredient` mutation. */
export type DeleteDataTableGenericIngredientInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableIngredientsListByNodeId` mutation. */
export type DeleteDataTableIngredientsListByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableIngredientsList` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableIngredientsList` mutation. */
export type DeleteDataTableIngredientsListPayload = {
  __typename?: 'DeleteDataTableIngredientsListPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableIngredientsList` that was deleted by this mutation. */
  dataTableIngredientsList?: Maybe<DataTableIngredientsList>;
  deletedDataTableIngredientsListNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableIngredientsList`. May be used by Relay 1. */
  dataTableIngredientsListEdge?: Maybe<DataTableIngredientsListsEdge>;
};


/** The output of our delete `DataTableIngredientsList` mutation. */
export type DeleteDataTableIngredientsListPayloadDataTableIngredientsListEdgeArgs = {
  orderBy?: Maybe<Array<DataTableIngredientsListsOrderBy>>;
};

/** All input for the `deleteDataTableIngredientsList` mutation. */
export type DeleteDataTableIngredientsListInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableListOfSraByNodeId` mutation. */
export type DeleteDataTableListOfSraByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableListOfSra` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableListOfSra` mutation. */
export type DeleteDataTableListOfSraPayload = {
  __typename?: 'DeleteDataTableListOfSraPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableListOfSra` that was deleted by this mutation. */
  dataTableListOfSra?: Maybe<DataTableListOfSra>;
  deletedDataTableListOfSraNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableListOfSra`. May be used by Relay 1. */
  dataTableListOfSraEdge?: Maybe<DataTableListOfSrasEdge>;
};


/** The output of our delete `DataTableListOfSra` mutation. */
export type DeleteDataTableListOfSraPayloadDataTableListOfSraEdgeArgs = {
  orderBy?: Maybe<Array<DataTableListOfSrasOrderBy>>;
};

/** All input for the `deleteDataTableListOfSra` mutation. */
export type DeleteDataTableListOfSraInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableProcessingStepByNodeId` mutation. */
export type DeleteDataTableProcessingStepByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProcessingStep` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableProcessingStep` mutation. */
export type DeleteDataTableProcessingStepPayload = {
  __typename?: 'DeleteDataTableProcessingStepPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProcessingStep` that was deleted by this mutation. */
  dataTableProcessingStep?: Maybe<DataTableProcessingStep>;
  deletedDataTableProcessingStepNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProcessingStep`. May be used by Relay 1. */
  dataTableProcessingStepEdge?: Maybe<DataTableProcessingStepsEdge>;
};


/** The output of our delete `DataTableProcessingStep` mutation. */
export type DeleteDataTableProcessingStepPayloadDataTableProcessingStepEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProcessingStepsOrderBy>>;
};

/** All input for the `deleteDataTableProcessingStep` mutation. */
export type DeleteDataTableProcessingStepInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableProductByNodeId` mutation. */
export type DeleteDataTableProductByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProduct` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableProduct` mutation. */
export type DeleteDataTableProductPayload = {
  __typename?: 'DeleteDataTableProductPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProduct` that was deleted by this mutation. */
  dataTableProduct?: Maybe<DataTableProduct>;
  deletedDataTableProductNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProduct`. May be used by Relay 1. */
  dataTableProductEdge?: Maybe<DataTableProductsEdge>;
};


/** The output of our delete `DataTableProduct` mutation. */
export type DeleteDataTableProductPayloadDataTableProductEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductsOrderBy>>;
};

/** All input for the `deleteDataTableProduct` mutation. */
export type DeleteDataTableProductInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableProductApplicationJoinByNodeId` mutation. */
export type DeleteDataTableProductApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProductApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableProductApplicationJoin` mutation. */
export type DeleteDataTableProductApplicationJoinPayload = {
  __typename?: 'DeleteDataTableProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProductApplicationJoin` that was deleted by this mutation. */
  dataTableProductApplicationJoin?: Maybe<DataTableProductApplicationJoin>;
  deletedDataTableProductApplicationJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `DataTableProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `DataTableProduct` that is related to this `DataTableProductApplicationJoin`. */
  dataTableProduct?: Maybe<DataTableProduct>;
  /** An edge for our `DataTableProductApplicationJoin`. May be used by Relay 1. */
  dataTableProductApplicationJoinEdge?: Maybe<DataTableProductApplicationJoinsEdge>;
};


/** The output of our delete `DataTableProductApplicationJoin` mutation. */
export type DeleteDataTableProductApplicationJoinPayloadDataTableProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProductApplicationJoinsOrderBy>>;
};

/** All input for the `deleteDataTableProductApplicationJoin` mutation. */
export type DeleteDataTableProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableProvinceByNodeId` mutation. */
export type DeleteDataTableProvinceByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableProvince` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableProvince` mutation. */
export type DeleteDataTableProvincePayload = {
  __typename?: 'DeleteDataTableProvincePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableProvince` that was deleted by this mutation. */
  dataTableProvince?: Maybe<DataTableProvince>;
  deletedDataTableProvinceNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableProvince`. May be used by Relay 1. */
  dataTableProvinceEdge?: Maybe<DataTableProvincesEdge>;
};


/** The output of our delete `DataTableProvince` mutation. */
export type DeleteDataTableProvincePayloadDataTableProvinceEdgeArgs = {
  orderBy?: Maybe<Array<DataTableProvincesOrderBy>>;
};

/** All input for the `deleteDataTableProvince` mutation. */
export type DeleteDataTableProvinceInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableStorageConditionByNodeId` mutation. */
export type DeleteDataTableStorageConditionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableStorageCondition` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableStorageCondition` mutation. */
export type DeleteDataTableStorageConditionPayload = {
  __typename?: 'DeleteDataTableStorageConditionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableStorageCondition` that was deleted by this mutation. */
  dataTableStorageCondition?: Maybe<DataTableStorageCondition>;
  deletedDataTableStorageConditionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableStorageCondition`. May be used by Relay 1. */
  dataTableStorageConditionEdge?: Maybe<DataTableStorageConditionsEdge>;
};


/** The output of our delete `DataTableStorageCondition` mutation. */
export type DeleteDataTableStorageConditionPayloadDataTableStorageConditionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableStorageConditionsOrderBy>>;
};

/** All input for the `deleteDataTableStorageCondition` mutation. */
export type DeleteDataTableStorageConditionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataTableUnitsOfProportionByNodeId` mutation. */
export type DeleteDataTableUnitsOfProportionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataTableUnitsOfProportion` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataTableUnitsOfProportion` mutation. */
export type DeleteDataTableUnitsOfProportionPayload = {
  __typename?: 'DeleteDataTableUnitsOfProportionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataTableUnitsOfProportion` that was deleted by this mutation. */
  dataTableUnitsOfProportion?: Maybe<DataTableUnitsOfProportion>;
  deletedDataTableUnitsOfProportionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataTableUnitsOfProportion`. May be used by Relay 1. */
  dataTableUnitsOfProportionEdge?: Maybe<DataTableUnitsOfProportionsEdge>;
};


/** The output of our delete `DataTableUnitsOfProportion` mutation. */
export type DeleteDataTableUnitsOfProportionPayloadDataTableUnitsOfProportionEdgeArgs = {
  orderBy?: Maybe<Array<DataTableUnitsOfProportionsOrderBy>>;
};

/** All input for the `deleteDataTableUnitsOfProportion` mutation. */
export type DeleteDataTableUnitsOfProportionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataViewByNodeId` mutation. */
export type DeleteDataViewByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataView` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataView` mutation. */
export type DeleteDataViewPayload = {
  __typename?: 'DeleteDataViewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataView` that was deleted by this mutation. */
  dataView?: Maybe<DataView>;
  deletedDataViewNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
};


/** The output of our delete `DataView` mutation. */
export type DeleteDataViewPayloadDataViewEdgeArgs = {
  orderBy?: Maybe<Array<DataViewsOrderBy>>;
};

/** All input for the `deleteDataView` mutation. */
export type DeleteDataViewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataViewColumnDefinitionByNodeId` mutation. */
export type DeleteDataViewColumnDefinitionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `DataViewColumnDefinition` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `DataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionPayload = {
  __typename?: 'DeleteDataViewColumnDefinitionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `DataViewColumnDefinition` that was deleted by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  deletedDataViewColumnDefinitionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
};


/** The output of our delete `DataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: Maybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the `deleteDataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteDataViewColumnDefinitionByTableNameAndColumnName` mutation. */
export type DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  tableName: Scalars['String'];
  columnName: Scalars['String'];
};

/** All input for the `deleteElementTypePluginByNodeId` mutation. */
export type DeleteElementTypePluginByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ElementTypePlugin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ElementTypePlugin` mutation. */
export type DeleteElementTypePluginPayload = {
  __typename?: 'DeleteElementTypePluginPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ElementTypePlugin` that was deleted by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  deletedElementTypePluginNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
};


/** The output of our delete `ElementTypePlugin` mutation. */
export type DeleteElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: Maybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the `deleteElementTypePlugin` mutation. */
export type DeleteElementTypePluginInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  code: Scalars['String'];
};

/** All input for the `deleteFileByNodeId` mutation. */
export type DeleteFileByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `File` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `File` mutation. */
export type DeleteFilePayload = {
  __typename?: 'DeleteFilePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `File` that was deleted by this mutation. */
  file?: Maybe<File>;
  deletedFileNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `File`. */
  user?: Maybe<User>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
};


/** The output of our delete `File` mutation. */
export type DeleteFilePayloadFileEdgeArgs = {
  orderBy?: Maybe<Array<FilesOrderBy>>;
};

/** All input for the `deleteFile` mutation. */
export type DeleteFileInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteFileByUniqueId` mutation. */
export type DeleteFileByUniqueIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  uniqueId: Scalars['String'];
};

/** All input for the `deleteFilterByNodeId` mutation. */
export type DeleteFilterByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Filter` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Filter` mutation. */
export type DeleteFilterPayload = {
  __typename?: 'DeleteFilterPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Filter` that was deleted by this mutation. */
  filter?: Maybe<Filter>;
  deletedFilterNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
};


/** The output of our delete `Filter` mutation. */
export type DeleteFilterPayloadFilterEdgeArgs = {
  orderBy?: Maybe<Array<FiltersOrderBy>>;
};

/** All input for the `deleteFilter` mutation. */
export type DeleteFilterInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteFilterByCode` mutation. */
export type DeleteFilterByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  code: Scalars['String'];
};

/** All input for the `deleteNotificationByNodeId` mutation. */
export type DeleteNotificationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Notification` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Notification` mutation. */
export type DeleteNotificationPayload = {
  __typename?: 'DeleteNotificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Notification` that was deleted by this mutation. */
  notification?: Maybe<Notification>;
  deletedNotificationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `Notification`. */
  user?: Maybe<User>;
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
};


/** The output of our delete `Notification` mutation. */
export type DeleteNotificationPayloadNotificationEdgeArgs = {
  orderBy?: Maybe<Array<NotificationsOrderBy>>;
};

/** All input for the `deleteNotification` mutation. */
export type DeleteNotificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteOrganisationByNodeId` mutation. */
export type DeleteOrganisationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Organisation` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Organisation` mutation. */
export type DeleteOrganisationPayload = {
  __typename?: 'DeleteOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Organisation` that was deleted by this mutation. */
  organisation?: Maybe<Organisation>;
  deletedOrganisationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
};


/** The output of our delete `Organisation` mutation. */
export type DeleteOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationsOrderBy>>;
};

/** All input for the `deleteOrganisation` mutation. */
export type DeleteOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteOrganisationByName` mutation. */
export type DeleteOrganisationByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** All input for the `deleteOrganisationByRegistration` mutation. */
export type DeleteOrganisationByRegistrationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  registration: Scalars['String'];
};

/** All input for the `deleteOrganisationApplicationJoinByNodeId` mutation. */
export type DeleteOrganisationApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `OrganisationApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `OrganisationApplicationJoin` mutation. */
export type DeleteOrganisationApplicationJoinPayload = {
  __typename?: 'DeleteOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `OrganisationApplicationJoin` that was deleted by this mutation. */
  organisationApplicationJoin?: Maybe<OrganisationApplicationJoin>;
  deletedOrganisationApplicationJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `OrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `Organisation` that is related to this `OrganisationApplicationJoin`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `OrganisationApplicationJoin`. May be used by Relay 1. */
  organisationApplicationJoinEdge?: Maybe<OrganisationApplicationJoinsEdge>;
};


/** The output of our delete `OrganisationApplicationJoin` mutation. */
export type DeleteOrganisationApplicationJoinPayloadOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<OrganisationApplicationJoinsOrderBy>>;
};

/** All input for the `deleteOrganisationApplicationJoin` mutation. */
export type DeleteOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deletePermissionJoinByNodeId` mutation. */
export type DeletePermissionJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `PermissionJoin` mutation. */
export type DeletePermissionJoinPayload = {
  __typename?: 'DeletePermissionJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionJoin` that was deleted by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  deletedPermissionJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `PermissionJoin`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
};


/** The output of our delete `PermissionJoin` mutation. */
export type DeletePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: Maybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the `deletePermissionJoin` mutation. */
export type DeletePermissionJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deletePermissionNameByNodeId` mutation. */
export type DeletePermissionNameByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionName` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `PermissionName` mutation. */
export type DeletePermissionNamePayload = {
  __typename?: 'DeletePermissionNamePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionName` that was deleted by this mutation. */
  permissionName?: Maybe<PermissionName>;
  deletedPermissionNameNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
};


/** The output of our delete `PermissionName` mutation. */
export type DeletePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: Maybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the `deletePermissionName` mutation. */
export type DeletePermissionNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deletePermissionNameByName` mutation. */
export type DeletePermissionNameByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** All input for the `deletePermissionPolicyByNodeId` mutation. */
export type DeletePermissionPolicyByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `PermissionPolicy` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `PermissionPolicy` mutation. */
export type DeletePermissionPolicyPayload = {
  __typename?: 'DeletePermissionPolicyPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `PermissionPolicy` that was deleted by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  deletedPermissionPolicyNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
};


/** The output of our delete `PermissionPolicy` mutation. */
export type DeletePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: Maybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the `deletePermissionPolicy` mutation. */
export type DeletePermissionPolicyInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deletePermissionPolicyByName` mutation. */
export type DeletePermissionPolicyByNameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** All input for the `deleteProductApplicationJoinByNodeId` mutation. */
export type DeleteProductApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ProductApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ProductApplicationJoin` mutation. */
export type DeleteProductApplicationJoinPayload = {
  __typename?: 'DeleteProductApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ProductApplicationJoin` that was deleted by this mutation. */
  productApplicationJoin?: Maybe<ProductApplicationJoin>;
  deletedProductApplicationJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `ProductApplicationJoin`. */
  application?: Maybe<Application>;
  /** An edge for our `ProductApplicationJoin`. May be used by Relay 1. */
  productApplicationJoinEdge?: Maybe<ProductApplicationJoinsEdge>;
};


/** The output of our delete `ProductApplicationJoin` mutation. */
export type DeleteProductApplicationJoinPayloadProductApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<ProductApplicationJoinsOrderBy>>;
};

/** All input for the `deleteProductApplicationJoin` mutation. */
export type DeleteProductApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewByNodeId` mutation. */
export type DeleteReviewByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Review` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Review` mutation. */
export type DeleteReviewPayload = {
  __typename?: 'DeleteReviewPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Review` that was deleted by this mutation. */
  review?: Maybe<Review>;
  deletedReviewNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `Review`. */
  reviewer?: Maybe<User>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
};


/** The output of our delete `Review` mutation. */
export type DeleteReviewPayloadReviewEdgeArgs = {
  orderBy?: Maybe<Array<ReviewsOrderBy>>;
};

/** All input for the `deleteReview` mutation. */
export type DeleteReviewInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewAssignmentByNodeId` mutation. */
export type DeleteReviewAssignmentByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignment` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ReviewAssignment` mutation. */
export type DeleteReviewAssignmentPayload = {
  __typename?: 'DeleteReviewAssignmentPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignment` that was deleted by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  deletedReviewAssignmentNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<User>;
  /** Reads a single `User` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
};


/** The output of our delete `ReviewAssignment` mutation. */
export type DeleteReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the `deleteReviewAssignment` mutation. */
export type DeleteReviewAssignmentInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewAssignmentAssignerJoinByNodeId` mutation. */
export type DeleteReviewAssignmentAssignerJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignmentAssignerJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinPayload = {
  __typename?: 'DeleteReviewAssignmentAssignerJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewAssignmentAssignerJoin` that was deleted by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  deletedReviewAssignmentAssignerJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our delete `ReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: Maybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the `deleteReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewDecisionByNodeId` mutation. */
export type DeleteReviewDecisionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewDecision` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ReviewDecision` mutation. */
export type DeleteReviewDecisionPayload = {
  __typename?: 'DeleteReviewDecisionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewDecision` that was deleted by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  deletedReviewDecisionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our delete `ReviewDecision` mutation. */
export type DeleteReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: Maybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the `deleteReviewDecision` mutation. */
export type DeleteReviewDecisionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewResponseByNodeId` mutation. */
export type DeleteReviewResponseByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewResponse` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ReviewResponse` mutation. */
export type DeleteReviewResponsePayload = {
  __typename?: 'DeleteReviewResponsePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewResponse` that was deleted by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  deletedReviewResponseNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
};


/** The output of our delete `ReviewResponse` mutation. */
export type DeleteReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: Maybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the `deleteReviewResponse` mutation. */
export type DeleteReviewResponseInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteReviewStatusHistoryByNodeId` mutation. */
export type DeleteReviewStatusHistoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `ReviewStatusHistory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `ReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryPayload = {
  __typename?: 'DeleteReviewStatusHistoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `ReviewStatusHistory` that was deleted by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  deletedReviewStatusHistoryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our delete `ReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: Maybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the `deleteReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteSystemInfoByNodeId` mutation. */
export type DeleteSystemInfoByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `SystemInfo` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `SystemInfo` mutation. */
export type DeleteSystemInfoPayload = {
  __typename?: 'DeleteSystemInfoPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `SystemInfo` that was deleted by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  deletedSystemInfoNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our delete `SystemInfo` mutation. */
export type DeleteSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: Maybe<Array<SystemInfosOrderBy>>;
};

/** All input for the `deleteSystemInfo` mutation. */
export type DeleteSystemInfoInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateByNodeId` mutation. */
export type DeleteTemplateByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Template` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Template` mutation. */
export type DeleteTemplatePayload = {
  __typename?: 'DeleteTemplatePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Template` that was deleted by this mutation. */
  template?: Maybe<Template>;
  deletedTemplateNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our delete `Template` mutation. */
export type DeleteTemplatePayloadTemplateEdgeArgs = {
  orderBy?: Maybe<Array<TemplatesOrderBy>>;
};

/** All input for the `deleteTemplate` mutation. */
export type DeleteTemplateInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateActionByNodeId` mutation. */
export type DeleteTemplateActionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateAction` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateAction` mutation. */
export type DeleteTemplateActionPayload = {
  __typename?: 'DeleteTemplateActionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateAction` that was deleted by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  deletedTemplateActionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our delete `TemplateAction` mutation. */
export type DeleteTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the `deleteTemplateAction` mutation. */
export type DeleteTemplateActionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateCategoryByNodeId` mutation. */
export type DeleteTemplateCategoryByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateCategory` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateCategory` mutation. */
export type DeleteTemplateCategoryPayload = {
  __typename?: 'DeleteTemplateCategoryPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateCategory` that was deleted by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  deletedTemplateCategoryNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our delete `TemplateCategory` mutation. */
export type DeleteTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: Maybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the `deleteTemplateCategory` mutation. */
export type DeleteTemplateCategoryInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateCategoryByCode` mutation. */
export type DeleteTemplateCategoryByCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  code: Scalars['String'];
};

/** All input for the `deleteTemplateElementByNodeId` mutation. */
export type DeleteTemplateElementByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateElement` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateElement` mutation. */
export type DeleteTemplateElementPayload = {
  __typename?: 'DeleteTemplateElementPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateElement` that was deleted by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  deletedTemplateElementNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our delete `TemplateElement` mutation. */
export type DeleteTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: Maybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the `deleteTemplateElement` mutation. */
export type DeleteTemplateElementInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateElementByTemplateCodeAndCodeAndTemplateVersion` mutation. */
export type DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  templateCode: Scalars['String'];
  code: Scalars['String'];
  templateVersion: Scalars['Int'];
};

/** All input for the `deleteTemplateFilterJoinByNodeId` mutation. */
export type DeleteTemplateFilterJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateFilterJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinPayload = {
  __typename?: 'DeleteTemplateFilterJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateFilterJoin` that was deleted by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  deletedTemplateFilterJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our delete `TemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: Maybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the `deleteTemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplatePermissionByNodeId` mutation. */
export type DeleteTemplatePermissionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplatePermission` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplatePermission` mutation. */
export type DeleteTemplatePermissionPayload = {
  __typename?: 'DeleteTemplatePermissionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplatePermission` that was deleted by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  deletedTemplatePermissionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our delete `TemplatePermission` mutation. */
export type DeleteTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: Maybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the `deleteTemplatePermission` mutation. */
export type DeleteTemplatePermissionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateSectionByNodeId` mutation. */
export type DeleteTemplateSectionByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateSection` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateSection` mutation. */
export type DeleteTemplateSectionPayload = {
  __typename?: 'DeleteTemplateSectionPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateSection` that was deleted by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  deletedTemplateSectionNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our delete `TemplateSection` mutation. */
export type DeleteTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: Maybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the `deleteTemplateSection` mutation. */
export type DeleteTemplateSectionInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateSectionByTemplateIdAndCode` mutation. */
export type DeleteTemplateSectionByTemplateIdAndCodeInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  templateId: Scalars['Int'];
  code: Scalars['String'];
};

/** All input for the `deleteTemplateStageByNodeId` mutation. */
export type DeleteTemplateStageByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateStage` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateStage` mutation. */
export type DeleteTemplateStagePayload = {
  __typename?: 'DeleteTemplateStagePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStage` that was deleted by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  deletedTemplateStageNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our delete `TemplateStage` mutation. */
export type DeleteTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the `deleteTemplateStage` mutation. */
export type DeleteTemplateStageInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTemplateStageReviewLevelByNodeId` mutation. */
export type DeleteTemplateStageReviewLevelByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TemplateStageReviewLevel` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelPayload = {
  __typename?: 'DeleteTemplateStageReviewLevelPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TemplateStageReviewLevel` that was deleted by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  deletedTemplateStageReviewLevelNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our delete `TemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: Maybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the `deleteTemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTriggerQueueByNodeId` mutation. */
export type DeleteTriggerQueueByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TriggerQueue` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TriggerQueue` mutation. */
export type DeleteTriggerQueuePayload = {
  __typename?: 'DeleteTriggerQueuePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerQueue` that was deleted by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  deletedTriggerQueueNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our delete `TriggerQueue` mutation. */
export type DeleteTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: Maybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the `deleteTriggerQueue` mutation. */
export type DeleteTriggerQueueInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteTriggerScheduleByNodeId` mutation. */
export type DeleteTriggerScheduleByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `TriggerSchedule` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `TriggerSchedule` mutation. */
export type DeleteTriggerSchedulePayload = {
  __typename?: 'DeleteTriggerSchedulePayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `TriggerSchedule` that was deleted by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  deletedTriggerScheduleNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** Reads a single `User` that is related to this `TriggerSchedule`. */
  editorUser?: Maybe<User>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our delete `TriggerSchedule` mutation. */
export type DeleteTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: Maybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the `deleteTriggerSchedule` mutation. */
export type DeleteTriggerScheduleInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteUserByNodeId` mutation. */
export type DeleteUserByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `User` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `User` mutation. */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `User` that was deleted by this mutation. */
  user?: Maybe<User>;
  deletedUserNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our delete `User` mutation. */
export type DeleteUserPayloadUserEdgeArgs = {
  orderBy?: Maybe<Array<UsersOrderBy>>;
};

/** All input for the `deleteUser` mutation. */
export type DeleteUserInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteUserByUsername` mutation. */
export type DeleteUserByUsernameInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  username: Scalars['String'];
};

/** All input for the `deleteUserApplicationJoinByNodeId` mutation. */
export type DeleteUserApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `UserApplicationJoin` mutation. */
export type DeleteUserApplicationJoinPayload = {
  __typename?: 'DeleteUserApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserApplicationJoin` that was deleted by this mutation. */
  userApplicationJoin?: Maybe<UserApplicationJoin>;
  deletedUserApplicationJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `User` that is related to this `UserApplicationJoin`. */
  user?: Maybe<User>;
  /** An edge for our `UserApplicationJoin`. May be used by Relay 1. */
  userApplicationJoinEdge?: Maybe<UserApplicationJoinsEdge>;
};


/** The output of our delete `UserApplicationJoin` mutation. */
export type DeleteUserApplicationJoinPayloadUserApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserApplicationJoinsOrderBy>>;
};

/** All input for the `deleteUserApplicationJoin` mutation. */
export type DeleteUserApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteUserOrganisationByNodeId` mutation. */
export type DeleteUserOrganisationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserOrganisation` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `UserOrganisation` mutation. */
export type DeleteUserOrganisationPayload = {
  __typename?: 'DeleteUserOrganisationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisation` that was deleted by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  deletedUserOrganisationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our delete `UserOrganisation` mutation. */
export type DeleteUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationsOrderBy>>;
};

/** All input for the `deleteUserOrganisation` mutation. */
export type DeleteUserOrganisationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteUserOrganisationByUserIdAndOrganisationId` mutation. */
export type DeleteUserOrganisationByUserIdAndOrganisationIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  userId: Scalars['Int'];
  organisationId: Scalars['Int'];
};

/** All input for the `deleteUserOrganisationApplicationJoinByNodeId` mutation. */
export type DeleteUserOrganisationApplicationJoinByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `UserOrganisationApplicationJoin` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `UserOrganisationApplicationJoin` mutation. */
export type DeleteUserOrganisationApplicationJoinPayload = {
  __typename?: 'DeleteUserOrganisationApplicationJoinPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `UserOrganisationApplicationJoin` that was deleted by this mutation. */
  userOrganisationApplicationJoin?: Maybe<UserOrganisationApplicationJoin>;
  deletedUserOrganisationApplicationJoinNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `UserOrganisationApplicationJoin`. */
  application?: Maybe<Application>;
  /** Reads a single `UserOrganisation` that is related to this `UserOrganisationApplicationJoin`. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisationApplicationJoin`. May be used by Relay 1. */
  userOrganisationApplicationJoinEdge?: Maybe<UserOrganisationApplicationJoinsEdge>;
};


/** The output of our delete `UserOrganisationApplicationJoin` mutation. */
export type DeleteUserOrganisationApplicationJoinPayloadUserOrganisationApplicationJoinEdgeArgs = {
  orderBy?: Maybe<Array<UserOrganisationApplicationJoinsOrderBy>>;
};

/** All input for the `deleteUserOrganisationApplicationJoin` mutation. */
export type DeleteUserOrganisationApplicationJoinInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteVerificationByNodeId` mutation. */
export type DeleteVerificationByNodeIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The globally unique `ID` which will identify a single `Verification` to be deleted. */
  nodeId: Scalars['ID'];
};

/** The output of our delete `Verification` mutation. */
export type DeleteVerificationPayload = {
  __typename?: 'DeleteVerificationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The `Verification` that was deleted by this mutation. */
  verification?: Maybe<Verification>;
  deletedVerificationNodeId?: Maybe<Scalars['ID']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our delete `Verification` mutation. */
export type DeleteVerificationPayloadVerificationEdgeArgs = {
  orderBy?: Maybe<Array<VerificationsOrderBy>>;
};

/** All input for the `deleteVerification` mutation. */
export type DeleteVerificationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
};

/** All input for the `deleteVerificationByUniqueId` mutation. */
export type DeleteVerificationByUniqueIdInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  uniqueId: Scalars['String'];
};

/** All input for the `deleteWholeApplication` mutation. */
export type DeleteWholeApplicationInput = {
  /** An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client. */
  clientMutationId?: Maybe<Scalars['String']>;
  applicationId?: Maybe<Scalars['Int']>;
};

/** The output of our `deleteWholeApplication` mutation. */
export type DeleteWholeApplicationPayload = {
  __typename?: 'DeleteWholeApplicationPayload';
  /** The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations. */
  clientMutationId?: Maybe<Scalars['String']>;
  boolean?: Maybe<Scalars['Boolean']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ApplicationFragment = (
  { __typename?: 'Application' }
  & Pick<Application, 'id' | 'serial' | 'name' | 'outcome' | 'trigger'>
);

export type ApplicationResponseFragmentFragment = (
  { __typename?: 'ApplicationResponse' }
  & Pick<ApplicationResponse, 'id' | 'isValid' | 'value' | 'stageNumber' | 'templateElementId' | 'evaluatedParameters' | 'timeUpdated'>
  & { templateElement?: Maybe<(
    { __typename?: 'TemplateElement' }
    & Pick<TemplateElement, 'code'>
  )> }
);

export type ConsolidatorResponseFragmentFragment = (
  { __typename?: 'ReviewResponse' }
  & { reviewResponsesByReviewResponseLinkId: (
    { __typename?: 'ReviewResponsesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewResponse' }
      & ReviewResponseFragmentFragment
    )>> }
  ) }
);

export type ElementFragmentFragment = (
  { __typename?: 'TemplateElement' }
  & Pick<TemplateElement, 'id' | 'code' | 'index' | 'title' | 'elementTypePluginCode' | 'category' | 'visibilityCondition' | 'isRequired' | 'isEditable' | 'validation' | 'validationMessage' | 'helpText' | 'defaultValue' | 'parameters' | 'reviewability'>
);

export type FullTemplateFragment = (
  { __typename?: 'Template' }
  & Pick<Template, 'nodeId' | 'version' | 'versionTimestamp'>
  & { configApplications: (
    { __typename?: 'ApplicationsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Application' }
      & Pick<Application, 'serial' | 'id'>
    )>> }
  ), templateSections: (
    { __typename?: 'TemplateSectionsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateSection' }
      & { templateElementsBySectionId: (
        { __typename?: 'TemplateElementsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateElement' }
          & ElementFragmentFragment
        )>> }
      ) }
      & SectionFragment
    )>> }
  ), templateActions: (
    { __typename?: 'TemplateActionsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateAction' }
      & Pick<TemplateAction, 'code' | 'actionCode' | 'condition' | 'eventCode' | 'id' | 'parameterQueries' | 'sequence' | 'trigger' | 'description' | 'templateId'>
    )>> }
  ), templatePermissions: (
    { __typename?: 'TemplatePermissionsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplatePermission' }
      & Pick<TemplatePermission, 'allowedSections' | 'canMakeFinalDecision' | 'canSelfAssign' | 'id' | 'levelNumber' | 'restrictions' | 'stageNumber' | 'permissionNameId'>
      & { permissionName?: Maybe<(
        { __typename?: 'PermissionName' }
        & Pick<PermissionName, 'id' | 'name' | 'permissionPolicyId'>
        & { permissionPolicy?: Maybe<(
          { __typename?: 'PermissionPolicy' }
          & Pick<PermissionPolicy, 'defaultRestrictions' | 'description' | 'name' | 'id' | 'rules' | 'type'>
        )> }
      )> }
    )>> }
  ), templateStages: (
    { __typename?: 'TemplateStagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateStage' }
      & Pick<TemplateStage, 'id' | 'number' | 'colour' | 'title' | 'description'>
      & { templateStageReviewLevelsByStageId: (
        { __typename?: 'TemplateStageReviewLevelsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateStageReviewLevel' }
          & Pick<TemplateStageReviewLevel, 'description' | 'id' | 'name' | 'number'>
        )>> }
      ) }
    )>> }
  ) }
  & TemplateFragmentFragment
);

export type OrganisationFragment = (
  { __typename?: 'Organisation' }
  & Pick<Organisation, 'id' | 'name' | 'address' | 'registration' | 'logoUrl'>
);

export type ReviewAssignmentFragment = (
  { __typename?: 'ReviewAssignment' }
  & Pick<ReviewAssignment, 'id' | 'status' | 'timeUpdated' | 'levelNumber' | 'reviewerId' | 'isLocked' | 'isLastLevel' | 'isFinalDecision' | 'isSelfAssignable' | 'allowedSections' | 'assignedSections'>
);

export type ReviewResponseFragmentFragment = (
  { __typename?: 'ReviewResponse' }
  & Pick<ReviewResponse, 'id' | 'applicationResponseId' | 'decision' | 'comment' | 'stageNumber' | 'status' | 'timeUpdated' | 'originalReviewResponseId' | 'reviewResponseLinkId' | 'templateElementId'>
  & { applicationResponse?: Maybe<(
    { __typename?: 'ApplicationResponse' }
    & Pick<ApplicationResponse, 'id' | 'templateElementId'>
  )>, review?: Maybe<(
    { __typename?: 'Review' }
    & Pick<Review, 'id' | 'status' | 'stageNumber' | 'levelNumber'>
    & { reviewer?: Maybe<(
      { __typename?: 'User' }
      & UserFragment
    )> }
  )> }
);

export type SectionFragment = (
  { __typename?: 'TemplateSection' }
  & Pick<TemplateSection, 'id' | 'title' | 'index' | 'code'>
);

export type StageFragment = (
  { __typename?: 'ApplicationStageStatusLatest' }
  & Pick<ApplicationStageStatusLatest, 'stage' | 'stageId' | 'stageColour' | 'status' | 'stageNumber' | 'statusHistoryTimeCreated' | 'stageHistoryTimeCreated'>
);

export type TemplateFragmentFragment = (
  { __typename?: 'Template' }
  & Pick<Template, 'code' | 'id' | 'name' | 'status' | 'namePlural' | 'isLinear' | 'canApplicantMakeChanges' | 'startMessage' | 'submissionMessage' | 'version' | 'icon'>
  & { templateCategory?: Maybe<(
    { __typename?: 'TemplateCategory' }
    & Pick<TemplateCategory, 'id' | 'code' | 'title' | 'icon' | 'uiLocation'>
  )>, templateFilterJoins: (
    { __typename?: 'TemplateFilterJoinsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateFilterJoin' }
      & Pick<TemplateFilterJoin, 'id'>
      & { filter?: Maybe<(
        { __typename?: 'Filter' }
        & Pick<Filter, 'id' | 'code' | 'query' | 'title' | 'userRole'>
      )> }
    )>> }
  ), applications: (
    { __typename?: 'ApplicationsConnection' }
    & Pick<ApplicationsConnection, 'totalCount'>
  ) }
);

export type TemplateStageFragment = (
  { __typename?: 'TemplateStage' }
  & Pick<TemplateStage, 'number' | 'title' | 'id' | 'description' | 'colour'>
  & { templateStageReviewLevelsByStageId: (
    { __typename?: 'TemplateStageReviewLevelsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateStageReviewLevel' }
      & Pick<TemplateStageReviewLevel, 'name' | 'number'>
    )>> }
  ) }
);

export type UserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'username' | 'firstName' | 'lastName' | 'email' | 'dateOfBirth'>
);

export type CreateApplicationMutationVariables = Exact<{
  name: Scalars['String'];
  isConfig?: Maybe<Scalars['Boolean']>;
  serial?: Maybe<Scalars['String']>;
  templateId: Scalars['Int'];
  userId?: Maybe<Scalars['Int']>;
  orgId?: Maybe<Scalars['Int']>;
  sessionId: Scalars['String'];
  outcome?: Maybe<ApplicationOutcome>;
  trigger?: Maybe<Trigger>;
  responses?: Maybe<Array<ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput>>;
}>;


export type CreateApplicationMutation = (
  { __typename?: 'Mutation' }
  & { createApplication?: Maybe<(
    { __typename?: 'CreateApplicationPayload' }
    & { application?: Maybe<(
      { __typename?: 'Application' }
      & Pick<Application, 'userId' | 'orgId'>
      & { template?: Maybe<(
        { __typename?: 'Template' }
        & { templateSections: (
          { __typename?: 'TemplateSectionsConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'TemplateSection' }
            & SectionFragment
          )>> }
        ) }
        & TemplateFragmentFragment
      )> }
      & ApplicationFragment
    )> }
  )> }
);

export type CreateNoteMutationVariables = Exact<{
  applicationId: Scalars['Int'];
  userId: Scalars['Int'];
  orgId?: Maybe<Scalars['Int']>;
  comment: Scalars['String'];
}>;


export type CreateNoteMutation = (
  { __typename?: 'Mutation' }
  & { createApplicationNote?: Maybe<(
    { __typename?: 'CreateApplicationNotePayload' }
    & { applicationNote?: Maybe<(
      { __typename?: 'ApplicationNote' }
      & Pick<ApplicationNote, 'id' | 'timestamp' | 'comment'>
    )> }
  )> }
);

export type CreateReviewMutationVariables = Exact<{
  reviewInput: ReviewInput;
}>;


export type CreateReviewMutation = (
  { __typename?: 'Mutation' }
  & { createReview?: Maybe<(
    { __typename?: 'CreateReviewPayload' }
    & { review?: Maybe<(
      { __typename?: 'Review' }
      & Pick<Review, 'id'>
      & { reviewAssignment?: Maybe<(
        { __typename?: 'ReviewAssignment' }
        & Pick<ReviewAssignment, 'id'>
        & { reviews: (
          { __typename?: 'ReviewsConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Review' }
            & Pick<Review, 'id'>
          )>> }
        ) }
      )> }
    )> }
  )> }
);

export type CreateReviewResponseMutationVariables = Exact<{
  templateElementId: Scalars['Int'];
  applicationId: Scalars['Int'];
  stageNumber: Scalars['Int'];
  reviewId: Scalars['Int'];
  decision: ReviewResponseDecision;
  comment?: Maybe<Scalars['String']>;
  timeSubmitted?: Maybe<Scalars['Datetime']>;
}>;


export type CreateReviewResponseMutation = (
  { __typename?: 'Mutation' }
  & { createApplicationResponse?: Maybe<(
    { __typename?: 'CreateApplicationResponsePayload' }
    & { applicationResponse?: Maybe<(
      { __typename?: 'ApplicationResponse' }
      & Pick<ApplicationResponse, 'id'>
      & { reviewResponses: (
        { __typename?: 'ReviewResponsesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'ReviewResponse' }
          & Pick<ReviewResponse, 'id' | 'comment' | 'decision'>
        )>> }
      ) }
    )> }
  )> }
);

export type DeleteApplicationMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type DeleteApplicationMutation = (
  { __typename?: 'Mutation' }
  & { deleteApplication?: Maybe<(
    { __typename?: 'DeleteApplicationPayload' }
    & Pick<DeleteApplicationPayload, 'clientMutationId'>
  )> }
);

export type DeleteNoteMutationVariables = Exact<{
  noteId: Scalars['Int'];
}>;


export type DeleteNoteMutation = (
  { __typename?: 'Mutation' }
  & { deleteApplicationNote?: Maybe<(
    { __typename?: 'DeleteApplicationNotePayload' }
    & { applicationNote?: Maybe<(
      { __typename?: 'ApplicationNote' }
      & Pick<ApplicationNote, 'id'>
    )> }
  )> }
);

export type RestartApplicationMutationVariables = Exact<{
  serial: Scalars['String'];
  applicationPatch: ApplicationPatch;
}>;


export type RestartApplicationMutation = (
  { __typename?: 'Mutation' }
  & { updateApplicationBySerial?: Maybe<(
    { __typename?: 'UpdateApplicationPayload' }
    & { application?: Maybe<(
      { __typename?: 'Application' }
      & { applicationResponses: (
        { __typename?: 'ApplicationResponsesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'ApplicationResponse' }
          & ApplicationResponseFragmentFragment
        )>> }
      ) }
      & ApplicationFragment
    )> }
  )> }
);

export type SubmitReviewMutationVariables = Exact<{
  reviewId: Scalars['Int'];
  trigger?: Maybe<Trigger>;
  reviewResponses?: Maybe<Array<ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate>>;
}>;


export type SubmitReviewMutation = (
  { __typename?: 'Mutation' }
  & { updateReview?: Maybe<(
    { __typename?: 'UpdateReviewPayload' }
    & { review?: Maybe<(
      { __typename?: 'Review' }
      & Pick<Review, 'id' | 'trigger'>
    )> }
  )> }
);

export type DeleteWholeApplicationMutationVariables = Exact<{
  id: Scalars['Int'];
}>;


export type DeleteWholeApplicationMutation = (
  { __typename?: 'Mutation' }
  & { deleteWholeApplication?: Maybe<(
    { __typename?: 'DeleteWholeApplicationPayload' }
    & Pick<DeleteWholeApplicationPayload, 'clientMutationId'>
  )> }
);

export type UpdateTemplateMutationVariables = Exact<{
  id: Scalars['Int'];
  templatePatch: TemplatePatch;
}>;


export type UpdateTemplateMutation = (
  { __typename?: 'Mutation' }
  & { updateTemplate?: Maybe<(
    { __typename?: 'UpdateTemplatePayload' }
    & { template?: Maybe<(
      { __typename?: 'Template' }
      & FullTemplateFragment
    )> }
  )> }
);

export type UpdateTemplateFilterJoinMutationVariables = Exact<{
  id: Scalars['Int'];
  filterJoinPatch: TemplateFilterJoinPatch;
}>;


export type UpdateTemplateFilterJoinMutation = (
  { __typename?: 'Mutation' }
  & { updateTemplateFilterJoin?: Maybe<(
    { __typename?: 'UpdateTemplateFilterJoinPayload' }
    & Pick<UpdateTemplateFilterJoinPayload, 'clientMutationId'>
    & { templateFilterJoin?: Maybe<(
      { __typename?: 'TemplateFilterJoin' }
      & Pick<TemplateFilterJoin, 'id' | 'filterId'>
      & { filter?: Maybe<(
        { __typename?: 'Filter' }
        & Pick<Filter, 'id' | 'code' | 'query' | 'title' | 'userRole'>
      )> }
    )> }
  )> }
);

export type UpdateTemplateSectionMutationVariables = Exact<{
  id: Scalars['Int'];
  sectionPatch: TemplateSectionPatch;
}>;


export type UpdateTemplateSectionMutation = (
  { __typename?: 'Mutation' }
  & { updateTemplateSection?: Maybe<(
    { __typename?: 'UpdateTemplateSectionPayload' }
    & { templateSection?: Maybe<(
      { __typename?: 'TemplateSection' }
      & Pick<TemplateSection, 'id' | 'index' | 'code' | 'templateId' | 'title'>
      & { templateElementsBySectionId: (
        { __typename?: 'TemplateElementsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateElement' }
          & { applicationResponses: (
            { __typename?: 'ApplicationResponsesConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'ApplicationResponse' }
              & Pick<ApplicationResponse, 'id'>
              & { application?: Maybe<(
                { __typename?: 'Application' }
                & Pick<Application, 'id' | 'serial'>
                & { applicationResponses: (
                  { __typename?: 'ApplicationResponsesConnection' }
                  & { nodes: Array<Maybe<(
                    { __typename?: 'ApplicationResponse' }
                    & Pick<ApplicationResponse, 'id'>
                  )>> }
                ) }
              )> }
            )>> }
          ) }
          & ElementFragmentFragment
        )>> }
      ) }
    )> }
  )> }
);

export type UpdateTemplateStageMutationVariables = Exact<{
  id: Scalars['Int'];
  templateStagePatch: TemplateStagePatch;
}>;


export type UpdateTemplateStageMutation = (
  { __typename?: 'Mutation' }
  & { updateTemplateStage?: Maybe<(
    { __typename?: 'UpdateTemplateStagePayload' }
    & { templateStage?: Maybe<(
      { __typename?: 'TemplateStage' }
      & Pick<TemplateStage, 'id' | 'number' | 'colour' | 'title' | 'description'>
      & { templateStageReviewLevelsByStageId: (
        { __typename?: 'TemplateStageReviewLevelsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateStageReviewLevel' }
          & Pick<TemplateStageReviewLevel, 'description' | 'id' | 'name' | 'number'>
        )>> }
      ) }
    )> }
  )> }
);

export type UpdateApplicationMutationVariables = Exact<{
  serial: Scalars['String'];
  applicationTrigger?: Maybe<Trigger>;
  responses?: Maybe<Array<ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate>>;
}>;


export type UpdateApplicationMutation = (
  { __typename?: 'Mutation' }
  & { updateApplicationBySerial?: Maybe<(
    { __typename?: 'UpdateApplicationPayload' }
    & { application?: Maybe<(
      { __typename?: 'Application' }
      & ApplicationFragment
    )> }
  )> }
);

export type UpdateResponseMutationVariables = Exact<{
  id: Scalars['Int'];
  value?: Maybe<Scalars['JSON']>;
  isValid?: Maybe<Scalars['Boolean']>;
  stageNumber?: Maybe<Scalars['Int']>;
  evaluatedParameters?: Maybe<Scalars['JSON']>;
}>;


export type UpdateResponseMutation = (
  { __typename?: 'Mutation' }
  & { updateApplicationResponse?: Maybe<(
    { __typename?: 'UpdateApplicationResponsePayload' }
    & { applicationResponse?: Maybe<(
      { __typename?: 'ApplicationResponse' }
      & { templateElement?: Maybe<(
        { __typename?: 'TemplateElement' }
        & ElementFragmentFragment
      )> }
      & ApplicationResponseFragmentFragment
    )> }
  )> }
);

export type UpdateReviewMutationVariables = Exact<{
  reviewId: Scalars['Int'];
  reviewPatch: ReviewPatch;
}>;


export type UpdateReviewMutation = (
  { __typename?: 'Mutation' }
  & { updateReview?: Maybe<(
    { __typename?: 'UpdateReviewPayload' }
    & { review?: Maybe<(
      { __typename?: 'Review' }
      & Pick<Review, 'id' | 'trigger'>
      & { reviewResponses: (
        { __typename?: 'ReviewResponsesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'ReviewResponse' }
          & Pick<ReviewResponse, 'id' | 'decision' | 'comment'>
        )>> }
      ), reviewDecisions: (
        { __typename?: 'ReviewDecisionsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'ReviewDecision' }
          & Pick<ReviewDecision, 'id' | 'decision' | 'comment' | 'timeUpdated'>
        )>> }
      ) }
    )> }
  )> }
);

export type UpdateReviewAssignmentMutationVariables = Exact<{
  assignmentId: Scalars['Int'];
  assignmentPatch: ReviewAssignmentPatch;
}>;


export type UpdateReviewAssignmentMutation = (
  { __typename?: 'Mutation' }
  & { updateReviewAssignment?: Maybe<(
    { __typename?: 'UpdateReviewAssignmentPayload' }
    & { reviewAssignment?: Maybe<(
      { __typename?: 'ReviewAssignment' }
      & Pick<ReviewAssignment, 'id' | 'status' | 'timeUpdated'>
    )> }
  )> }
);

export type UpdateReviewDecisionCommentMutationVariables = Exact<{
  reviewDecisionId: Scalars['Int'];
  comment: Scalars['String'];
}>;


export type UpdateReviewDecisionCommentMutation = (
  { __typename?: 'Mutation' }
  & { updateReviewDecision?: Maybe<(
    { __typename?: 'UpdateReviewDecisionPayload' }
    & { reviewDecision?: Maybe<(
      { __typename?: 'ReviewDecision' }
      & Pick<ReviewDecision, 'id' | 'decision' | 'comment'>
    )> }
  )> }
);

export type UpdateReviewResponseMutationVariables = Exact<{
  id: Scalars['Int'];
  decision?: Maybe<ReviewResponseDecision>;
  comment?: Maybe<Scalars['String']>;
  stageNumber: Scalars['Int'];
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
}>;


export type UpdateReviewResponseMutation = (
  { __typename?: 'Mutation' }
  & { updateReviewResponse?: Maybe<(
    { __typename?: 'UpdateReviewResponsePayload' }
    & { reviewResponse?: Maybe<(
      { __typename?: 'ReviewResponse' }
      & ReviewResponseFragmentFragment
    )> }
  )> }
);

export type GetAppplicantFilterListQueryVariables = Exact<{
  searchValue: Scalars['String'];
  templateCode: Scalars['String'];
}>;


export type GetAppplicantFilterListQuery = (
  { __typename?: 'Query' }
  & { applicationListFilterApplicant?: Maybe<(
    { __typename?: 'ApplicationListFilterApplicantConnection' }
    & Pick<ApplicationListFilterApplicantConnection, 'nodes' | 'totalCount'>
  )> }
);

export type GetAssignerFilterListQueryVariables = Exact<{
  searchValue: Scalars['String'];
  templateCode: Scalars['String'];
}>;


export type GetAssignerFilterListQuery = (
  { __typename?: 'Query' }
  & { applicationListFilterAssigner?: Maybe<(
    { __typename?: 'ApplicationListFilterAssignerConnection' }
    & Pick<ApplicationListFilterAssignerConnection, 'nodes' | 'totalCount'>
  )> }
);

export type GetOrganisationFilterListQueryVariables = Exact<{
  searchValue: Scalars['String'];
  templateCode: Scalars['String'];
}>;


export type GetOrganisationFilterListQuery = (
  { __typename?: 'Query' }
  & { applicationListFilterOrganisation?: Maybe<(
    { __typename?: 'ApplicationListFilterOrganisationConnection' }
    & Pick<ApplicationListFilterOrganisationConnection, 'nodes' | 'totalCount'>
  )> }
);

export type GetReviewersFilterListQueryVariables = Exact<{
  searchValue: Scalars['String'];
  templateCode: Scalars['String'];
}>;


export type GetReviewersFilterListQuery = (
  { __typename?: 'Query' }
  & { applicationListFilterReviewer?: Maybe<(
    { __typename?: 'ApplicationListFilterReviewerConnection' }
    & Pick<ApplicationListFilterReviewerConnection, 'nodes' | 'totalCount'>
  )> }
);

export type GetStageFilterListQueryVariables = Exact<{
  templateCode: Scalars['String'];
}>;


export type GetStageFilterListQuery = (
  { __typename?: 'Query' }
  & { applicationListFilterStage?: Maybe<(
    { __typename?: 'ApplicationListFilterStageConnection' }
    & Pick<ApplicationListFilterStageConnection, 'nodes' | 'totalCount'>
  )> }
);

export type GetActivityLogQueryVariables = Exact<{
  applicationId: Scalars['Int'];
}>;


export type GetActivityLogQuery = (
  { __typename?: 'Query' }
  & { activityLogs?: Maybe<(
    { __typename?: 'ActivityLogsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ActivityLog' }
      & Pick<ActivityLog, 'value' | 'type' | 'timestamp' | 'table' | 'recordId' | 'nodeId' | 'id' | 'details' | 'applicationId'>
    )>> }
  )> }
);

export type GetAllLookupTableStructuresQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllLookupTableStructuresQuery = (
  { __typename?: 'Query' }
  & { dataTables?: Maybe<(
    { __typename?: 'DataTablesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'DataTable' }
      & Pick<DataTable, 'id' | 'tableName' | 'displayName' | 'fieldMap'>
    )>> }
  )> }
);

export type GetAllResponsesQueryVariables = Exact<{
  serial: Scalars['String'];
  responseStatuses?: Maybe<Array<ApplicationResponseStatus>>;
}>;


export type GetAllResponsesQuery = (
  { __typename?: 'Query' }
  & { applicationBySerial?: Maybe<(
    { __typename?: 'Application' }
    & Pick<Application, 'id' | 'serial'>
    & { applicationResponses: (
      { __typename?: 'ApplicationResponsesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'ApplicationResponse' }
        & { reviewResponses: (
          { __typename?: 'ReviewResponsesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'ReviewResponse' }
            & ReviewResponseFragmentFragment
          )>> }
        ) }
        & ApplicationResponseFragmentFragment
      )>> }
    ) }
  )> }
);

export type GetApplicationQueryVariables = Exact<{
  serial: Scalars['String'];
}>;


export type GetApplicationQuery = (
  { __typename?: 'Query' }
  & { applicationBySerial?: Maybe<(
    { __typename?: 'Application' }
    & { template?: Maybe<(
      { __typename?: 'Template' }
      & { templateSections: (
        { __typename?: 'TemplateSectionsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateSection' }
          & { templateElementsBySectionId: (
            { __typename?: 'TemplateElementsConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'TemplateElement' }
              & ElementFragmentFragment
            )>> }
          ) }
          & SectionFragment
        )>> }
      ), templateStages: (
        { __typename?: 'TemplateStagesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateStage' }
          & TemplateStageFragment
        )>> }
      ), previewActions: (
        { __typename?: 'TemplateActionsConnection' }
        & Pick<TemplateActionsConnection, 'totalCount'>
      ) }
      & TemplateFragmentFragment
    )>, user?: Maybe<(
      { __typename?: 'User' }
      & UserFragment
    )>, org?: Maybe<(
      { __typename?: 'Organisation' }
      & OrganisationFragment
    )>, triggerSchedules: (
      { __typename?: 'TriggerSchedulesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'TriggerSchedule' }
        & Pick<TriggerSchedule, 'id' | 'timeScheduled' | 'eventCode' | 'isActive'>
      )>> }
    ) }
    & ApplicationFragment
  )>, applicationStageStatusLatests?: Maybe<(
    { __typename?: 'ApplicationStageStatusLatestsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ApplicationStageStatusLatest' }
      & StageFragment
    )>> }
  )> }
);

export type GetApplicationSerialQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetApplicationSerialQuery = (
  { __typename?: 'Query' }
  & { application?: Maybe<(
    { __typename?: 'Application' }
    & Pick<Application, 'serial' | 'name' | 'trigger'>
  )> }
);

export type GetApplicationListQueryVariables = Exact<{
  filters?: Maybe<ApplicationListShapeFilter>;
  sortFields?: Maybe<Array<ApplicationListShapesOrderBy>>;
  paginationOffset?: Maybe<Scalars['Int']>;
  numberToFetch?: Maybe<Scalars['Int']>;
  userId?: Scalars['Int'];
  templateCode: Scalars['String'];
}>;


export type GetApplicationListQuery = (
  { __typename?: 'Query' }
  & { applicationList?: Maybe<(
    { __typename?: 'ApplicationListShapesConnection' }
    & Pick<ApplicationListShapesConnection, 'totalCount'>
    & { nodes: Array<Maybe<(
      { __typename?: 'ApplicationListShape' }
      & Pick<ApplicationListShape, 'id' | 'serial' | 'name' | 'templateCode' | 'templateName' | 'applicant' | 'orgName' | 'stage' | 'stageColour' | 'status' | 'outcome' | 'lastActiveDate' | 'applicantDeadline' | 'reviewerAction' | 'assignerAction' | 'assigners' | 'reviewers'>
    )>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasPreviousPage' | 'hasNextPage'>
    ) }
  )>, templates?: Maybe<(
    { __typename?: 'TemplatesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Template' }
      & Pick<Template, 'code' | 'name' | 'namePlural'>
    )>> }
  )> }
);

export type GetApplicationDocsQueryVariables = Exact<{
  applicationSerial: Scalars['String'];
}>;


export type GetApplicationDocsQuery = (
  { __typename?: 'Query' }
  & { files?: Maybe<(
    { __typename?: 'FilesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'File' }
      & Pick<File, 'uniqueId' | 'description' | 'filePath' | 'originalFilename' | 'thumbnailPath' | 'timestamp'>
    )>> }
  )> }
);

export type GetHistoryForApplicantQueryVariables = Exact<{
  serial: Scalars['String'];
  questionCode: Scalars['String'];
  templateCode: Scalars['String'];
  templateVersion: Scalars['Int'];
}>;


export type GetHistoryForApplicantQuery = (
  { __typename?: 'Query' }
  & { templateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<(
    { __typename?: 'TemplateElement' }
    & { reviewResponses: (
      { __typename?: 'ReviewResponsesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'ReviewResponse' }
        & { review?: Maybe<(
          { __typename?: 'Review' }
          & Pick<Review, 'stageNumber'>
        )> }
        & ReviewResponseFragmentFragment
      )>> }
    ), applicationResponses: (
      { __typename?: 'ApplicationResponsesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'ApplicationResponse' }
        & { application?: Maybe<(
          { __typename?: 'Application' }
          & Pick<Application, 'stageNumber'>
          & { user?: Maybe<(
            { __typename?: 'User' }
            & UserFragment
          )> }
          & ApplicationFragment
        )> }
        & ApplicationResponseFragmentFragment
      )>> }
    ) }
    & ElementFragmentFragment
  )> }
);

export type GetHistoryForReviewerQueryVariables = Exact<{
  serial: Scalars['String'];
  questionCode: Scalars['String'];
  templateCode: Scalars['String'];
  templateVersion: Scalars['Int'];
  userId: Scalars['Int'];
}>;


export type GetHistoryForReviewerQuery = (
  { __typename?: 'Query' }
  & { templateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<(
    { __typename?: 'TemplateElement' }
    & { reviewResponses: (
      { __typename?: 'ReviewResponsesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'ReviewResponse' }
        & { review?: Maybe<(
          { __typename?: 'Review' }
          & Pick<Review, 'stageNumber'>
        )> }
        & ReviewResponseFragmentFragment
      )>> }
    ), applicationResponses: (
      { __typename?: 'ApplicationResponsesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'ApplicationResponse' }
        & { application?: Maybe<(
          { __typename?: 'Application' }
          & Pick<Application, 'stageNumber'>
          & { user?: Maybe<(
            { __typename?: 'User' }
            & UserFragment
          )> }
          & ApplicationFragment
        )> }
        & ApplicationResponseFragmentFragment
      )>> }
    ) }
    & ElementFragmentFragment
  )> }
);

export type GetLookupTableStructureByIdQueryVariables = Exact<{
  lookupTableID: Scalars['Int'];
}>;


export type GetLookupTableStructureByIdQuery = (
  { __typename?: 'Query' }
  & { dataTable?: Maybe<(
    { __typename?: 'DataTable' }
    & Pick<DataTable, 'id' | 'displayName' | 'tableName' | 'fieldMap' | 'dataViewCode'>
  )> }
);

export type GetApplicationNotesQueryVariables = Exact<{
  applicationId: Scalars['Int'];
}>;


export type GetApplicationNotesQuery = (
  { __typename?: 'Query' }
  & { applicationNotes?: Maybe<(
    { __typename?: 'ApplicationNotesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ApplicationNote' }
      & Pick<ApplicationNote, 'id' | 'comment' | 'timestamp'>
      & { org?: Maybe<(
        { __typename?: 'Organisation' }
        & Pick<Organisation, 'id' | 'name'>
      )>, user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'fullName' | 'id' | 'username'>
      )>, files: (
        { __typename?: 'FilesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'File' }
          & Pick<File, 'filePath' | 'description' | 'id' | 'originalFilename' | 'uniqueId'>
        )>> }
      ) }
    )>> }
  )> }
);

export type GetRefDocsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetRefDocsQuery = (
  { __typename?: 'Query' }
  & { files?: Maybe<(
    { __typename?: 'FilesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'File' }
      & Pick<File, 'uniqueId' | 'description' | 'isInternalReferenceDoc' | 'isExternalReferenceDoc'>
    )>> }
  )> }
);

export type GetReviewDecisionCommentQueryVariables = Exact<{
  reviewDecisionId: Scalars['Int'];
}>;


export type GetReviewDecisionCommentQuery = (
  { __typename?: 'Query' }
  & { reviewDecision?: Maybe<(
    { __typename?: 'ReviewDecision' }
    & Pick<ReviewDecision, 'id' | 'comment'>
  )> }
);

export type GetReviewInfoQueryVariables = Exact<{
  applicationId?: Maybe<Scalars['Int']>;
  assignerId: Scalars['Int'];
}>;


export type GetReviewInfoQuery = (
  { __typename?: 'Query' }
  & { reviewAssignments?: Maybe<(
    { __typename?: 'ReviewAssignmentsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewAssignment' }
      & Pick<ReviewAssignment, 'timeStageCreated' | 'trigger'>
      & { stage?: Maybe<(
        { __typename?: 'TemplateStage' }
        & Pick<TemplateStage, 'id' | 'number' | 'title' | 'colour'>
      )>, reviewer?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'id' | 'firstName' | 'lastName'>
      )>, reviews: (
        { __typename?: 'ReviewsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Review' }
          & Pick<Review, 'id' | 'status' | 'timeStatusCreated' | 'trigger'>
          & { reviewDecisions: (
            { __typename?: 'ReviewDecisionsConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'ReviewDecision' }
              & Pick<ReviewDecision, 'id' | 'decision'>
            )>> }
          ) }
        )>> }
      ), reviewAssignmentAssignerJoins: (
        { __typename?: 'ReviewAssignmentAssignerJoinsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'ReviewAssignmentAssignerJoin' }
          & { assigner?: Maybe<(
            { __typename?: 'User' }
            & Pick<User, 'firstName' | 'lastName' | 'id'>
          )> }
        )>> }
      ) }
      & ReviewAssignmentFragment
    )>> }
  )> }
);

export type GetReviewResponsesQueryVariables = Exact<{
  reviewAssignmentId: Scalars['Int'];
  userId: Scalars['Int'];
  sectionIds?: Maybe<Array<Scalars['Int']>>;
  applicationId: Scalars['Int'];
  previousLevel: Scalars['Int'];
  stageNumber: Scalars['Int'];
  shouldIncludePreviousStage?: Scalars['Boolean'];
  previousStage?: Maybe<Scalars['Int']>;
}>;


export type GetReviewResponsesQuery = (
  { __typename?: 'Query' }
  & { thisReviewResponses?: Maybe<(
    { __typename?: 'ReviewResponsesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewResponse' }
      & { reviewResponseLink?: Maybe<(
        { __typename?: 'ReviewResponse' }
        & ReviewResponseFragmentFragment
      )> }
      & ReviewResponseFragmentFragment
      & ConsolidatorResponseFragmentFragment
    )>> }
  )>, previousLevelReviewResponses?: Maybe<(
    { __typename?: 'ReviewResponsesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewResponse' }
      & ReviewResponseFragmentFragment
    )>> }
  )>, originalReviewResponses?: Maybe<(
    { __typename?: 'ReviewResponsesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewResponse' }
      & ReviewResponseFragmentFragment
    )>> }
  )>, previousOriginalReviewResponses?: Maybe<(
    { __typename?: 'ReviewResponsesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ReviewResponse' }
      & ReviewResponseFragmentFragment
    )>> }
  )> }
);

export type GetReviewableQuestionCountsQueryVariables = Exact<{
  applicationId: Scalars['Int'];
  stageId: Scalars['Int'];
  levelNumber: Scalars['Int'];
}>;


export type GetReviewableQuestionCountsQuery = (
  { __typename?: 'Query' }
  & { reviewableQuestions?: Maybe<(
    { __typename?: 'ReviewableQuestionsConnection' }
    & Pick<ReviewableQuestionsConnection, 'totalCount'>
  )>, assignedQuestions?: Maybe<(
    { __typename?: 'AssignedQuestionsConnection' }
    & Pick<AssignedQuestionsConnection, 'totalCount'>
  )> }
);

export type GetSchemaColumnsQueryVariables = Exact<{
  tableNames?: Maybe<Array<Scalars['SqlIdentifier']>>;
}>;


export type GetSchemaColumnsQuery = (
  { __typename?: 'Query' }
  & { schemaColumns?: Maybe<(
    { __typename?: 'SchemaColumnsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'SchemaColumn' }
      & Pick<SchemaColumn, 'columnName' | 'tableName'>
    )>> }
  )> }
);

export type GetTemplateQueryVariables = Exact<{
  code: Scalars['String'];
  status?: Maybe<TemplateStatus>;
}>;


export type GetTemplateQuery = (
  { __typename?: 'Query' }
  & { templates?: Maybe<(
    { __typename?: 'TemplatesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Template' }
      & { templateSections: (
        { __typename?: 'TemplateSectionsConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateSection' }
          & { templateElementsBySectionId: (
            { __typename?: 'TemplateElementsConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'TemplateElement' }
              & ElementFragmentFragment
            )>> }
          ) }
          & SectionFragment
        )>> }
      ), templateStages: (
        { __typename?: 'TemplateStagesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'TemplateStage' }
          & Pick<TemplateStage, 'id' | 'number' | 'title' | 'description'>
        )>> }
      ) }
      & TemplateFragmentFragment
    )>> }
  )> }
);

export type GetTemplatesQueryVariables = Exact<{
  status?: Maybe<TemplateStatus>;
}>;


export type GetTemplatesQuery = (
  { __typename?: 'Query' }
  & { templates?: Maybe<(
    { __typename?: 'TemplatesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Template' }
      & TemplateFragmentFragment
    )>> }
  )> }
);

export type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUsersQuery = (
  { __typename?: 'Query' }
  & { users?: Maybe<(
    { __typename?: 'UsersConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'username'>
    )>> }
  )> }
);

export type GeTemplateActionByCodeQueryVariables = Exact<{
  pluginCode: Scalars['String'];
}>;


export type GeTemplateActionByCodeQuery = (
  { __typename?: 'Query' }
  & { templateActions?: Maybe<(
    { __typename?: 'TemplateActionsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateAction' }
      & Pick<TemplateAction, 'id' | 'description' | 'condition' | 'parameterQueries' | 'trigger'>
      & { template?: Maybe<(
        { __typename?: 'Template' }
        & Pick<Template, 'name' | 'code'>
      )> }
    )>> }
  )> }
);

export type GetAllActionsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllActionsQuery = (
  { __typename?: 'Query' }
  & { actionPlugins?: Maybe<(
    { __typename?: 'ActionPluginsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'ActionPlugin' }
      & Pick<ActionPlugin, 'id' | 'code' | 'description' | 'name' | 'optionalParameters' | 'outputProperties' | 'requiredParameters'>
    )>> }
  )> }
);

export type GetAllFiltersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllFiltersQuery = (
  { __typename?: 'Query' }
  & { filters?: Maybe<(
    { __typename?: 'FiltersConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Filter' }
      & Pick<Filter, 'code' | 'id' | 'query' | 'title' | 'userRole'>
    )>> }
  )> }
);

export type GetAllPermissionNamesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllPermissionNamesQuery = (
  { __typename?: 'Query' }
  & { permissionNames?: Maybe<(
    { __typename?: 'PermissionNamesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PermissionName' }
      & Pick<PermissionName, 'id' | 'name' | 'permissionPolicyId'>
      & { permissionPolicy?: Maybe<(
        { __typename?: 'PermissionPolicy' }
        & Pick<PermissionPolicy, 'id' | 'name' | 'rules' | 'type' | 'description' | 'defaultRestrictions'>
      )> }
    )>> }
  )> }
);

export type GetAllTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllTemplatesQuery = (
  { __typename?: 'Query' }
  & { templates?: Maybe<(
    { __typename?: 'TemplatesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Template' }
      & Pick<Template, 'code' | 'status' | 'id' | 'version' | 'versionTimestamp' | 'name'>
      & { templateCategory?: Maybe<(
        { __typename?: 'TemplateCategory' }
        & Pick<TemplateCategory, 'title'>
      )>, applications: (
        { __typename?: 'ApplicationsConnection' }
        & Pick<ApplicationsConnection, 'totalCount'>
      ) }
    )>> }
  )> }
);

export type GetTemplateCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetTemplateCategoriesQuery = (
  { __typename?: 'Query' }
  & { templateCategories?: Maybe<(
    { __typename?: 'TemplateCategoriesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateCategory' }
      & Pick<TemplateCategory, 'code' | 'icon' | 'id' | 'title' | 'uiLocation'>
    )>> }
  )> }
);

export type GetFullTemplateInfoQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetFullTemplateInfoQuery = (
  { __typename?: 'Query' }
  & { template?: Maybe<(
    { __typename?: 'Template' }
    & FullTemplateFragment
  )> }
);

export type GetPermissionStatisticsQueryVariables = Exact<{
  id: Scalars['Int'];
  name: Scalars['String'];
  rowLeveSearch: Scalars['String'];
}>;


export type GetPermissionStatisticsQuery = (
  { __typename?: 'Query' }
  & { permissionName?: Maybe<(
    { __typename?: 'PermissionName' }
    & Pick<PermissionName, 'name'>
    & { permissionJoins: (
      { __typename?: 'PermissionJoinsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'PermissionJoin' }
        & Pick<PermissionJoin, 'id'>
        & { organisation?: Maybe<(
          { __typename?: 'Organisation' }
          & Pick<Organisation, 'name'>
        )>, user?: Maybe<(
          { __typename?: 'User' }
          & Pick<User, 'firstName' | 'lastName' | 'email' | 'username'>
        )> }
      )>> }
    ), permissionPolicy?: Maybe<(
      { __typename?: 'PermissionPolicy' }
      & Pick<PermissionPolicy, 'description' | 'rules' | 'type' | 'name'>
    )>, templatePermissions: (
      { __typename?: 'TemplatePermissionsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'TemplatePermission' }
        & Pick<TemplatePermission, 'id' | 'stageNumber' | 'levelNumber'>
        & { template?: Maybe<(
          { __typename?: 'Template' }
          & Pick<Template, 'id' | 'name' | 'code' | 'version' | 'status'>
        )> }
      )>> }
    ) }
  )>, templateActions?: Maybe<(
    { __typename?: 'TemplateActionsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateAction' }
      & Pick<TemplateAction, 'id' | 'actionCode' | 'condition' | 'parameterQueries' | 'trigger'>
      & { template?: Maybe<(
        { __typename?: 'Template' }
        & Pick<Template, 'code' | 'name' | 'version' | 'status'>
      )> }
    )>> }
  )>, templateElements?: Maybe<(
    { __typename?: 'TemplateElementsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateElement' }
      & Pick<TemplateElement, 'id' | 'code' | 'parameters' | 'title'>
      & { section?: Maybe<(
        { __typename?: 'TemplateSection' }
        & { template?: Maybe<(
          { __typename?: 'Template' }
          & Pick<Template, 'code' | 'name' | 'status' | 'version'>
        )> }
      )> }
    )>> }
  )>, postgresRowLevels?: Maybe<(
    { __typename?: 'PostgresRowLevelsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostgresRowLevel' }
      & Pick<PostgresRowLevel, 'policyname' | 'tablename' | 'withCheck' | 'qual' | 'roles' | 'schemaname' | 'permissive' | 'cmd'>
    )>> }
  )> }
);

export type GetTemplateElementsByPluginQueryVariables = Exact<{
  pluginCode: Scalars['String'];
}>;


export type GetTemplateElementsByPluginQuery = (
  { __typename?: 'Query' }
  & { templateElements?: Maybe<(
    { __typename?: 'TemplateElementsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TemplateElement' }
      & Pick<TemplateElement, 'category' | 'helpText' | 'isEditable' | 'isRequired' | 'parameters' | 'validation' | 'code' | 'title' | 'id' | 'defaultValue' | 'validationMessage' | 'visibilityCondition' | 'templateCode'>
    )>> }
  )> }
);

export type GetTemplatesAvailableForCodeQueryVariables = Exact<{
  code: Scalars['String'];
}>;


export type GetTemplatesAvailableForCodeQuery = (
  { __typename?: 'Query' }
  & { templates?: Maybe<(
    { __typename?: 'TemplatesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Template' }
      & Pick<Template, 'id' | 'code' | 'status'>
    )>> }
  )> }
);

export const ApplicationFragmentDoc = gql`
    fragment Application on Application {
  id
  serial
  name
  outcome
  trigger
}
    `;
export const ApplicationResponseFragmentFragmentDoc = gql`
    fragment applicationResponseFragment on ApplicationResponse {
  id
  isValid
  value
  stageNumber
  templateElement {
    code
  }
  templateElementId
  evaluatedParameters
  timeUpdated
}
    `;
export const UserFragmentDoc = gql`
    fragment User on User {
  id
  username
  firstName
  lastName
  email
  dateOfBirth
}
    `;
export const ReviewResponseFragmentFragmentDoc = gql`
    fragment reviewResponseFragment on ReviewResponse {
  id
  applicationResponseId
  decision
  comment
  stageNumber
  status
  timeUpdated
  originalReviewResponseId
  reviewResponseLinkId
  templateElementId
  applicationResponse {
    id
    templateElementId
  }
  review {
    id
    status
    stageNumber
    levelNumber
    reviewer {
      ...User
    }
  }
}
    ${UserFragmentDoc}`;
export const ConsolidatorResponseFragmentFragmentDoc = gql`
    fragment consolidatorResponseFragment on ReviewResponse {
  reviewResponsesByReviewResponseLinkId(orderBy: TIME_UPDATED_DESC, filter: {status: {notEqualTo: DRAFT}}) {
    nodes {
      ...reviewResponseFragment
    }
  }
}
    ${ReviewResponseFragmentFragmentDoc}`;
export const TemplateFragmentFragmentDoc = gql`
    fragment templateFragment on Template {
  code
  id
  name
  status
  namePlural
  isLinear
  canApplicantMakeChanges
  startMessage
  submissionMessage
  version
  icon
  templateCategory {
    id
    code
    title
    icon
    uiLocation
  }
  templateFilterJoins {
    nodes {
      id
      filter {
        id
        code
        query
        title
        userRole
      }
    }
  }
  applications(filter: {isConfig: {equalTo: false}}) {
    totalCount
  }
}
    `;
export const SectionFragmentDoc = gql`
    fragment Section on TemplateSection {
  id
  title
  index
  code
}
    `;
export const ElementFragmentFragmentDoc = gql`
    fragment elementFragment on TemplateElement {
  id
  code
  index
  title
  elementTypePluginCode
  category
  visibilityCondition
  isRequired
  isEditable
  validation
  validationMessage
  helpText
  defaultValue
  parameters
  reviewability
}
    `;
export const FullTemplateFragmentDoc = gql`
    fragment FullTemplate on Template {
  ...templateFragment
  nodeId
  configApplications: applications(filter: {isConfig: {equalTo: true}}, orderBy: ID_DESC) {
    nodes {
      serial
      id
    }
  }
  version
  versionTimestamp
  templateSections(orderBy: INDEX_ASC) {
    nodes {
      ...Section
      templateElementsBySectionId(orderBy: INDEX_ASC) {
        nodes {
          ...elementFragment
        }
      }
    }
  }
  templateActions(orderBy: SEQUENCE_ASC) {
    nodes {
      code
      actionCode
      condition
      eventCode
      id
      parameterQueries
      sequence
      trigger
      description
      templateId
    }
  }
  templatePermissions {
    nodes {
      allowedSections
      canMakeFinalDecision
      canSelfAssign
      id
      levelNumber
      permissionName {
        id
        name
        permissionPolicyId
        permissionPolicy {
          defaultRestrictions
          description
          name
          id
          rules
          type
        }
      }
      restrictions
      stageNumber
      permissionNameId
    }
  }
  templateStages(orderBy: NUMBER_ASC) {
    nodes {
      id
      number
      colour
      title
      description
      templateStageReviewLevelsByStageId(orderBy: NUMBER_ASC) {
        nodes {
          description
          id
          name
          number
        }
      }
    }
  }
}
    ${TemplateFragmentFragmentDoc}
${SectionFragmentDoc}
${ElementFragmentFragmentDoc}`;
export const OrganisationFragmentDoc = gql`
    fragment Organisation on Organisation {
  id
  name
  address
  registration
  logoUrl
}
    `;
export const ReviewAssignmentFragmentDoc = gql`
    fragment ReviewAssignment on ReviewAssignment {
  id
  status
  timeUpdated
  levelNumber
  reviewerId
  isLocked
  isLastLevel
  isFinalDecision
  isSelfAssignable
  allowedSections
  assignedSections
}
    `;
export const StageFragmentDoc = gql`
    fragment Stage on ApplicationStageStatusLatest {
  stage
  stageId
  stageColour
  status
  stageNumber
  statusHistoryTimeCreated
  stageHistoryTimeCreated
}
    `;
export const TemplateStageFragmentDoc = gql`
    fragment TemplateStage on TemplateStage {
  number
  title
  id
  description
  colour
  templateStageReviewLevelsByStageId {
    nodes {
      name
      number
    }
  }
}
    `;
export const CreateApplicationDocument = gql`
    mutation createApplication($name: String!, $isConfig: Boolean = false, $serial: String, $templateId: Int!, $userId: Int, $orgId: Int, $sessionId: String!, $outcome: ApplicationOutcome = PENDING, $trigger: Trigger = ON_APPLICATION_CREATE, $responses: [ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput!]) {
  createApplication(input: {application: {isConfig: $isConfig, name: $name, serial: $serial, templateId: $templateId, userId: $userId, orgId: $orgId, sessionId: $sessionId, isActive: true, outcome: $outcome, trigger: $trigger, applicationResponsesUsingId: {create: $responses}}}) {
    application {
      userId
      orgId
      ...Application
      template {
        ...templateFragment
        templateSections {
          nodes {
            ...Section
          }
        }
      }
    }
  }
}
    ${ApplicationFragmentDoc}
${TemplateFragmentFragmentDoc}
${SectionFragmentDoc}`;
export type CreateApplicationMutationFn = Apollo.MutationFunction<CreateApplicationMutation, CreateApplicationMutationVariables>;

/**
 * __useCreateApplicationMutation__
 *
 * To run a mutation, you first call `useCreateApplicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateApplicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createApplicationMutation, { data, loading, error }] = useCreateApplicationMutation({
 *   variables: {
 *      name: // value for 'name'
 *      isConfig: // value for 'isConfig'
 *      serial: // value for 'serial'
 *      templateId: // value for 'templateId'
 *      userId: // value for 'userId'
 *      orgId: // value for 'orgId'
 *      sessionId: // value for 'sessionId'
 *      outcome: // value for 'outcome'
 *      trigger: // value for 'trigger'
 *      responses: // value for 'responses'
 *   },
 * });
 */
export function useCreateApplicationMutation(baseOptions?: Apollo.MutationHookOptions<CreateApplicationMutation, CreateApplicationMutationVariables>) {
        return Apollo.useMutation<CreateApplicationMutation, CreateApplicationMutationVariables>(CreateApplicationDocument, baseOptions);
      }
export type CreateApplicationMutationHookResult = ReturnType<typeof useCreateApplicationMutation>;
export type CreateApplicationMutationResult = Apollo.MutationResult<CreateApplicationMutation>;
export type CreateApplicationMutationOptions = Apollo.BaseMutationOptions<CreateApplicationMutation, CreateApplicationMutationVariables>;
export const CreateNoteDocument = gql`
    mutation createNote($applicationId: Int!, $userId: Int!, $orgId: Int, $comment: String!) {
  createApplicationNote(input: {applicationNote: {comment: $comment, applicationId: $applicationId, orgId: $orgId, userId: $userId}}) {
    applicationNote {
      id
      timestamp
      comment
    }
  }
}
    `;
export type CreateNoteMutationFn = Apollo.MutationFunction<CreateNoteMutation, CreateNoteMutationVariables>;

/**
 * __useCreateNoteMutation__
 *
 * To run a mutation, you first call `useCreateNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNoteMutation, { data, loading, error }] = useCreateNoteMutation({
 *   variables: {
 *      applicationId: // value for 'applicationId'
 *      userId: // value for 'userId'
 *      orgId: // value for 'orgId'
 *      comment: // value for 'comment'
 *   },
 * });
 */
export function useCreateNoteMutation(baseOptions?: Apollo.MutationHookOptions<CreateNoteMutation, CreateNoteMutationVariables>) {
        return Apollo.useMutation<CreateNoteMutation, CreateNoteMutationVariables>(CreateNoteDocument, baseOptions);
      }
export type CreateNoteMutationHookResult = ReturnType<typeof useCreateNoteMutation>;
export type CreateNoteMutationResult = Apollo.MutationResult<CreateNoteMutation>;
export type CreateNoteMutationOptions = Apollo.BaseMutationOptions<CreateNoteMutation, CreateNoteMutationVariables>;
export const CreateReviewDocument = gql`
    mutation createReview($reviewInput: ReviewInput!) {
  createReview(input: {review: $reviewInput}) {
    review {
      id
      reviewAssignment {
        id
        reviews {
          nodes {
            id
          }
        }
      }
    }
  }
}
    `;
export type CreateReviewMutationFn = Apollo.MutationFunction<CreateReviewMutation, CreateReviewMutationVariables>;

/**
 * __useCreateReviewMutation__
 *
 * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({
 *   variables: {
 *      reviewInput: // value for 'reviewInput'
 *   },
 * });
 */
export function useCreateReviewMutation(baseOptions?: Apollo.MutationHookOptions<CreateReviewMutation, CreateReviewMutationVariables>) {
        return Apollo.useMutation<CreateReviewMutation, CreateReviewMutationVariables>(CreateReviewDocument, baseOptions);
      }
export type CreateReviewMutationHookResult = ReturnType<typeof useCreateReviewMutation>;
export type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;
export type CreateReviewMutationOptions = Apollo.BaseMutationOptions<CreateReviewMutation, CreateReviewMutationVariables>;
export const CreateReviewResponseDocument = gql`
    mutation createReviewResponse($templateElementId: Int!, $applicationId: Int!, $stageNumber: Int!, $reviewId: Int!, $decision: ReviewResponseDecision!, $comment: String, $timeSubmitted: Datetime) {
  createApplicationResponse(input: {applicationResponse: {templateElementId: $templateElementId, value: null, reviewResponsesUsingId: {create: {comment: $comment, decision: $decision, status: DRAFT, templateElementId: $templateElementId, reviewId: $reviewId, recommendedApplicantVisibility: ORIGINAL_RESPONSE_VISIBLE_TO_APPLICANT}}, applicationId: $applicationId, status: SUBMITTED, stageNumber: $stageNumber, timeSubmitted: $timeSubmitted}}) {
    applicationResponse {
      id
      reviewResponses {
        nodes {
          id
          comment
          decision
        }
      }
    }
  }
}
    `;
export type CreateReviewResponseMutationFn = Apollo.MutationFunction<CreateReviewResponseMutation, CreateReviewResponseMutationVariables>;

/**
 * __useCreateReviewResponseMutation__
 *
 * To run a mutation, you first call `useCreateReviewResponseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReviewResponseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReviewResponseMutation, { data, loading, error }] = useCreateReviewResponseMutation({
 *   variables: {
 *      templateElementId: // value for 'templateElementId'
 *      applicationId: // value for 'applicationId'
 *      stageNumber: // value for 'stageNumber'
 *      reviewId: // value for 'reviewId'
 *      decision: // value for 'decision'
 *      comment: // value for 'comment'
 *      timeSubmitted: // value for 'timeSubmitted'
 *   },
 * });
 */
export function useCreateReviewResponseMutation(baseOptions?: Apollo.MutationHookOptions<CreateReviewResponseMutation, CreateReviewResponseMutationVariables>) {
        return Apollo.useMutation<CreateReviewResponseMutation, CreateReviewResponseMutationVariables>(CreateReviewResponseDocument, baseOptions);
      }
export type CreateReviewResponseMutationHookResult = ReturnType<typeof useCreateReviewResponseMutation>;
export type CreateReviewResponseMutationResult = Apollo.MutationResult<CreateReviewResponseMutation>;
export type CreateReviewResponseMutationOptions = Apollo.BaseMutationOptions<CreateReviewResponseMutation, CreateReviewResponseMutationVariables>;
export const DeleteApplicationDocument = gql`
    mutation deleteApplication($id: Int!) {
  deleteApplication(input: {id: $id}) {
    clientMutationId
  }
}
    `;
export type DeleteApplicationMutationFn = Apollo.MutationFunction<DeleteApplicationMutation, DeleteApplicationMutationVariables>;

/**
 * __useDeleteApplicationMutation__
 *
 * To run a mutation, you first call `useDeleteApplicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteApplicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteApplicationMutation, { data, loading, error }] = useDeleteApplicationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteApplicationMutation(baseOptions?: Apollo.MutationHookOptions<DeleteApplicationMutation, DeleteApplicationMutationVariables>) {
        return Apollo.useMutation<DeleteApplicationMutation, DeleteApplicationMutationVariables>(DeleteApplicationDocument, baseOptions);
      }
export type DeleteApplicationMutationHookResult = ReturnType<typeof useDeleteApplicationMutation>;
export type DeleteApplicationMutationResult = Apollo.MutationResult<DeleteApplicationMutation>;
export type DeleteApplicationMutationOptions = Apollo.BaseMutationOptions<DeleteApplicationMutation, DeleteApplicationMutationVariables>;
export const DeleteNoteDocument = gql`
    mutation deleteNote($noteId: Int!) {
  deleteApplicationNote(input: {id: $noteId}) {
    applicationNote {
      id
    }
  }
}
    `;
export type DeleteNoteMutationFn = Apollo.MutationFunction<DeleteNoteMutation, DeleteNoteMutationVariables>;

/**
 * __useDeleteNoteMutation__
 *
 * To run a mutation, you first call `useDeleteNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteNoteMutation, { data, loading, error }] = useDeleteNoteMutation({
 *   variables: {
 *      noteId: // value for 'noteId'
 *   },
 * });
 */
export function useDeleteNoteMutation(baseOptions?: Apollo.MutationHookOptions<DeleteNoteMutation, DeleteNoteMutationVariables>) {
        return Apollo.useMutation<DeleteNoteMutation, DeleteNoteMutationVariables>(DeleteNoteDocument, baseOptions);
      }
export type DeleteNoteMutationHookResult = ReturnType<typeof useDeleteNoteMutation>;
export type DeleteNoteMutationResult = Apollo.MutationResult<DeleteNoteMutation>;
export type DeleteNoteMutationOptions = Apollo.BaseMutationOptions<DeleteNoteMutation, DeleteNoteMutationVariables>;
export const RestartApplicationDocument = gql`
    mutation restartApplication($serial: String!, $applicationPatch: ApplicationPatch!) {
  updateApplicationBySerial(input: {serial: $serial, patch: $applicationPatch}) {
    application {
      ...Application
      applicationResponses {
        nodes {
          ...applicationResponseFragment
        }
      }
    }
  }
}
    ${ApplicationFragmentDoc}
${ApplicationResponseFragmentFragmentDoc}`;
export type RestartApplicationMutationFn = Apollo.MutationFunction<RestartApplicationMutation, RestartApplicationMutationVariables>;

/**
 * __useRestartApplicationMutation__
 *
 * To run a mutation, you first call `useRestartApplicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRestartApplicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [restartApplicationMutation, { data, loading, error }] = useRestartApplicationMutation({
 *   variables: {
 *      serial: // value for 'serial'
 *      applicationPatch: // value for 'applicationPatch'
 *   },
 * });
 */
export function useRestartApplicationMutation(baseOptions?: Apollo.MutationHookOptions<RestartApplicationMutation, RestartApplicationMutationVariables>) {
        return Apollo.useMutation<RestartApplicationMutation, RestartApplicationMutationVariables>(RestartApplicationDocument, baseOptions);
      }
export type RestartApplicationMutationHookResult = ReturnType<typeof useRestartApplicationMutation>;
export type RestartApplicationMutationResult = Apollo.MutationResult<RestartApplicationMutation>;
export type RestartApplicationMutationOptions = Apollo.BaseMutationOptions<RestartApplicationMutation, RestartApplicationMutationVariables>;
export const SubmitReviewDocument = gql`
    mutation submitReview($reviewId: Int!, $trigger: Trigger = ON_REVIEW_SUBMIT, $reviewResponses: [ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate!]) {
  updateReview(input: {id: $reviewId, patch: {trigger: $trigger, reviewResponsesUsingId: {updateById: $reviewResponses}}}) {
    review {
      id
      trigger
    }
  }
}
    `;
export type SubmitReviewMutationFn = Apollo.MutationFunction<SubmitReviewMutation, SubmitReviewMutationVariables>;

/**
 * __useSubmitReviewMutation__
 *
 * To run a mutation, you first call `useSubmitReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitReviewMutation, { data, loading, error }] = useSubmitReviewMutation({
 *   variables: {
 *      reviewId: // value for 'reviewId'
 *      trigger: // value for 'trigger'
 *      reviewResponses: // value for 'reviewResponses'
 *   },
 * });
 */
export function useSubmitReviewMutation(baseOptions?: Apollo.MutationHookOptions<SubmitReviewMutation, SubmitReviewMutationVariables>) {
        return Apollo.useMutation<SubmitReviewMutation, SubmitReviewMutationVariables>(SubmitReviewDocument, baseOptions);
      }
export type SubmitReviewMutationHookResult = ReturnType<typeof useSubmitReviewMutation>;
export type SubmitReviewMutationResult = Apollo.MutationResult<SubmitReviewMutation>;
export type SubmitReviewMutationOptions = Apollo.BaseMutationOptions<SubmitReviewMutation, SubmitReviewMutationVariables>;
export const DeleteWholeApplicationDocument = gql`
    mutation deleteWholeApplication($id: Int!) {
  deleteWholeApplication(input: {applicationId: $id}) {
    clientMutationId
  }
}
    `;
export type DeleteWholeApplicationMutationFn = Apollo.MutationFunction<DeleteWholeApplicationMutation, DeleteWholeApplicationMutationVariables>;

/**
 * __useDeleteWholeApplicationMutation__
 *
 * To run a mutation, you first call `useDeleteWholeApplicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteWholeApplicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteWholeApplicationMutation, { data, loading, error }] = useDeleteWholeApplicationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteWholeApplicationMutation(baseOptions?: Apollo.MutationHookOptions<DeleteWholeApplicationMutation, DeleteWholeApplicationMutationVariables>) {
        return Apollo.useMutation<DeleteWholeApplicationMutation, DeleteWholeApplicationMutationVariables>(DeleteWholeApplicationDocument, baseOptions);
      }
export type DeleteWholeApplicationMutationHookResult = ReturnType<typeof useDeleteWholeApplicationMutation>;
export type DeleteWholeApplicationMutationResult = Apollo.MutationResult<DeleteWholeApplicationMutation>;
export type DeleteWholeApplicationMutationOptions = Apollo.BaseMutationOptions<DeleteWholeApplicationMutation, DeleteWholeApplicationMutationVariables>;
export const UpdateTemplateDocument = gql`
    mutation updateTemplate($id: Int!, $templatePatch: TemplatePatch!) {
  updateTemplate(input: {id: $id, patch: $templatePatch}) {
    template {
      ...FullTemplate
    }
  }
}
    ${FullTemplateFragmentDoc}`;
export type UpdateTemplateMutationFn = Apollo.MutationFunction<UpdateTemplateMutation, UpdateTemplateMutationVariables>;

/**
 * __useUpdateTemplateMutation__
 *
 * To run a mutation, you first call `useUpdateTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTemplateMutation, { data, loading, error }] = useUpdateTemplateMutation({
 *   variables: {
 *      id: // value for 'id'
 *      templatePatch: // value for 'templatePatch'
 *   },
 * });
 */
export function useUpdateTemplateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTemplateMutation, UpdateTemplateMutationVariables>) {
        return Apollo.useMutation<UpdateTemplateMutation, UpdateTemplateMutationVariables>(UpdateTemplateDocument, baseOptions);
      }
export type UpdateTemplateMutationHookResult = ReturnType<typeof useUpdateTemplateMutation>;
export type UpdateTemplateMutationResult = Apollo.MutationResult<UpdateTemplateMutation>;
export type UpdateTemplateMutationOptions = Apollo.BaseMutationOptions<UpdateTemplateMutation, UpdateTemplateMutationVariables>;
export const UpdateTemplateFilterJoinDocument = gql`
    mutation updateTemplateFilterJoin($id: Int!, $filterJoinPatch: TemplateFilterJoinPatch!) {
  updateTemplateFilterJoin(input: {patch: $filterJoinPatch, id: $id}) {
    clientMutationId
    templateFilterJoin {
      id
      filterId
      filter {
        id
        code
        query
        title
        userRole
      }
    }
  }
}
    `;
export type UpdateTemplateFilterJoinMutationFn = Apollo.MutationFunction<UpdateTemplateFilterJoinMutation, UpdateTemplateFilterJoinMutationVariables>;

/**
 * __useUpdateTemplateFilterJoinMutation__
 *
 * To run a mutation, you first call `useUpdateTemplateFilterJoinMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTemplateFilterJoinMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTemplateFilterJoinMutation, { data, loading, error }] = useUpdateTemplateFilterJoinMutation({
 *   variables: {
 *      id: // value for 'id'
 *      filterJoinPatch: // value for 'filterJoinPatch'
 *   },
 * });
 */
export function useUpdateTemplateFilterJoinMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTemplateFilterJoinMutation, UpdateTemplateFilterJoinMutationVariables>) {
        return Apollo.useMutation<UpdateTemplateFilterJoinMutation, UpdateTemplateFilterJoinMutationVariables>(UpdateTemplateFilterJoinDocument, baseOptions);
      }
export type UpdateTemplateFilterJoinMutationHookResult = ReturnType<typeof useUpdateTemplateFilterJoinMutation>;
export type UpdateTemplateFilterJoinMutationResult = Apollo.MutationResult<UpdateTemplateFilterJoinMutation>;
export type UpdateTemplateFilterJoinMutationOptions = Apollo.BaseMutationOptions<UpdateTemplateFilterJoinMutation, UpdateTemplateFilterJoinMutationVariables>;
export const UpdateTemplateSectionDocument = gql`
    mutation updateTemplateSection($id: Int!, $sectionPatch: TemplateSectionPatch!) {
  updateTemplateSection(input: {id: $id, patch: $sectionPatch}) {
    templateSection {
      id
      index
      code
      templateId
      title
      templateElementsBySectionId {
        nodes {
          ...elementFragment
          applicationResponses {
            nodes {
              id
              application {
                id
                serial
                applicationResponses {
                  nodes {
                    id
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${ElementFragmentFragmentDoc}`;
export type UpdateTemplateSectionMutationFn = Apollo.MutationFunction<UpdateTemplateSectionMutation, UpdateTemplateSectionMutationVariables>;

/**
 * __useUpdateTemplateSectionMutation__
 *
 * To run a mutation, you first call `useUpdateTemplateSectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTemplateSectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTemplateSectionMutation, { data, loading, error }] = useUpdateTemplateSectionMutation({
 *   variables: {
 *      id: // value for 'id'
 *      sectionPatch: // value for 'sectionPatch'
 *   },
 * });
 */
export function useUpdateTemplateSectionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTemplateSectionMutation, UpdateTemplateSectionMutationVariables>) {
        return Apollo.useMutation<UpdateTemplateSectionMutation, UpdateTemplateSectionMutationVariables>(UpdateTemplateSectionDocument, baseOptions);
      }
export type UpdateTemplateSectionMutationHookResult = ReturnType<typeof useUpdateTemplateSectionMutation>;
export type UpdateTemplateSectionMutationResult = Apollo.MutationResult<UpdateTemplateSectionMutation>;
export type UpdateTemplateSectionMutationOptions = Apollo.BaseMutationOptions<UpdateTemplateSectionMutation, UpdateTemplateSectionMutationVariables>;
export const UpdateTemplateStageDocument = gql`
    mutation updateTemplateStage($id: Int!, $templateStagePatch: TemplateStagePatch!) {
  updateTemplateStage(input: {id: $id, patch: $templateStagePatch}) {
    templateStage {
      id
      number
      colour
      title
      description
      templateStageReviewLevelsByStageId {
        nodes {
          description
          id
          name
          number
        }
      }
    }
  }
}
    `;
export type UpdateTemplateStageMutationFn = Apollo.MutationFunction<UpdateTemplateStageMutation, UpdateTemplateStageMutationVariables>;

/**
 * __useUpdateTemplateStageMutation__
 *
 * To run a mutation, you first call `useUpdateTemplateStageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTemplateStageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTemplateStageMutation, { data, loading, error }] = useUpdateTemplateStageMutation({
 *   variables: {
 *      id: // value for 'id'
 *      templateStagePatch: // value for 'templateStagePatch'
 *   },
 * });
 */
export function useUpdateTemplateStageMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTemplateStageMutation, UpdateTemplateStageMutationVariables>) {
        return Apollo.useMutation<UpdateTemplateStageMutation, UpdateTemplateStageMutationVariables>(UpdateTemplateStageDocument, baseOptions);
      }
export type UpdateTemplateStageMutationHookResult = ReturnType<typeof useUpdateTemplateStageMutation>;
export type UpdateTemplateStageMutationResult = Apollo.MutationResult<UpdateTemplateStageMutation>;
export type UpdateTemplateStageMutationOptions = Apollo.BaseMutationOptions<UpdateTemplateStageMutation, UpdateTemplateStageMutationVariables>;
export const UpdateApplicationDocument = gql`
    mutation updateApplication($serial: String!, $applicationTrigger: Trigger = ON_APPLICATION_SUBMIT, $responses: [ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate!]) {
  updateApplicationBySerial(input: {serial: $serial, patch: {trigger: $applicationTrigger, applicationResponsesUsingId: {updateById: $responses}}}) {
    application {
      ...Application
    }
  }
}
    ${ApplicationFragmentDoc}`;
export type UpdateApplicationMutationFn = Apollo.MutationFunction<UpdateApplicationMutation, UpdateApplicationMutationVariables>;

/**
 * __useUpdateApplicationMutation__
 *
 * To run a mutation, you first call `useUpdateApplicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateApplicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateApplicationMutation, { data, loading, error }] = useUpdateApplicationMutation({
 *   variables: {
 *      serial: // value for 'serial'
 *      applicationTrigger: // value for 'applicationTrigger'
 *      responses: // value for 'responses'
 *   },
 * });
 */
export function useUpdateApplicationMutation(baseOptions?: Apollo.MutationHookOptions<UpdateApplicationMutation, UpdateApplicationMutationVariables>) {
        return Apollo.useMutation<UpdateApplicationMutation, UpdateApplicationMutationVariables>(UpdateApplicationDocument, baseOptions);
      }
export type UpdateApplicationMutationHookResult = ReturnType<typeof useUpdateApplicationMutation>;
export type UpdateApplicationMutationResult = Apollo.MutationResult<UpdateApplicationMutation>;
export type UpdateApplicationMutationOptions = Apollo.BaseMutationOptions<UpdateApplicationMutation, UpdateApplicationMutationVariables>;
export const UpdateResponseDocument = gql`
    mutation updateResponse($id: Int!, $value: JSON, $isValid: Boolean, $stageNumber: Int, $evaluatedParameters: JSON) {
  updateApplicationResponse(input: {id: $id, patch: {value: $value, isValid: $isValid, stageNumber: $stageNumber, evaluatedParameters: $evaluatedParameters}}) {
    applicationResponse {
      ...applicationResponseFragment
      templateElement {
        ...elementFragment
      }
    }
  }
}
    ${ApplicationResponseFragmentFragmentDoc}
${ElementFragmentFragmentDoc}`;
export type UpdateResponseMutationFn = Apollo.MutationFunction<UpdateResponseMutation, UpdateResponseMutationVariables>;

/**
 * __useUpdateResponseMutation__
 *
 * To run a mutation, you first call `useUpdateResponseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateResponseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateResponseMutation, { data, loading, error }] = useUpdateResponseMutation({
 *   variables: {
 *      id: // value for 'id'
 *      value: // value for 'value'
 *      isValid: // value for 'isValid'
 *      stageNumber: // value for 'stageNumber'
 *      evaluatedParameters: // value for 'evaluatedParameters'
 *   },
 * });
 */
export function useUpdateResponseMutation(baseOptions?: Apollo.MutationHookOptions<UpdateResponseMutation, UpdateResponseMutationVariables>) {
        return Apollo.useMutation<UpdateResponseMutation, UpdateResponseMutationVariables>(UpdateResponseDocument, baseOptions);
      }
export type UpdateResponseMutationHookResult = ReturnType<typeof useUpdateResponseMutation>;
export type UpdateResponseMutationResult = Apollo.MutationResult<UpdateResponseMutation>;
export type UpdateResponseMutationOptions = Apollo.BaseMutationOptions<UpdateResponseMutation, UpdateResponseMutationVariables>;
export const UpdateReviewDocument = gql`
    mutation updateReview($reviewId: Int!, $reviewPatch: ReviewPatch!) {
  updateReview(input: {id: $reviewId, patch: $reviewPatch}) {
    review {
      id
      trigger
      reviewResponses {
        nodes {
          id
          decision
          comment
        }
      }
      reviewDecisions {
        nodes {
          id
          decision
          comment
          timeUpdated
        }
      }
    }
  }
}
    `;
export type UpdateReviewMutationFn = Apollo.MutationFunction<UpdateReviewMutation, UpdateReviewMutationVariables>;

/**
 * __useUpdateReviewMutation__
 *
 * To run a mutation, you first call `useUpdateReviewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewMutation, { data, loading, error }] = useUpdateReviewMutation({
 *   variables: {
 *      reviewId: // value for 'reviewId'
 *      reviewPatch: // value for 'reviewPatch'
 *   },
 * });
 */
export function useUpdateReviewMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewMutation, UpdateReviewMutationVariables>) {
        return Apollo.useMutation<UpdateReviewMutation, UpdateReviewMutationVariables>(UpdateReviewDocument, baseOptions);
      }
export type UpdateReviewMutationHookResult = ReturnType<typeof useUpdateReviewMutation>;
export type UpdateReviewMutationResult = Apollo.MutationResult<UpdateReviewMutation>;
export type UpdateReviewMutationOptions = Apollo.BaseMutationOptions<UpdateReviewMutation, UpdateReviewMutationVariables>;
export const UpdateReviewAssignmentDocument = gql`
    mutation updateReviewAssignment($assignmentId: Int!, $assignmentPatch: ReviewAssignmentPatch!) {
  updateReviewAssignment(input: {id: $assignmentId, patch: $assignmentPatch}) {
    reviewAssignment {
      id
      status
      timeUpdated
    }
  }
}
    `;
export type UpdateReviewAssignmentMutationFn = Apollo.MutationFunction<UpdateReviewAssignmentMutation, UpdateReviewAssignmentMutationVariables>;

/**
 * __useUpdateReviewAssignmentMutation__
 *
 * To run a mutation, you first call `useUpdateReviewAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewAssignmentMutation, { data, loading, error }] = useUpdateReviewAssignmentMutation({
 *   variables: {
 *      assignmentId: // value for 'assignmentId'
 *      assignmentPatch: // value for 'assignmentPatch'
 *   },
 * });
 */
export function useUpdateReviewAssignmentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewAssignmentMutation, UpdateReviewAssignmentMutationVariables>) {
        return Apollo.useMutation<UpdateReviewAssignmentMutation, UpdateReviewAssignmentMutationVariables>(UpdateReviewAssignmentDocument, baseOptions);
      }
export type UpdateReviewAssignmentMutationHookResult = ReturnType<typeof useUpdateReviewAssignmentMutation>;
export type UpdateReviewAssignmentMutationResult = Apollo.MutationResult<UpdateReviewAssignmentMutation>;
export type UpdateReviewAssignmentMutationOptions = Apollo.BaseMutationOptions<UpdateReviewAssignmentMutation, UpdateReviewAssignmentMutationVariables>;
export const UpdateReviewDecisionCommentDocument = gql`
    mutation updateReviewDecisionComment($reviewDecisionId: Int!, $comment: String!) {
  updateReviewDecision(input: {id: $reviewDecisionId, patch: {comment: $comment}}) {
    reviewDecision {
      id
      decision
      comment
    }
  }
}
    `;
export type UpdateReviewDecisionCommentMutationFn = Apollo.MutationFunction<UpdateReviewDecisionCommentMutation, UpdateReviewDecisionCommentMutationVariables>;

/**
 * __useUpdateReviewDecisionCommentMutation__
 *
 * To run a mutation, you first call `useUpdateReviewDecisionCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewDecisionCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewDecisionCommentMutation, { data, loading, error }] = useUpdateReviewDecisionCommentMutation({
 *   variables: {
 *      reviewDecisionId: // value for 'reviewDecisionId'
 *      comment: // value for 'comment'
 *   },
 * });
 */
export function useUpdateReviewDecisionCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewDecisionCommentMutation, UpdateReviewDecisionCommentMutationVariables>) {
        return Apollo.useMutation<UpdateReviewDecisionCommentMutation, UpdateReviewDecisionCommentMutationVariables>(UpdateReviewDecisionCommentDocument, baseOptions);
      }
export type UpdateReviewDecisionCommentMutationHookResult = ReturnType<typeof useUpdateReviewDecisionCommentMutation>;
export type UpdateReviewDecisionCommentMutationResult = Apollo.MutationResult<UpdateReviewDecisionCommentMutation>;
export type UpdateReviewDecisionCommentMutationOptions = Apollo.BaseMutationOptions<UpdateReviewDecisionCommentMutation, UpdateReviewDecisionCommentMutationVariables>;
export const UpdateReviewResponseDocument = gql`
    mutation updateReviewResponse($id: Int!, $decision: ReviewResponseDecision, $comment: String, $stageNumber: Int!, $recommendedApplicantVisibility: ReviewResponseRecommendedApplicantVisibility = ORIGINAL_RESPONSE_NOT_VISIBLE_TO_APPLICANT) {
  updateReviewResponse(input: {id: $id, patch: {decision: $decision, comment: $comment, stageNumber: $stageNumber, recommendedApplicantVisibility: $recommendedApplicantVisibility}}) {
    reviewResponse {
      ...reviewResponseFragment
    }
  }
}
    ${ReviewResponseFragmentFragmentDoc}`;
export type UpdateReviewResponseMutationFn = Apollo.MutationFunction<UpdateReviewResponseMutation, UpdateReviewResponseMutationVariables>;

/**
 * __useUpdateReviewResponseMutation__
 *
 * To run a mutation, you first call `useUpdateReviewResponseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateReviewResponseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateReviewResponseMutation, { data, loading, error }] = useUpdateReviewResponseMutation({
 *   variables: {
 *      id: // value for 'id'
 *      decision: // value for 'decision'
 *      comment: // value for 'comment'
 *      stageNumber: // value for 'stageNumber'
 *      recommendedApplicantVisibility: // value for 'recommendedApplicantVisibility'
 *   },
 * });
 */
export function useUpdateReviewResponseMutation(baseOptions?: Apollo.MutationHookOptions<UpdateReviewResponseMutation, UpdateReviewResponseMutationVariables>) {
        return Apollo.useMutation<UpdateReviewResponseMutation, UpdateReviewResponseMutationVariables>(UpdateReviewResponseDocument, baseOptions);
      }
export type UpdateReviewResponseMutationHookResult = ReturnType<typeof useUpdateReviewResponseMutation>;
export type UpdateReviewResponseMutationResult = Apollo.MutationResult<UpdateReviewResponseMutation>;
export type UpdateReviewResponseMutationOptions = Apollo.BaseMutationOptions<UpdateReviewResponseMutation, UpdateReviewResponseMutationVariables>;
export const GetAppplicantFilterListDocument = gql`
    query getAppplicantFilterList($searchValue: String!, $templateCode: String!) {
  applicationListFilterApplicant(applicant: $searchValue, templateCode: $templateCode) {
    nodes
    totalCount
  }
}
    `;

/**
 * __useGetAppplicantFilterListQuery__
 *
 * To run a query within a React component, call `useGetAppplicantFilterListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAppplicantFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAppplicantFilterListQuery({
 *   variables: {
 *      searchValue: // value for 'searchValue'
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetAppplicantFilterListQuery(baseOptions?: Apollo.QueryHookOptions<GetAppplicantFilterListQuery, GetAppplicantFilterListQueryVariables>) {
        return Apollo.useQuery<GetAppplicantFilterListQuery, GetAppplicantFilterListQueryVariables>(GetAppplicantFilterListDocument, baseOptions);
      }
export function useGetAppplicantFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAppplicantFilterListQuery, GetAppplicantFilterListQueryVariables>) {
          return Apollo.useLazyQuery<GetAppplicantFilterListQuery, GetAppplicantFilterListQueryVariables>(GetAppplicantFilterListDocument, baseOptions);
        }
export type GetAppplicantFilterListQueryHookResult = ReturnType<typeof useGetAppplicantFilterListQuery>;
export type GetAppplicantFilterListLazyQueryHookResult = ReturnType<typeof useGetAppplicantFilterListLazyQuery>;
export type GetAppplicantFilterListQueryResult = Apollo.QueryResult<GetAppplicantFilterListQuery, GetAppplicantFilterListQueryVariables>;
export const GetAssignerFilterListDocument = gql`
    query getAssignerFilterList($searchValue: String!, $templateCode: String!) {
  applicationListFilterAssigner(assigner: $searchValue, templateCode: $templateCode) {
    nodes
    totalCount
  }
}
    `;

/**
 * __useGetAssignerFilterListQuery__
 *
 * To run a query within a React component, call `useGetAssignerFilterListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAssignerFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAssignerFilterListQuery({
 *   variables: {
 *      searchValue: // value for 'searchValue'
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetAssignerFilterListQuery(baseOptions?: Apollo.QueryHookOptions<GetAssignerFilterListQuery, GetAssignerFilterListQueryVariables>) {
        return Apollo.useQuery<GetAssignerFilterListQuery, GetAssignerFilterListQueryVariables>(GetAssignerFilterListDocument, baseOptions);
      }
export function useGetAssignerFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAssignerFilterListQuery, GetAssignerFilterListQueryVariables>) {
          return Apollo.useLazyQuery<GetAssignerFilterListQuery, GetAssignerFilterListQueryVariables>(GetAssignerFilterListDocument, baseOptions);
        }
export type GetAssignerFilterListQueryHookResult = ReturnType<typeof useGetAssignerFilterListQuery>;
export type GetAssignerFilterListLazyQueryHookResult = ReturnType<typeof useGetAssignerFilterListLazyQuery>;
export type GetAssignerFilterListQueryResult = Apollo.QueryResult<GetAssignerFilterListQuery, GetAssignerFilterListQueryVariables>;
export const GetOrganisationFilterListDocument = gql`
    query getOrganisationFilterList($searchValue: String!, $templateCode: String!) {
  applicationListFilterOrganisation(organisation: $searchValue, templateCode: $templateCode) {
    nodes
    totalCount
  }
}
    `;

/**
 * __useGetOrganisationFilterListQuery__
 *
 * To run a query within a React component, call `useGetOrganisationFilterListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrganisationFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrganisationFilterListQuery({
 *   variables: {
 *      searchValue: // value for 'searchValue'
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetOrganisationFilterListQuery(baseOptions?: Apollo.QueryHookOptions<GetOrganisationFilterListQuery, GetOrganisationFilterListQueryVariables>) {
        return Apollo.useQuery<GetOrganisationFilterListQuery, GetOrganisationFilterListQueryVariables>(GetOrganisationFilterListDocument, baseOptions);
      }
export function useGetOrganisationFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrganisationFilterListQuery, GetOrganisationFilterListQueryVariables>) {
          return Apollo.useLazyQuery<GetOrganisationFilterListQuery, GetOrganisationFilterListQueryVariables>(GetOrganisationFilterListDocument, baseOptions);
        }
export type GetOrganisationFilterListQueryHookResult = ReturnType<typeof useGetOrganisationFilterListQuery>;
export type GetOrganisationFilterListLazyQueryHookResult = ReturnType<typeof useGetOrganisationFilterListLazyQuery>;
export type GetOrganisationFilterListQueryResult = Apollo.QueryResult<GetOrganisationFilterListQuery, GetOrganisationFilterListQueryVariables>;
export const GetReviewersFilterListDocument = gql`
    query getReviewersFilterList($searchValue: String!, $templateCode: String!) {
  applicationListFilterReviewer(reviewer: $searchValue, templateCode: $templateCode) {
    nodes
    totalCount
  }
}
    `;

/**
 * __useGetReviewersFilterListQuery__
 *
 * To run a query within a React component, call `useGetReviewersFilterListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReviewersFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReviewersFilterListQuery({
 *   variables: {
 *      searchValue: // value for 'searchValue'
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetReviewersFilterListQuery(baseOptions?: Apollo.QueryHookOptions<GetReviewersFilterListQuery, GetReviewersFilterListQueryVariables>) {
        return Apollo.useQuery<GetReviewersFilterListQuery, GetReviewersFilterListQueryVariables>(GetReviewersFilterListDocument, baseOptions);
      }
export function useGetReviewersFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReviewersFilterListQuery, GetReviewersFilterListQueryVariables>) {
          return Apollo.useLazyQuery<GetReviewersFilterListQuery, GetReviewersFilterListQueryVariables>(GetReviewersFilterListDocument, baseOptions);
        }
export type GetReviewersFilterListQueryHookResult = ReturnType<typeof useGetReviewersFilterListQuery>;
export type GetReviewersFilterListLazyQueryHookResult = ReturnType<typeof useGetReviewersFilterListLazyQuery>;
export type GetReviewersFilterListQueryResult = Apollo.QueryResult<GetReviewersFilterListQuery, GetReviewersFilterListQueryVariables>;
export const GetStageFilterListDocument = gql`
    query getStageFilterList($templateCode: String!) {
  applicationListFilterStage(templateCode: $templateCode) {
    nodes
    totalCount
  }
}
    `;

/**
 * __useGetStageFilterListQuery__
 *
 * To run a query within a React component, call `useGetStageFilterListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStageFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStageFilterListQuery({
 *   variables: {
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetStageFilterListQuery(baseOptions?: Apollo.QueryHookOptions<GetStageFilterListQuery, GetStageFilterListQueryVariables>) {
        return Apollo.useQuery<GetStageFilterListQuery, GetStageFilterListQueryVariables>(GetStageFilterListDocument, baseOptions);
      }
export function useGetStageFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStageFilterListQuery, GetStageFilterListQueryVariables>) {
          return Apollo.useLazyQuery<GetStageFilterListQuery, GetStageFilterListQueryVariables>(GetStageFilterListDocument, baseOptions);
        }
export type GetStageFilterListQueryHookResult = ReturnType<typeof useGetStageFilterListQuery>;
export type GetStageFilterListLazyQueryHookResult = ReturnType<typeof useGetStageFilterListLazyQuery>;
export type GetStageFilterListQueryResult = Apollo.QueryResult<GetStageFilterListQuery, GetStageFilterListQueryVariables>;
export const GetActivityLogDocument = gql`
    query getActivityLog($applicationId: Int!) {
  activityLogs(condition: {applicationId: $applicationId}, orderBy: TIMESTAMP_ASC) {
    nodes {
      value
      type
      timestamp
      table
      recordId
      nodeId
      id
      details
      applicationId
    }
  }
}
    `;

/**
 * __useGetActivityLogQuery__
 *
 * To run a query within a React component, call `useGetActivityLogQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetActivityLogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetActivityLogQuery({
 *   variables: {
 *      applicationId: // value for 'applicationId'
 *   },
 * });
 */
export function useGetActivityLogQuery(baseOptions?: Apollo.QueryHookOptions<GetActivityLogQuery, GetActivityLogQueryVariables>) {
        return Apollo.useQuery<GetActivityLogQuery, GetActivityLogQueryVariables>(GetActivityLogDocument, baseOptions);
      }
export function useGetActivityLogLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetActivityLogQuery, GetActivityLogQueryVariables>) {
          return Apollo.useLazyQuery<GetActivityLogQuery, GetActivityLogQueryVariables>(GetActivityLogDocument, baseOptions);
        }
export type GetActivityLogQueryHookResult = ReturnType<typeof useGetActivityLogQuery>;
export type GetActivityLogLazyQueryHookResult = ReturnType<typeof useGetActivityLogLazyQuery>;
export type GetActivityLogQueryResult = Apollo.QueryResult<GetActivityLogQuery, GetActivityLogQueryVariables>;
export const GetAllLookupTableStructuresDocument = gql`
    query getAllLookupTableStructures {
  dataTables(condition: {isLookupTable: true}) {
    nodes {
      id
      tableName
      displayName
      fieldMap
    }
  }
}
    `;

/**
 * __useGetAllLookupTableStructuresQuery__
 *
 * To run a query within a React component, call `useGetAllLookupTableStructuresQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllLookupTableStructuresQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllLookupTableStructuresQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllLookupTableStructuresQuery(baseOptions?: Apollo.QueryHookOptions<GetAllLookupTableStructuresQuery, GetAllLookupTableStructuresQueryVariables>) {
        return Apollo.useQuery<GetAllLookupTableStructuresQuery, GetAllLookupTableStructuresQueryVariables>(GetAllLookupTableStructuresDocument, baseOptions);
      }
export function useGetAllLookupTableStructuresLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllLookupTableStructuresQuery, GetAllLookupTableStructuresQueryVariables>) {
          return Apollo.useLazyQuery<GetAllLookupTableStructuresQuery, GetAllLookupTableStructuresQueryVariables>(GetAllLookupTableStructuresDocument, baseOptions);
        }
export type GetAllLookupTableStructuresQueryHookResult = ReturnType<typeof useGetAllLookupTableStructuresQuery>;
export type GetAllLookupTableStructuresLazyQueryHookResult = ReturnType<typeof useGetAllLookupTableStructuresLazyQuery>;
export type GetAllLookupTableStructuresQueryResult = Apollo.QueryResult<GetAllLookupTableStructuresQuery, GetAllLookupTableStructuresQueryVariables>;
export const GetAllResponsesDocument = gql`
    query getAllResponses($serial: String!, $responseStatuses: [ApplicationResponseStatus!]) {
  applicationBySerial(serial: $serial) {
    id
    serial
    applicationResponses(orderBy: TIME_UPDATED_DESC, filter: {status: {in: $responseStatuses}}) {
      nodes {
        ...applicationResponseFragment
        reviewResponses(condition: {isVisibleToApplicant: true}) {
          nodes {
            ...reviewResponseFragment
          }
        }
      }
    }
  }
}
    ${ApplicationResponseFragmentFragmentDoc}
${ReviewResponseFragmentFragmentDoc}`;

/**
 * __useGetAllResponsesQuery__
 *
 * To run a query within a React component, call `useGetAllResponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllResponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllResponsesQuery({
 *   variables: {
 *      serial: // value for 'serial'
 *      responseStatuses: // value for 'responseStatuses'
 *   },
 * });
 */
export function useGetAllResponsesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllResponsesQuery, GetAllResponsesQueryVariables>) {
        return Apollo.useQuery<GetAllResponsesQuery, GetAllResponsesQueryVariables>(GetAllResponsesDocument, baseOptions);
      }
export function useGetAllResponsesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllResponsesQuery, GetAllResponsesQueryVariables>) {
          return Apollo.useLazyQuery<GetAllResponsesQuery, GetAllResponsesQueryVariables>(GetAllResponsesDocument, baseOptions);
        }
export type GetAllResponsesQueryHookResult = ReturnType<typeof useGetAllResponsesQuery>;
export type GetAllResponsesLazyQueryHookResult = ReturnType<typeof useGetAllResponsesLazyQuery>;
export type GetAllResponsesQueryResult = Apollo.QueryResult<GetAllResponsesQuery, GetAllResponsesQueryVariables>;
export const GetApplicationDocument = gql`
    query getApplication($serial: String!) {
  applicationBySerial(serial: $serial) {
    ...Application
    template {
      ...templateFragment
      templateSections(orderBy: INDEX_ASC) {
        nodes {
          ...Section
          templateElementsBySectionId(orderBy: INDEX_ASC) {
            nodes {
              ...elementFragment
            }
          }
        }
      }
      templateStages {
        nodes {
          ...TemplateStage
        }
      }
      previewActions: templateActions(condition: {trigger: ON_PREVIEW}) {
        totalCount
      }
    }
    user {
      ...User
    }
    org {
      ...Organisation
    }
    triggerSchedules {
      nodes {
        id
        timeScheduled
        eventCode
        isActive
      }
    }
  }
  applicationStageStatusLatests(condition: {serial: $serial}) {
    nodes {
      ...Stage
    }
  }
}
    ${ApplicationFragmentDoc}
${TemplateFragmentFragmentDoc}
${SectionFragmentDoc}
${ElementFragmentFragmentDoc}
${TemplateStageFragmentDoc}
${UserFragmentDoc}
${OrganisationFragmentDoc}
${StageFragmentDoc}`;

/**
 * __useGetApplicationQuery__
 *
 * To run a query within a React component, call `useGetApplicationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplicationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplicationQuery({
 *   variables: {
 *      serial: // value for 'serial'
 *   },
 * });
 */
export function useGetApplicationQuery(baseOptions?: Apollo.QueryHookOptions<GetApplicationQuery, GetApplicationQueryVariables>) {
        return Apollo.useQuery<GetApplicationQuery, GetApplicationQueryVariables>(GetApplicationDocument, baseOptions);
      }
export function useGetApplicationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplicationQuery, GetApplicationQueryVariables>) {
          return Apollo.useLazyQuery<GetApplicationQuery, GetApplicationQueryVariables>(GetApplicationDocument, baseOptions);
        }
export type GetApplicationQueryHookResult = ReturnType<typeof useGetApplicationQuery>;
export type GetApplicationLazyQueryHookResult = ReturnType<typeof useGetApplicationLazyQuery>;
export type GetApplicationQueryResult = Apollo.QueryResult<GetApplicationQuery, GetApplicationQueryVariables>;
export const GetApplicationSerialDocument = gql`
    query getApplicationSerial($id: Int!) {
  application(id: $id) {
    serial
    name
    trigger
  }
}
    `;

/**
 * __useGetApplicationSerialQuery__
 *
 * To run a query within a React component, call `useGetApplicationSerialQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplicationSerialQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplicationSerialQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetApplicationSerialQuery(baseOptions?: Apollo.QueryHookOptions<GetApplicationSerialQuery, GetApplicationSerialQueryVariables>) {
        return Apollo.useQuery<GetApplicationSerialQuery, GetApplicationSerialQueryVariables>(GetApplicationSerialDocument, baseOptions);
      }
export function useGetApplicationSerialLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplicationSerialQuery, GetApplicationSerialQueryVariables>) {
          return Apollo.useLazyQuery<GetApplicationSerialQuery, GetApplicationSerialQueryVariables>(GetApplicationSerialDocument, baseOptions);
        }
export type GetApplicationSerialQueryHookResult = ReturnType<typeof useGetApplicationSerialQuery>;
export type GetApplicationSerialLazyQueryHookResult = ReturnType<typeof useGetApplicationSerialLazyQuery>;
export type GetApplicationSerialQueryResult = Apollo.QueryResult<GetApplicationSerialQuery, GetApplicationSerialQueryVariables>;
export const GetApplicationListDocument = gql`
    query getApplicationList($filters: ApplicationListShapeFilter, $sortFields: [ApplicationListShapesOrderBy!], $paginationOffset: Int, $numberToFetch: Int, $userId: Int! = 0, $templateCode: String!) {
  applicationList(filter: $filters, orderBy: $sortFields, offset: $paginationOffset, first: $numberToFetch, userid: $userId) {
    nodes {
      id
      serial
      name
      templateCode
      templateName
      applicant
      orgName
      stage
      stageColour
      status
      outcome
      lastActiveDate
      applicantDeadline
      reviewerAction
      assignerAction
      assigners
      reviewers
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
    }
    totalCount
  }
  templates(condition: {status: AVAILABLE, code: $templateCode}) {
    nodes {
      code
      name
      namePlural
    }
  }
}
    `;

/**
 * __useGetApplicationListQuery__
 *
 * To run a query within a React component, call `useGetApplicationListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplicationListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplicationListQuery({
 *   variables: {
 *      filters: // value for 'filters'
 *      sortFields: // value for 'sortFields'
 *      paginationOffset: // value for 'paginationOffset'
 *      numberToFetch: // value for 'numberToFetch'
 *      userId: // value for 'userId'
 *      templateCode: // value for 'templateCode'
 *   },
 * });
 */
export function useGetApplicationListQuery(baseOptions?: Apollo.QueryHookOptions<GetApplicationListQuery, GetApplicationListQueryVariables>) {
        return Apollo.useQuery<GetApplicationListQuery, GetApplicationListQueryVariables>(GetApplicationListDocument, baseOptions);
      }
export function useGetApplicationListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplicationListQuery, GetApplicationListQueryVariables>) {
          return Apollo.useLazyQuery<GetApplicationListQuery, GetApplicationListQueryVariables>(GetApplicationListDocument, baseOptions);
        }
export type GetApplicationListQueryHookResult = ReturnType<typeof useGetApplicationListQuery>;
export type GetApplicationListLazyQueryHookResult = ReturnType<typeof useGetApplicationListLazyQuery>;
export type GetApplicationListQueryResult = Apollo.QueryResult<GetApplicationListQuery, GetApplicationListQueryVariables>;
export const GetApplicationDocsDocument = gql`
    query getApplicationDocs($applicationSerial: String!) {
  files(condition: {applicationSerial: $applicationSerial, isOutputDoc: true}) {
    nodes {
      uniqueId
      description
      filePath
      originalFilename
      thumbnailPath
      timestamp
    }
  }
}
    `;

/**
 * __useGetApplicationDocsQuery__
 *
 * To run a query within a React component, call `useGetApplicationDocsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplicationDocsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplicationDocsQuery({
 *   variables: {
 *      applicationSerial: // value for 'applicationSerial'
 *   },
 * });
 */
export function useGetApplicationDocsQuery(baseOptions?: Apollo.QueryHookOptions<GetApplicationDocsQuery, GetApplicationDocsQueryVariables>) {
        return Apollo.useQuery<GetApplicationDocsQuery, GetApplicationDocsQueryVariables>(GetApplicationDocsDocument, baseOptions);
      }
export function useGetApplicationDocsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplicationDocsQuery, GetApplicationDocsQueryVariables>) {
          return Apollo.useLazyQuery<GetApplicationDocsQuery, GetApplicationDocsQueryVariables>(GetApplicationDocsDocument, baseOptions);
        }
export type GetApplicationDocsQueryHookResult = ReturnType<typeof useGetApplicationDocsQuery>;
export type GetApplicationDocsLazyQueryHookResult = ReturnType<typeof useGetApplicationDocsLazyQuery>;
export type GetApplicationDocsQueryResult = Apollo.QueryResult<GetApplicationDocsQuery, GetApplicationDocsQueryVariables>;
export const GetHistoryForApplicantDocument = gql`
    query getHistoryForApplicant($serial: String!, $questionCode: String!, $templateCode: String!, $templateVersion: Int!) {
  templateElementByTemplateCodeAndCodeAndTemplateVersion(code: $questionCode, templateCode: $templateCode, templateVersion: $templateVersion) {
    ...elementFragment
    reviewResponses(filter: {isVisibleToApplicant: {equalTo: true}}) {
      nodes {
        ...reviewResponseFragment
        review {
          stageNumber
        }
      }
    }
    applicationResponses(filter: {application: {serial: {equalTo: $serial}}}) {
      nodes {
        ...applicationResponseFragment
        application {
          ...Application
          user {
            ...User
          }
          stageNumber
        }
      }
    }
  }
}
    ${ElementFragmentFragmentDoc}
${ReviewResponseFragmentFragmentDoc}
${ApplicationResponseFragmentFragmentDoc}
${ApplicationFragmentDoc}
${UserFragmentDoc}`;

/**
 * __useGetHistoryForApplicantQuery__
 *
 * To run a query within a React component, call `useGetHistoryForApplicantQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHistoryForApplicantQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHistoryForApplicantQuery({
 *   variables: {
 *      serial: // value for 'serial'
 *      questionCode: // value for 'questionCode'
 *      templateCode: // value for 'templateCode'
 *      templateVersion: // value for 'templateVersion'
 *   },
 * });
 */
export function useGetHistoryForApplicantQuery(baseOptions?: Apollo.QueryHookOptions<GetHistoryForApplicantQuery, GetHistoryForApplicantQueryVariables>) {
        return Apollo.useQuery<GetHistoryForApplicantQuery, GetHistoryForApplicantQueryVariables>(GetHistoryForApplicantDocument, baseOptions);
      }
export function useGetHistoryForApplicantLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetHistoryForApplicantQuery, GetHistoryForApplicantQueryVariables>) {
          return Apollo.useLazyQuery<GetHistoryForApplicantQuery, GetHistoryForApplicantQueryVariables>(GetHistoryForApplicantDocument, baseOptions);
        }
export type GetHistoryForApplicantQueryHookResult = ReturnType<typeof useGetHistoryForApplicantQuery>;
export type GetHistoryForApplicantLazyQueryHookResult = ReturnType<typeof useGetHistoryForApplicantLazyQuery>;
export type GetHistoryForApplicantQueryResult = Apollo.QueryResult<GetHistoryForApplicantQuery, GetHistoryForApplicantQueryVariables>;
export const GetHistoryForReviewerDocument = gql`
    query getHistoryForReviewer($serial: String!, $questionCode: String!, $templateCode: String!, $templateVersion: Int!, $userId: Int!) {
  templateElementByTemplateCodeAndCodeAndTemplateVersion(code: $questionCode, templateCode: $templateCode, templateVersion: $templateVersion) {
    ...elementFragment
    reviewResponses(filter: {review: {application: {serial: {equalTo: $serial}}}, or: [{status: {equalTo: SUBMITTED}}, {and: [{status: {equalTo: DRAFT}}, {review: {reviewer: {id: {equalTo: $userId}}}}]}]}) {
      nodes {
        ...reviewResponseFragment
        review {
          stageNumber
        }
      }
    }
    applicationResponses(filter: {application: {serial: {equalTo: $serial}}, status: {equalTo: SUBMITTED}}) {
      nodes {
        ...applicationResponseFragment
        application {
          ...Application
          user {
            ...User
          }
          stageNumber
        }
      }
    }
  }
}
    ${ElementFragmentFragmentDoc}
${ReviewResponseFragmentFragmentDoc}
${ApplicationResponseFragmentFragmentDoc}
${ApplicationFragmentDoc}
${UserFragmentDoc}`;

/**
 * __useGetHistoryForReviewerQuery__
 *
 * To run a query within a React component, call `useGetHistoryForReviewerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHistoryForReviewerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHistoryForReviewerQuery({
 *   variables: {
 *      serial: // value for 'serial'
 *      questionCode: // value for 'questionCode'
 *      templateCode: // value for 'templateCode'
 *      templateVersion: // value for 'templateVersion'
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetHistoryForReviewerQuery(baseOptions?: Apollo.QueryHookOptions<GetHistoryForReviewerQuery, GetHistoryForReviewerQueryVariables>) {
        return Apollo.useQuery<GetHistoryForReviewerQuery, GetHistoryForReviewerQueryVariables>(GetHistoryForReviewerDocument, baseOptions);
      }
export function useGetHistoryForReviewerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetHistoryForReviewerQuery, GetHistoryForReviewerQueryVariables>) {
          return Apollo.useLazyQuery<GetHistoryForReviewerQuery, GetHistoryForReviewerQueryVariables>(GetHistoryForReviewerDocument, baseOptions);
        }
export type GetHistoryForReviewerQueryHookResult = ReturnType<typeof useGetHistoryForReviewerQuery>;
export type GetHistoryForReviewerLazyQueryHookResult = ReturnType<typeof useGetHistoryForReviewerLazyQuery>;
export type GetHistoryForReviewerQueryResult = Apollo.QueryResult<GetHistoryForReviewerQuery, GetHistoryForReviewerQueryVariables>;
export const GetLookupTableStructureByIdDocument = gql`
    query getLookupTableStructureById($lookupTableID: Int!) {
  dataTable(id: $lookupTableID) {
    id
    displayName
    tableName
    fieldMap
    dataViewCode
  }
}
    `;

/**
 * __useGetLookupTableStructureByIdQuery__
 *
 * To run a query within a React component, call `useGetLookupTableStructureByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLookupTableStructureByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLookupTableStructureByIdQuery({
 *   variables: {
 *      lookupTableID: // value for 'lookupTableID'
 *   },
 * });
 */
export function useGetLookupTableStructureByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetLookupTableStructureByIdQuery, GetLookupTableStructureByIdQueryVariables>) {
        return Apollo.useQuery<GetLookupTableStructureByIdQuery, GetLookupTableStructureByIdQueryVariables>(GetLookupTableStructureByIdDocument, baseOptions);
      }
export function useGetLookupTableStructureByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLookupTableStructureByIdQuery, GetLookupTableStructureByIdQueryVariables>) {
          return Apollo.useLazyQuery<GetLookupTableStructureByIdQuery, GetLookupTableStructureByIdQueryVariables>(GetLookupTableStructureByIdDocument, baseOptions);
        }
export type GetLookupTableStructureByIdQueryHookResult = ReturnType<typeof useGetLookupTableStructureByIdQuery>;
export type GetLookupTableStructureByIdLazyQueryHookResult = ReturnType<typeof useGetLookupTableStructureByIdLazyQuery>;
export type GetLookupTableStructureByIdQueryResult = Apollo.QueryResult<GetLookupTableStructureByIdQuery, GetLookupTableStructureByIdQueryVariables>;
export const GetApplicationNotesDocument = gql`
    query getApplicationNotes($applicationId: Int!) {
  applicationNotes(condition: {applicationId: $applicationId}, orderBy: TIMESTAMP_DESC) {
    nodes {
      id
      comment
      org {
        id
        name
      }
      user {
        fullName
        id
        username
      }
      files {
        nodes {
          filePath
          description
          id
          originalFilename
          uniqueId
        }
      }
      timestamp
    }
  }
}
    `;

/**
 * __useGetApplicationNotesQuery__
 *
 * To run a query within a React component, call `useGetApplicationNotesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApplicationNotesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApplicationNotesQuery({
 *   variables: {
 *      applicationId: // value for 'applicationId'
 *   },
 * });
 */
export function useGetApplicationNotesQuery(baseOptions?: Apollo.QueryHookOptions<GetApplicationNotesQuery, GetApplicationNotesQueryVariables>) {
        return Apollo.useQuery<GetApplicationNotesQuery, GetApplicationNotesQueryVariables>(GetApplicationNotesDocument, baseOptions);
      }
export function useGetApplicationNotesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApplicationNotesQuery, GetApplicationNotesQueryVariables>) {
          return Apollo.useLazyQuery<GetApplicationNotesQuery, GetApplicationNotesQueryVariables>(GetApplicationNotesDocument, baseOptions);
        }
export type GetApplicationNotesQueryHookResult = ReturnType<typeof useGetApplicationNotesQuery>;
export type GetApplicationNotesLazyQueryHookResult = ReturnType<typeof useGetApplicationNotesLazyQuery>;
export type GetApplicationNotesQueryResult = Apollo.QueryResult<GetApplicationNotesQuery, GetApplicationNotesQueryVariables>;
export const GetRefDocsDocument = gql`
    query getRefDocs {
  files(filter: {or: [{isInternalReferenceDoc: {equalTo: true}}, {isExternalReferenceDoc: {equalTo: true}}]}) {
    nodes {
      uniqueId
      description
      isInternalReferenceDoc
      isExternalReferenceDoc
    }
  }
}
    `;

/**
 * __useGetRefDocsQuery__
 *
 * To run a query within a React component, call `useGetRefDocsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRefDocsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRefDocsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRefDocsQuery(baseOptions?: Apollo.QueryHookOptions<GetRefDocsQuery, GetRefDocsQueryVariables>) {
        return Apollo.useQuery<GetRefDocsQuery, GetRefDocsQueryVariables>(GetRefDocsDocument, baseOptions);
      }
export function useGetRefDocsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRefDocsQuery, GetRefDocsQueryVariables>) {
          return Apollo.useLazyQuery<GetRefDocsQuery, GetRefDocsQueryVariables>(GetRefDocsDocument, baseOptions);
        }
export type GetRefDocsQueryHookResult = ReturnType<typeof useGetRefDocsQuery>;
export type GetRefDocsLazyQueryHookResult = ReturnType<typeof useGetRefDocsLazyQuery>;
export type GetRefDocsQueryResult = Apollo.QueryResult<GetRefDocsQuery, GetRefDocsQueryVariables>;
export const GetReviewDecisionCommentDocument = gql`
    query getReviewDecisionComment($reviewDecisionId: Int!) {
  reviewDecision(id: $reviewDecisionId) {
    id
    comment
  }
}
    `;

/**
 * __useGetReviewDecisionCommentQuery__
 *
 * To run a query within a React component, call `useGetReviewDecisionCommentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReviewDecisionCommentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReviewDecisionCommentQuery({
 *   variables: {
 *      reviewDecisionId: // value for 'reviewDecisionId'
 *   },
 * });
 */
export function useGetReviewDecisionCommentQuery(baseOptions?: Apollo.QueryHookOptions<GetReviewDecisionCommentQuery, GetReviewDecisionCommentQueryVariables>) {
        return Apollo.useQuery<GetReviewDecisionCommentQuery, GetReviewDecisionCommentQueryVariables>(GetReviewDecisionCommentDocument, baseOptions);
      }
export function useGetReviewDecisionCommentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReviewDecisionCommentQuery, GetReviewDecisionCommentQueryVariables>) {
          return Apollo.useLazyQuery<GetReviewDecisionCommentQuery, GetReviewDecisionCommentQueryVariables>(GetReviewDecisionCommentDocument, baseOptions);
        }
export type GetReviewDecisionCommentQueryHookResult = ReturnType<typeof useGetReviewDecisionCommentQuery>;
export type GetReviewDecisionCommentLazyQueryHookResult = ReturnType<typeof useGetReviewDecisionCommentLazyQuery>;
export type GetReviewDecisionCommentQueryResult = Apollo.QueryResult<GetReviewDecisionCommentQuery, GetReviewDecisionCommentQueryVariables>;
export const GetReviewInfoDocument = gql`
    query getReviewInfo($applicationId: Int, $assignerId: Int!) {
  reviewAssignments(condition: {applicationId: $applicationId}, orderBy: TIME_UPDATED_DESC) {
    nodes {
      ...ReviewAssignment
      stage {
        id
        number
        title
        colour
      }
      timeStageCreated
      trigger
      reviewer {
        id
        firstName
        lastName
      }
      reviews {
        nodes {
          id
          status
          timeStatusCreated
          trigger
          reviewDecisions(orderBy: TIME_UPDATED_DESC) {
            nodes {
              id
              decision
            }
          }
        }
      }
      reviewAssignmentAssignerJoins(filter: {assignerId: {equalTo: $assignerId}}) {
        nodes {
          assigner {
            firstName
            lastName
            id
          }
        }
      }
    }
  }
}
    ${ReviewAssignmentFragmentDoc}`;

/**
 * __useGetReviewInfoQuery__
 *
 * To run a query within a React component, call `useGetReviewInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReviewInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReviewInfoQuery({
 *   variables: {
 *      applicationId: // value for 'applicationId'
 *      assignerId: // value for 'assignerId'
 *   },
 * });
 */
export function useGetReviewInfoQuery(baseOptions?: Apollo.QueryHookOptions<GetReviewInfoQuery, GetReviewInfoQueryVariables>) {
        return Apollo.useQuery<GetReviewInfoQuery, GetReviewInfoQueryVariables>(GetReviewInfoDocument, baseOptions);
      }
export function useGetReviewInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReviewInfoQuery, GetReviewInfoQueryVariables>) {
          return Apollo.useLazyQuery<GetReviewInfoQuery, GetReviewInfoQueryVariables>(GetReviewInfoDocument, baseOptions);
        }
export type GetReviewInfoQueryHookResult = ReturnType<typeof useGetReviewInfoQuery>;
export type GetReviewInfoLazyQueryHookResult = ReturnType<typeof useGetReviewInfoLazyQuery>;
export type GetReviewInfoQueryResult = Apollo.QueryResult<GetReviewInfoQuery, GetReviewInfoQueryVariables>;
export const GetReviewResponsesDocument = gql`
    query getReviewResponses($reviewAssignmentId: Int!, $userId: Int!, $sectionIds: [Int!], $applicationId: Int!, $previousLevel: Int!, $stageNumber: Int!, $shouldIncludePreviousStage: Boolean! = false, $previousStage: Int) {
  thisReviewResponses: reviewResponses(orderBy: TIME_UPDATED_DESC, filter: {review: {reviewAssignmentId: {equalTo: $reviewAssignmentId}}, templateElement: {section: {id: {in: $sectionIds}}}, or: [{status: {notEqualTo: DRAFT}}, {and: [{status: {equalTo: DRAFT}}, {review: {reviewer: {id: {equalTo: $userId}}}}]}]}) {
    nodes {
      ...reviewResponseFragment
      ...consolidatorResponseFragment
      reviewResponseLink {
        ...reviewResponseFragment
      }
    }
  }
  previousLevelReviewResponses: reviewResponses(orderBy: TIME_UPDATED_DESC, filter: {review: {applicationId: {equalTo: $applicationId}, levelNumber: {equalTo: $previousLevel}, stageNumber: {equalTo: $stageNumber}}, templateElement: {section: {id: {in: $sectionIds}}}, status: {notEqualTo: DRAFT}}) {
    nodes {
      ...reviewResponseFragment
    }
  }
  originalReviewResponses: reviewResponses(orderBy: TIME_UPDATED_DESC, filter: {review: {applicationId: {equalTo: $applicationId}, levelNumber: {equalTo: 1}, stageNumber: {equalTo: $stageNumber}}, templateElement: {section: {id: {in: $sectionIds}}}, status: {notEqualTo: DRAFT}}) {
    nodes {
      ...reviewResponseFragment
    }
  }
  previousOriginalReviewResponses: reviewResponses(orderBy: TIME_UPDATED_DESC, filter: {review: {applicationId: {equalTo: $applicationId}, levelNumber: {equalTo: 1}, stageNumber: {equalTo: $previousStage}}, templateElement: {section: {id: {in: $sectionIds}}}, status: {notEqualTo: DRAFT}}) @include(if: $shouldIncludePreviousStage) {
    nodes {
      ...reviewResponseFragment
    }
  }
}
    ${ReviewResponseFragmentFragmentDoc}
${ConsolidatorResponseFragmentFragmentDoc}`;

/**
 * __useGetReviewResponsesQuery__
 *
 * To run a query within a React component, call `useGetReviewResponsesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReviewResponsesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReviewResponsesQuery({
 *   variables: {
 *      reviewAssignmentId: // value for 'reviewAssignmentId'
 *      userId: // value for 'userId'
 *      sectionIds: // value for 'sectionIds'
 *      applicationId: // value for 'applicationId'
 *      previousLevel: // value for 'previousLevel'
 *      stageNumber: // value for 'stageNumber'
 *      shouldIncludePreviousStage: // value for 'shouldIncludePreviousStage'
 *      previousStage: // value for 'previousStage'
 *   },
 * });
 */
export function useGetReviewResponsesQuery(baseOptions?: Apollo.QueryHookOptions<GetReviewResponsesQuery, GetReviewResponsesQueryVariables>) {
        return Apollo.useQuery<GetReviewResponsesQuery, GetReviewResponsesQueryVariables>(GetReviewResponsesDocument, baseOptions);
      }
export function useGetReviewResponsesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReviewResponsesQuery, GetReviewResponsesQueryVariables>) {
          return Apollo.useLazyQuery<GetReviewResponsesQuery, GetReviewResponsesQueryVariables>(GetReviewResponsesDocument, baseOptions);
        }
export type GetReviewResponsesQueryHookResult = ReturnType<typeof useGetReviewResponsesQuery>;
export type GetReviewResponsesLazyQueryHookResult = ReturnType<typeof useGetReviewResponsesLazyQuery>;
export type GetReviewResponsesQueryResult = Apollo.QueryResult<GetReviewResponsesQuery, GetReviewResponsesQueryVariables>;
export const GetReviewableQuestionCountsDocument = gql`
    query getReviewableQuestionCounts($applicationId: Int!, $stageId: Int!, $levelNumber: Int!) {
  reviewableQuestions(appId: $applicationId) {
    totalCount
  }
  assignedQuestions(appId: $applicationId, stageId: $stageId, levelNumber: $levelNumber, filter: {or: [{decision: {equalTo: APPROVE}}, {decision: {equalTo: AGREE}}]}) {
    totalCount
  }
}
    `;

/**
 * __useGetReviewableQuestionCountsQuery__
 *
 * To run a query within a React component, call `useGetReviewableQuestionCountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReviewableQuestionCountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReviewableQuestionCountsQuery({
 *   variables: {
 *      applicationId: // value for 'applicationId'
 *      stageId: // value for 'stageId'
 *      levelNumber: // value for 'levelNumber'
 *   },
 * });
 */
export function useGetReviewableQuestionCountsQuery(baseOptions?: Apollo.QueryHookOptions<GetReviewableQuestionCountsQuery, GetReviewableQuestionCountsQueryVariables>) {
        return Apollo.useQuery<GetReviewableQuestionCountsQuery, GetReviewableQuestionCountsQueryVariables>(GetReviewableQuestionCountsDocument, baseOptions);
      }
export function useGetReviewableQuestionCountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetReviewableQuestionCountsQuery, GetReviewableQuestionCountsQueryVariables>) {
          return Apollo.useLazyQuery<GetReviewableQuestionCountsQuery, GetReviewableQuestionCountsQueryVariables>(GetReviewableQuestionCountsDocument, baseOptions);
        }
export type GetReviewableQuestionCountsQueryHookResult = ReturnType<typeof useGetReviewableQuestionCountsQuery>;
export type GetReviewableQuestionCountsLazyQueryHookResult = ReturnType<typeof useGetReviewableQuestionCountsLazyQuery>;
export type GetReviewableQuestionCountsQueryResult = Apollo.QueryResult<GetReviewableQuestionCountsQuery, GetReviewableQuestionCountsQueryVariables>;
export const GetSchemaColumnsDocument = gql`
    query getSchemaColumns($tableNames: [SqlIdentifier!]) {
  schemaColumns(filter: {tableName: {in: $tableNames}}) {
    nodes {
      columnName
      tableName
    }
  }
}
    `;

/**
 * __useGetSchemaColumnsQuery__
 *
 * To run a query within a React component, call `useGetSchemaColumnsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSchemaColumnsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSchemaColumnsQuery({
 *   variables: {
 *      tableNames: // value for 'tableNames'
 *   },
 * });
 */
export function useGetSchemaColumnsQuery(baseOptions?: Apollo.QueryHookOptions<GetSchemaColumnsQuery, GetSchemaColumnsQueryVariables>) {
        return Apollo.useQuery<GetSchemaColumnsQuery, GetSchemaColumnsQueryVariables>(GetSchemaColumnsDocument, baseOptions);
      }
export function useGetSchemaColumnsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSchemaColumnsQuery, GetSchemaColumnsQueryVariables>) {
          return Apollo.useLazyQuery<GetSchemaColumnsQuery, GetSchemaColumnsQueryVariables>(GetSchemaColumnsDocument, baseOptions);
        }
export type GetSchemaColumnsQueryHookResult = ReturnType<typeof useGetSchemaColumnsQuery>;
export type GetSchemaColumnsLazyQueryHookResult = ReturnType<typeof useGetSchemaColumnsLazyQuery>;
export type GetSchemaColumnsQueryResult = Apollo.QueryResult<GetSchemaColumnsQuery, GetSchemaColumnsQueryVariables>;
export const GetTemplateDocument = gql`
    query getTemplate($code: String!, $status: TemplateStatus = AVAILABLE) {
  templates(condition: {code: $code, status: $status}) {
    nodes {
      ...templateFragment
      templateSections {
        nodes {
          ...Section
          templateElementsBySectionId {
            nodes {
              ...elementFragment
            }
          }
        }
      }
      templateStages {
        nodes {
          id
          number
          title
          description
        }
      }
    }
  }
}
    ${TemplateFragmentFragmentDoc}
${SectionFragmentDoc}
${ElementFragmentFragmentDoc}`;

/**
 * __useGetTemplateQuery__
 *
 * To run a query within a React component, call `useGetTemplateQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTemplateQuery({
 *   variables: {
 *      code: // value for 'code'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useGetTemplateQuery(baseOptions?: Apollo.QueryHookOptions<GetTemplateQuery, GetTemplateQueryVariables>) {
        return Apollo.useQuery<GetTemplateQuery, GetTemplateQueryVariables>(GetTemplateDocument, baseOptions);
      }
export function useGetTemplateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTemplateQuery, GetTemplateQueryVariables>) {
          return Apollo.useLazyQuery<GetTemplateQuery, GetTemplateQueryVariables>(GetTemplateDocument, baseOptions);
        }
export type GetTemplateQueryHookResult = ReturnType<typeof useGetTemplateQuery>;
export type GetTemplateLazyQueryHookResult = ReturnType<typeof useGetTemplateLazyQuery>;
export type GetTemplateQueryResult = Apollo.QueryResult<GetTemplateQuery, GetTemplateQueryVariables>;
export const GetTemplatesDocument = gql`
    query getTemplates($status: TemplateStatus = AVAILABLE) {
  templates(condition: {status: $status}, orderBy: CODE_ASC) {
    nodes {
      ...templateFragment
    }
  }
}
    ${TemplateFragmentFragmentDoc}`;

/**
 * __useGetTemplatesQuery__
 *
 * To run a query within a React component, call `useGetTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTemplatesQuery({
 *   variables: {
 *      status: // value for 'status'
 *   },
 * });
 */
export function useGetTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<GetTemplatesQuery, GetTemplatesQueryVariables>) {
        return Apollo.useQuery<GetTemplatesQuery, GetTemplatesQueryVariables>(GetTemplatesDocument, baseOptions);
      }
export function useGetTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTemplatesQuery, GetTemplatesQueryVariables>) {
          return Apollo.useLazyQuery<GetTemplatesQuery, GetTemplatesQueryVariables>(GetTemplatesDocument, baseOptions);
        }
export type GetTemplatesQueryHookResult = ReturnType<typeof useGetTemplatesQuery>;
export type GetTemplatesLazyQueryHookResult = ReturnType<typeof useGetTemplatesLazyQuery>;
export type GetTemplatesQueryResult = Apollo.QueryResult<GetTemplatesQuery, GetTemplatesQueryVariables>;
export const GetUsersDocument = gql`
    query getUsers {
  users {
    nodes {
      username
    }
  }
}
    `;

/**
 * __useGetUsersQuery__
 *
 * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
        return Apollo.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);
      }
export function useGetUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {
          return Apollo.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);
        }
export type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;
export type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;
export type GetUsersQueryResult = Apollo.QueryResult<GetUsersQuery, GetUsersQueryVariables>;
export const GeTemplateActionByCodeDocument = gql`
    query geTemplateActionByCode($pluginCode: String!) {
  templateActions(filter: {actionCode: {equalTo: $pluginCode}}) {
    nodes {
      id
      description
      condition
      parameterQueries
      trigger
      description
      template {
        name
        code
      }
    }
  }
}
    `;

/**
 * __useGeTemplateActionByCodeQuery__
 *
 * To run a query within a React component, call `useGeTemplateActionByCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGeTemplateActionByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGeTemplateActionByCodeQuery({
 *   variables: {
 *      pluginCode: // value for 'pluginCode'
 *   },
 * });
 */
export function useGeTemplateActionByCodeQuery(baseOptions?: Apollo.QueryHookOptions<GeTemplateActionByCodeQuery, GeTemplateActionByCodeQueryVariables>) {
        return Apollo.useQuery<GeTemplateActionByCodeQuery, GeTemplateActionByCodeQueryVariables>(GeTemplateActionByCodeDocument, baseOptions);
      }
export function useGeTemplateActionByCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GeTemplateActionByCodeQuery, GeTemplateActionByCodeQueryVariables>) {
          return Apollo.useLazyQuery<GeTemplateActionByCodeQuery, GeTemplateActionByCodeQueryVariables>(GeTemplateActionByCodeDocument, baseOptions);
        }
export type GeTemplateActionByCodeQueryHookResult = ReturnType<typeof useGeTemplateActionByCodeQuery>;
export type GeTemplateActionByCodeLazyQueryHookResult = ReturnType<typeof useGeTemplateActionByCodeLazyQuery>;
export type GeTemplateActionByCodeQueryResult = Apollo.QueryResult<GeTemplateActionByCodeQuery, GeTemplateActionByCodeQueryVariables>;
export const GetAllActionsDocument = gql`
    query getAllActions {
  actionPlugins(orderBy: NAME_ASC) {
    nodes {
      id
      code
      description
      name
      optionalParameters
      outputProperties
      requiredParameters
    }
  }
}
    `;

/**
 * __useGetAllActionsQuery__
 *
 * To run a query within a React component, call `useGetAllActionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllActionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllActionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllActionsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllActionsQuery, GetAllActionsQueryVariables>) {
        return Apollo.useQuery<GetAllActionsQuery, GetAllActionsQueryVariables>(GetAllActionsDocument, baseOptions);
      }
export function useGetAllActionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllActionsQuery, GetAllActionsQueryVariables>) {
          return Apollo.useLazyQuery<GetAllActionsQuery, GetAllActionsQueryVariables>(GetAllActionsDocument, baseOptions);
        }
export type GetAllActionsQueryHookResult = ReturnType<typeof useGetAllActionsQuery>;
export type GetAllActionsLazyQueryHookResult = ReturnType<typeof useGetAllActionsLazyQuery>;
export type GetAllActionsQueryResult = Apollo.QueryResult<GetAllActionsQuery, GetAllActionsQueryVariables>;
export const GetAllFiltersDocument = gql`
    query getAllFilters {
  filters {
    nodes {
      code
      id
      query
      title
      userRole
    }
  }
}
    `;

/**
 * __useGetAllFiltersQuery__
 *
 * To run a query within a React component, call `useGetAllFiltersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllFiltersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllFiltersQuery(baseOptions?: Apollo.QueryHookOptions<GetAllFiltersQuery, GetAllFiltersQueryVariables>) {
        return Apollo.useQuery<GetAllFiltersQuery, GetAllFiltersQueryVariables>(GetAllFiltersDocument, baseOptions);
      }
export function useGetAllFiltersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllFiltersQuery, GetAllFiltersQueryVariables>) {
          return Apollo.useLazyQuery<GetAllFiltersQuery, GetAllFiltersQueryVariables>(GetAllFiltersDocument, baseOptions);
        }
export type GetAllFiltersQueryHookResult = ReturnType<typeof useGetAllFiltersQuery>;
export type GetAllFiltersLazyQueryHookResult = ReturnType<typeof useGetAllFiltersLazyQuery>;
export type GetAllFiltersQueryResult = Apollo.QueryResult<GetAllFiltersQuery, GetAllFiltersQueryVariables>;
export const GetAllPermissionNamesDocument = gql`
    query getAllPermissionNames {
  permissionNames {
    nodes {
      id
      name
      permissionPolicyId
      permissionPolicy {
        id
        name
        rules
        type
        description
        defaultRestrictions
      }
    }
  }
}
    `;

/**
 * __useGetAllPermissionNamesQuery__
 *
 * To run a query within a React component, call `useGetAllPermissionNamesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllPermissionNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllPermissionNamesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllPermissionNamesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllPermissionNamesQuery, GetAllPermissionNamesQueryVariables>) {
        return Apollo.useQuery<GetAllPermissionNamesQuery, GetAllPermissionNamesQueryVariables>(GetAllPermissionNamesDocument, baseOptions);
      }
export function useGetAllPermissionNamesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllPermissionNamesQuery, GetAllPermissionNamesQueryVariables>) {
          return Apollo.useLazyQuery<GetAllPermissionNamesQuery, GetAllPermissionNamesQueryVariables>(GetAllPermissionNamesDocument, baseOptions);
        }
export type GetAllPermissionNamesQueryHookResult = ReturnType<typeof useGetAllPermissionNamesQuery>;
export type GetAllPermissionNamesLazyQueryHookResult = ReturnType<typeof useGetAllPermissionNamesLazyQuery>;
export type GetAllPermissionNamesQueryResult = Apollo.QueryResult<GetAllPermissionNamesQuery, GetAllPermissionNamesQueryVariables>;
export const GetAllTemplatesDocument = gql`
    query getAllTemplates {
  templates {
    nodes {
      code
      status
      id
      version
      versionTimestamp
      name
      status
      templateCategory {
        title
      }
      applications(filter: {isConfig: {equalTo: false}}) {
        totalCount
      }
    }
  }
}
    `;

/**
 * __useGetAllTemplatesQuery__
 *
 * To run a query within a React component, call `useGetAllTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllTemplatesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllTemplatesQuery, GetAllTemplatesQueryVariables>) {
        return Apollo.useQuery<GetAllTemplatesQuery, GetAllTemplatesQueryVariables>(GetAllTemplatesDocument, baseOptions);
      }
export function useGetAllTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllTemplatesQuery, GetAllTemplatesQueryVariables>) {
          return Apollo.useLazyQuery<GetAllTemplatesQuery, GetAllTemplatesQueryVariables>(GetAllTemplatesDocument, baseOptions);
        }
export type GetAllTemplatesQueryHookResult = ReturnType<typeof useGetAllTemplatesQuery>;
export type GetAllTemplatesLazyQueryHookResult = ReturnType<typeof useGetAllTemplatesLazyQuery>;
export type GetAllTemplatesQueryResult = Apollo.QueryResult<GetAllTemplatesQuery, GetAllTemplatesQueryVariables>;
export const GetTemplateCategoriesDocument = gql`
    query getTemplateCategories {
  templateCategories(orderBy: CODE_ASC) {
    nodes {
      code
      icon
      id
      title
      uiLocation
    }
  }
}
    `;

/**
 * __useGetTemplateCategoriesQuery__
 *
 * To run a query within a React component, call `useGetTemplateCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTemplateCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTemplateCategoriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetTemplateCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetTemplateCategoriesQuery, GetTemplateCategoriesQueryVariables>) {
        return Apollo.useQuery<GetTemplateCategoriesQuery, GetTemplateCategoriesQueryVariables>(GetTemplateCategoriesDocument, baseOptions);
      }
export function useGetTemplateCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTemplateCategoriesQuery, GetTemplateCategoriesQueryVariables>) {
          return Apollo.useLazyQuery<GetTemplateCategoriesQuery, GetTemplateCategoriesQueryVariables>(GetTemplateCategoriesDocument, baseOptions);
        }
export type GetTemplateCategoriesQueryHookResult = ReturnType<typeof useGetTemplateCategoriesQuery>;
export type GetTemplateCategoriesLazyQueryHookResult = ReturnType<typeof useGetTemplateCategoriesLazyQuery>;
export type GetTemplateCategoriesQueryResult = Apollo.QueryResult<GetTemplateCategoriesQuery, GetTemplateCategoriesQueryVariables>;
export const GetFullTemplateInfoDocument = gql`
    query getFullTemplateInfo($id: Int!) {
  template(id: $id) {
    ...FullTemplate
  }
}
    ${FullTemplateFragmentDoc}`;

/**
 * __useGetFullTemplateInfoQuery__
 *
 * To run a query within a React component, call `useGetFullTemplateInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFullTemplateInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFullTemplateInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetFullTemplateInfoQuery(baseOptions?: Apollo.QueryHookOptions<GetFullTemplateInfoQuery, GetFullTemplateInfoQueryVariables>) {
        return Apollo.useQuery<GetFullTemplateInfoQuery, GetFullTemplateInfoQueryVariables>(GetFullTemplateInfoDocument, baseOptions);
      }
export function useGetFullTemplateInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFullTemplateInfoQuery, GetFullTemplateInfoQueryVariables>) {
          return Apollo.useLazyQuery<GetFullTemplateInfoQuery, GetFullTemplateInfoQueryVariables>(GetFullTemplateInfoDocument, baseOptions);
        }
export type GetFullTemplateInfoQueryHookResult = ReturnType<typeof useGetFullTemplateInfoQuery>;
export type GetFullTemplateInfoLazyQueryHookResult = ReturnType<typeof useGetFullTemplateInfoLazyQuery>;
export type GetFullTemplateInfoQueryResult = Apollo.QueryResult<GetFullTemplateInfoQuery, GetFullTemplateInfoQueryVariables>;
export const GetPermissionStatisticsDocument = gql`
    query getPermissionStatistics($id: Int!, $name: String!, $rowLeveSearch: String!) {
  permissionName(id: $id) {
    name
    permissionJoins {
      nodes {
        id
        organisation {
          name
        }
        user {
          firstName
          lastName
          email
          username
        }
      }
    }
    permissionPolicy {
      description
      rules
      type
      name
    }
    templatePermissions {
      nodes {
        id
        stageNumber
        levelNumber
        template {
          id
          name
          code
          version
          status
        }
      }
    }
  }
  templateActions(filter: {parametersQueriesString: {includes: $name}}) {
    nodes {
      id
      actionCode
      condition
      parameterQueries
      trigger
      template {
        code
        name
        version
        status
      }
    }
  }
  templateElements(filter: {parametersString: {includes: $name}}) {
    nodes {
      id
      code
      parameters
      title
      section {
        template {
          code
          name
          status
          version
        }
      }
    }
  }
  postgresRowLevels(filter: {policyname: {endsWith: $rowLeveSearch}}) {
    nodes {
      policyname
      tablename
      withCheck
      qual
      roles
      schemaname
      permissive
      cmd
    }
  }
}
    `;

/**
 * __useGetPermissionStatisticsQuery__
 *
 * To run a query within a React component, call `useGetPermissionStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPermissionStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPermissionStatisticsQuery({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      rowLeveSearch: // value for 'rowLeveSearch'
 *   },
 * });
 */
export function useGetPermissionStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<GetPermissionStatisticsQuery, GetPermissionStatisticsQueryVariables>) {
        return Apollo.useQuery<GetPermissionStatisticsQuery, GetPermissionStatisticsQueryVariables>(GetPermissionStatisticsDocument, baseOptions);
      }
export function useGetPermissionStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPermissionStatisticsQuery, GetPermissionStatisticsQueryVariables>) {
          return Apollo.useLazyQuery<GetPermissionStatisticsQuery, GetPermissionStatisticsQueryVariables>(GetPermissionStatisticsDocument, baseOptions);
        }
export type GetPermissionStatisticsQueryHookResult = ReturnType<typeof useGetPermissionStatisticsQuery>;
export type GetPermissionStatisticsLazyQueryHookResult = ReturnType<typeof useGetPermissionStatisticsLazyQuery>;
export type GetPermissionStatisticsQueryResult = Apollo.QueryResult<GetPermissionStatisticsQuery, GetPermissionStatisticsQueryVariables>;
export const GetTemplateElementsByPluginDocument = gql`
    query getTemplateElementsByPlugin($pluginCode: String!) {
  templateElements(filter: {elementTypePluginCode: {equalTo: $pluginCode}}) {
    nodes {
      category
      helpText
      isEditable
      isRequired
      parameters
      validation
      code
      title
      id
      defaultValue
      validationMessage
      visibilityCondition
      templateCode
    }
  }
}
    `;

/**
 * __useGetTemplateElementsByPluginQuery__
 *
 * To run a query within a React component, call `useGetTemplateElementsByPluginQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTemplateElementsByPluginQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTemplateElementsByPluginQuery({
 *   variables: {
 *      pluginCode: // value for 'pluginCode'
 *   },
 * });
 */
export function useGetTemplateElementsByPluginQuery(baseOptions?: Apollo.QueryHookOptions<GetTemplateElementsByPluginQuery, GetTemplateElementsByPluginQueryVariables>) {
        return Apollo.useQuery<GetTemplateElementsByPluginQuery, GetTemplateElementsByPluginQueryVariables>(GetTemplateElementsByPluginDocument, baseOptions);
      }
export function useGetTemplateElementsByPluginLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTemplateElementsByPluginQuery, GetTemplateElementsByPluginQueryVariables>) {
          return Apollo.useLazyQuery<GetTemplateElementsByPluginQuery, GetTemplateElementsByPluginQueryVariables>(GetTemplateElementsByPluginDocument, baseOptions);
        }
export type GetTemplateElementsByPluginQueryHookResult = ReturnType<typeof useGetTemplateElementsByPluginQuery>;
export type GetTemplateElementsByPluginLazyQueryHookResult = ReturnType<typeof useGetTemplateElementsByPluginLazyQuery>;
export type GetTemplateElementsByPluginQueryResult = Apollo.QueryResult<GetTemplateElementsByPluginQuery, GetTemplateElementsByPluginQueryVariables>;
export const GetTemplatesAvailableForCodeDocument = gql`
    query getTemplatesAvailableForCode($code: String!) {
  templates(filter: {status: {equalTo: AVAILABLE}, code: {equalTo: $code}}) {
    nodes {
      id
      code
      status
    }
  }
}
    `;

/**
 * __useGetTemplatesAvailableForCodeQuery__
 *
 * To run a query within a React component, call `useGetTemplatesAvailableForCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTemplatesAvailableForCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTemplatesAvailableForCodeQuery({
 *   variables: {
 *      code: // value for 'code'
 *   },
 * });
 */
export function useGetTemplatesAvailableForCodeQuery(baseOptions?: Apollo.QueryHookOptions<GetTemplatesAvailableForCodeQuery, GetTemplatesAvailableForCodeQueryVariables>) {
        return Apollo.useQuery<GetTemplatesAvailableForCodeQuery, GetTemplatesAvailableForCodeQueryVariables>(GetTemplatesAvailableForCodeDocument, baseOptions);
      }
export function useGetTemplatesAvailableForCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTemplatesAvailableForCodeQuery, GetTemplatesAvailableForCodeQueryVariables>) {
          return Apollo.useLazyQuery<GetTemplatesAvailableForCodeQuery, GetTemplatesAvailableForCodeQueryVariables>(GetTemplatesAvailableForCodeDocument, baseOptions);
        }
export type GetTemplatesAvailableForCodeQueryHookResult = ReturnType<typeof useGetTemplatesAvailableForCodeQuery>;
export type GetTemplatesAvailableForCodeLazyQueryHookResult = ReturnType<typeof useGetTemplatesAvailableForCodeLazyQuery>;
export type GetTemplatesAvailableForCodeQueryResult = Apollo.QueryResult<GetTemplatesAvailableForCodeQuery, GetTemplatesAvailableForCodeQueryVariables>;